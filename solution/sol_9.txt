인터페이스를 사용하는 이유와 장점

1. 개발시간을 단축시킬 수 있다.
2. 표준화가 가능하다.
3. 서로 관계없는 클래스들에게 관계를 맺어줄 수 있다.
4. 독립적인 프로그래밍이 가능하다.

1. 일단 인터페이스가 작성되면, 이를 사용해서 프로그램을 작성하는 것이 가능하다. 메서드를 호출하는 쪽
에서는 메서드의 내용에 관계없이 선언부만 알면 되기 때문이다.
그리고 동시에 다른 한 쪽에서는 인터페이스를 구현하는 클래스를 작성하게 하면, 인터페이스를 구현하는
클래스가 작성될 때까지 기다리지 않고도 양쪽에서 동시에 개발을 진행할 수 있다.

2. 프로젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음, 개발자들에게 인터페이스를 구현하여
프로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능하다.

3. 서로 상속관계에 있지도 않고, 같은 조상클래스를 가지고 있지 않은 서로 아무런 관계도 없는 클래스들에게
하나의 인터페이스를 공통적으로 구현하도록 함으로써 관계를 맺어 줄 수 있다.

4. 인터페이스를 이용하면 클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제구현에 독립적인 프로그램을 
작성하는 것이 가능하다. 클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경
하면, 한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프로그래밍이 가능하다.

한 데이터베이스 회사가 제공하는 특정 데이터베이스를 사용하는데 필요한 클래스를 사용해서 프로그램을 작성
했다면 이 프로그램은 다른 종류의 데이터베이스를 사용하기 위해서는 전체 프로그램 중에서 데이터베이스 관련된 
부분은 모두 변경해야할 것이다.
그러나 데이터베이스 관련 인터페이스를 정의하고 이를 이용해서 프로그램을 작성하면, 데이터베이스의 종류가
변경되더라도 프로그램을 변경하지 않도록 할 수 있다.
단, 데이터베이스 회사에서 제공하는 클래스도 인터페이스를 구현하도록 요구해야 한다. 데이터베이스를 이용한
응용프로그램을 작성하는 쪽에서는 인터페이스를 이용해서 프로그램을 작성하고, 데이터베이스 회사에서는 인터
페이스를 구현한 클래스를 작성해서 제공해야 한다.
실제로 자바에서는 다수의 데이터베이스와 관련된 다수의 인터페이스를 제공하고 있으며, 프로그래머는 이 인터페
이스를 이용해서 프로그래밍하면 특정 데이터베이스에 종속되지 않는 프로그램을 작성할 수 있다.

건물을 표현하는 클래스 Academy, Bunker, Barrack, Factory가 있고 이들의 조상인 Building클래스가 있다고 하자.
이 때 Barrack클래스와 Factory클래스에 다음과 같은 내용의, 건물을 이동시킬 수 있는 새로운 메서드를 추가하고자
한다.

void liftOff(){}
void move(int x, int y){}
void stop(){}
void land(){}

Barrack클래스와 Factory클래스 모두 위의 코드를 적어주면 되긴 하지만, 코드가 중복된다는 단점이 있다.
새로 추가하고자하는 메서드를 정의하는 인터페이스를 정의하고 이를 구현하는 클래스를 작성한다.

interface Liftable{
  void liftOff();
  void move(int x, int y);
  void stop();
  void land();
}

class LiftableImpl implements Liftable{
  public void liftOff(){...}
  public void move(int x, int y){...}
  public void stop(){...}
  public void land(){...}
}

이렇게 하면 같은 내용의 코드를 작성할 때, Barrack클래스와 Factory클래스에서 각각 작성하지 않고 LiftableImpl
클래스 한 곳에서 관리할 수 있다. 그리고 작성된 Liftable인터페이스와 이를 구현한 LiftableImpl클래스는 후에
다시 재사용될 수 있을 것이다.

class Barrack extends Building implements Liftable{
  LiftableImpl l = new LiftableImpl();
  void liftOff(){l.liftOff();}
  void move(int x, int y){l.move(int x, int y);}
  void stop(){l.stop();}
  void land(){l.land();}
  ...
}
class Factory extends Building implements Liftable{
  LiftableImpl l = new LiftableImpl();
  ...
}

클래스 A와 클래스 B가 있다고 하자. 
class A{
  public void methodA(B b){
    b.methodB(); 
  }  
}
class B{
  public void methodB(){
    System.out.println("methodB()");
  }
}
class InterfaceTest(){
  public static void main(String args[]){
    A a = new A();
    a.methodA(new B());
  }
}
클래스 A(User)는 클래스 B(Provider)의 인스턴스를 생성하고 메서드를 호출한다. 이 두 클래스는 서로 직접적인
관계에 있다. 이것을 간단히 'A-B'라고 표현하자.
이와 같이 직접적인 관계의 두 클래스는 한 쪽(Provider)이 변경되면 다른 한 쪽(User)도 변경되어야 한다는 단점이
있다. 그러나 클래스 A가 클래스 B를 직접 호출하지 않고 인터페이스를 매개체로 해서 클래스 A가 인터페이스를 통해서
클래스 B의 메서드에 접근하도록 하면, 클래스 B에 변경사항이 생기거간 클래스 B와 같은 기능의 다른 클래스로 대체 
되어도 클래스 A는 전혀 영향을 받지 않도록 하는 것이 가능하다. 
두 클래스간의 관계를 간접적으로 변경하기 위해서는 먼저 인터페이스를 이용해서 클래스B(Provider)의 선언과 구현을
분리해야한다.

interface I{
  public abstract void methodB();
}
class B implements I{
  public void methodB(){
    System.out.println("methodB in B class");
  }
}

class A{
  public void methodA(I i){
    i.methodB();
  }
}

클래스 A를 작성하는데 있어서 클래스 B가 사용되지 않았다. 이제 클래스 A와 클래스 B는 'A-I-B'의 간접적인 관계로 바뀌
었다. 결국 클래스 A는 여전히 클래스 B의 메서드를 호출하지만, 클래스 A는 인터페이스 I하고만 직접적인 관계에 있기 
때문에 클래스 B의 변경에 영향을 받지 않는다. 클래스 A는 인터페이스를 통해 실제로 사용하는 클래스의 이름을 몰라도 되고
심지어는 실제로 구현된 클래스가 존재하지 않아도 문제되지 않는다. 클래스 A는 오직 직접적인 관계에 있는 인터페이스 I의
영향만 받는다.

interface I{
  public abstract void play();
}

class A{
  void autoPlay(I i){
    i.play();
  }
}

class B implements I{
  public void play(){
    System.out.println("play in B class");
  }
}

class C implements I{
  public void play(){
    System.out.println("play in C class");
  }
}

class InterfaceTest{
  public static main(String args[]){
    A a = new A();
    a.autoPlay(new B());
    a.autoPlay(new C());
  }
}
클래스 A가 인터페이스 I를 사용해서 작성되긴 하였지만, 이처럼 매개변수를 통해서 인터페이스 I를 구현한 클래스의 인스턴스
를 동적으로 제공받아야 한다.
클래스 Thread의 생성자인 Thread(Runnable traget)이 이런 방식으로 되어 있다.

이처럼 매개변수를 통해 동적으로 제공받을 수도 있지만 다음과 같이 제3의 클래스를 통해서 제공받을 수도 있다.
JDBC의 DriverManager클래스가 이런 방식으로 되어 있다.

class InterfaceTest{
    public static main(String args[]){
      A a = new A();
      a.methodA();
    }
}

class A{
  void methodA(){
    I i = InstanceManager.getInstance(); // 제 3의 클래스의 메서드를 통해서 인터페이스 i를 구현한 클래스의 인스턴스를 얻어온다.
    i.methodB();
    System.out.println(i.toString()); // 모든 객체는 Object클래스에 정의된 메서드를 가지고 있을 것이기 때문에 허용함.
  }
}

Interface I{
  public abstract void methodB();
}

class B implements I{
  public void methodB(){
    System.out.println("methodB in B class");
  }
  public String toString(){return "class B";}
}

class InstanceManager{
  public static I getInstance(){
    return new B(); // 다른 인스턴스로 바꾸려면 여기만 변경하면 됨.
  }
}








