그래프란?

# Agenda - Graphs
Graph basics and definitions
- Vertices/nodes, edges, adjacency, incidence
- Degree, in-degree, out-degree
- Subgraphs, unions, isomorphism
- Adjacency matrics
Types of Graphs
Trees
Undirected graphs
- Simple graphs, Multi graphs, Pseudographs
Digraphs, Directed multigraph
Bipartite
Complete graphs, cycles, wheels, cubes, complete bipartite

# Uses of Graph Theory in CS
Car navigation system
Efficient databases
Build a bot to retrieve info off WWW
Representing computational models Many other applications

# Graphs - Intuitive Notion
A graph is a bunch of vertices (or nodes) represented by circles
which are connected by edges, represented by line segments
Mathematically, graphs are binary-relations on their vertex set
(except for multigraphs)
In Data Structures one often starts with trees and generalizes to graphs.
In this course, opposite approach: We start with graphs and restrict to get trees

# Undirected graph
1. Simple Graphs
Different purposes require different types of graphs
EG : Suppose a local computer network
- Is bidirectional (undirected)
- Has no loops (no "self-communication")
- Has unique connections between computers
Sensible to represent as follows :
Vertices are labeled to associate with particular computers
* Each edge can be viewed as the set of its two endpoints

# DEF : A simple graph G = (V,E) consists of a non-empty finite set V of vertices(or nodes)
and a set E (possibly empty) of edges where each edge is a subset of V with cardinality(원소 개
수) 2 (an unordered pair).
Q : For a set V with n elements, how many possible edges there?
A : nC2
Q : How many possible graphs are there for the same set of vertices V? (|V| = n)
|V| = cardinality V 
G1 = (V1,E1) , G2 = (V2, E2) 
G1 = G2 <=> (V1 = V2) and (E1 = E2)
A : 2^(nC2) 

2. Multigraphs
Simple graphs have their nodes connected by only one link type, such as road or rail links. A 
multigraph can contain more than one link type between the same two nodes. In the above 
example, the multigraph is a combination of the two simple graphs.

If computers are connected via internet instead of directly, there may be several routes
to choose from for each connection. Depending on traffic, one route could be better than
another. Makes sense to allow multiple edges, but still no self-loops :
Edge-labels distinguish between edges sharing same endpoints.
Labeling can be thought of as function :
e1 -> {1,2}, e2 -> {1,2}, e3 -> {1,3}, e4 -> {2,3}, e5 -> {2,3}, e6 -> {1,2}

# DEF : A multigraph G = (V,E,f) consists of a non-empty set V of vertices(or nodes),
a set E (possibly empty) of edges and a function f with domain E and codomain the set of
unordered pairs in V.

3. Pseudographs
If self-loops are allowed we get a pseudograph :
Now edges may be associated with a single vertex, when the edge is a loop
e1 -> {1,2}, e2 -> {1,2}, e3 -> {1,3}, e4 -> {2,3}, e5 -> {2}, e6 -> {2},
e7 -> {4}

# DEF : A pseudograph G = (V,E,f) consists of a non-empty set V of vertices (or nodes),
a set E (possibly empty) of edges and a function f with domain E and codomain the set of 
unordered pairs and singletons in V.

# Undirected Graphs Terminology
Vertices are adjacent if they are the endpoints of the same edge.
(e1 -> {v1, v2}이면 v1, v2는 e1의 endpoints라고 한다)
(Vertex와 Vertex와의 관계)
a vertex is incident with an edge (and the edge is incident with the vertex) if it is the
endpoint of the edge.
(Vertex와 Edge와의 관계)

# Digraphs
Q : What type of pair should each edge be (multiple edges not allowed)?
A : Each edge is directed so an ordered pair (or tuple) rather than unordered pair.
Thus the set of edges E is just the represented relation on V.

# DEF : A directed graph (or digraph) 
G = (V,E) consists of a non-empty finite set V of vertices(or nodes) and a set E of edges
(subsets of V x V)
The edge (a,b) is also denoted by a->b and a is called source of the edge while b is called
the target of the edge.
Q : For a set V with n elements, how many possible digraphs are there?
A : The same as the number of relations on V, which is the number of subsets of 
V x V so 2^(n*n)

# Direct Multigraphs
If also want to allow multiple edges in a digraph, get a directed multigraph(or multi-digraph)
Q : How to use sets and functions to deal with multiple directed edges, loops?
A : Have function with domain the edge set and codomain V x V
e1 -> {1,2}, e2 -> {1,2}, e3 -> {2,2}, e4 -> {2,3}, e5 -> {2,3}, e6 -> {3.3},
e7 -> {3,3}

# Degree (edge 개수)
The degree of a vertex counts the number of edges that seem to be sticking out
Q : How to define this formally?
A : Add 1 for every regular edge incident with vertex and 2 for every loop.

# Oriented Degree when Edges Directed
The in-degree of a vertex (deg-) counts the number of edges that stick in to the vertex.
The out-degree(deg+) counts the number sticking out.

# Handshaking Theorem
There are two ways to count the number of edges in the graph :
1. Just count the set of edges
2. Count seeming edges vertex by vertex and divide by 2 because of double-counted edges 

Q : In a party of 5 people can each person be friends with exactly three others?
A : Imagine a simple graph with 5 people as vertices and edges being undirected edges
between friends (simple graph assuming friendship is symmetric and irreflexive).
Number of friends each person has is the degree of the person.
Handshaking would imply that
|E| = (sum of degrees)/2 or
2|E| = (sum of degrees) = (5*3) = 15.
Impossible as 15 is not even. In general 

Lemma : The number of vertices of odd degree must be even in an undirected graph
(홀수 차수를 가지는 정점의 개수는 짝수이다)
Proof : Otherwise would have
2|E| = Sum of even no.'s + an odd number of odd no.'s
even = even + odd - this is impossible

# degree sequence(차수 수열)으로 그래프가 존재하는지 여부를 확인하는 방법
Havel-Hakimi 알고리즘
1. 주어진 degree sequence를 비내림차순으로 정렬한다.
2. 수열의 첫 번째 원소를 선택하고, 이를 d라고 할 때, 이 수를 제거하고, 수열의 다음 d개의 원소들을 
1씩 감소시킨다.
3. 위의 과정을 재귀적으로 반복한다. 이때, 만약 제거하려는 원소가 수열의 길이보다 크거나 같다면 그
래프로 나타낼 수 없는 수열이므로 알고리즘을 중단하고 "그래프로 나타낼 수 없음"을 반환
한다. 앞의 과정을 모두 거친 후, degree sequence가 비어있으면 (즉, 모든 원소가 0이 되었으면) 그래
프로 나타낼 수 있는 수열이며, 그렇지 않으면 그래프로 나타낼 수 없는 수열입니다.

# 퀴즈
4쌍의 부부가 모였다.
일부 사람들이 악수를 했다.
부부간에는 악수를 하지 않았다.
각자 악수한 인원을 말했더니 모든 가능한 수가 다 나왔다. (0,1,2,...,6)
겹치는 수는?

degree sequence : 6,5,4,3,2,1,0,x
-> Havel-Hakimi 알고리즘 (0은 수열에서 제외한다)
1. 6을 지운 뒤, 다음 6개의 원소들을 1씩 감소시킨다
4,3,2,1,0,x-1
3. 4를 지운 뒤, 다음 4개의 원소들을 1씩 감소시킨다
2,1,0,x-2
4. 2를 지운 뒤, 다음 2개의 원소들을 1씩 감소시킨다
0,x-3
5. 그래프로 나타낼 수 있는 수열인 경우 앞의 과정을 모두 거친 후 degree sequence가 비어있어야
하므로 x = 3
즉 겹치는 수는 3이다.
(4쌍을 n쌍으로 바꿔도 됨 ... n-1이 겹침)

# Graph Patterns 
1. Complete Graphs - Kn
A Simple graph is complete if every pair of distinct vertices share an edge. The notation Kn
denotes the complete graph on n vertices.
2. Cycles - Cn
The cycle graph Cn is a circular graph with V = {0,1,2,...,n-1} where vertex is connected
to i+1 mod n and to i-1 mod n. They look like polygons 
3. Wheels - Wn
The wheel graph Wn i just a cycle graph with an extra vertex in the middle
4. Cubes - Qn
The n-cube Qn is defined recursively. Q0 is just a vertex. Qn+1 is gotten by taking
2 copies of Qn and joining each vertex v of Qn with its copy v'(노드 개수 : 2^n)
(복사본을 그대로 만들면서 엣지를 추가해줌)
Qk에서 임의의 v1, v2에 대하여 v1에서 v2까지 최대 logk번이면 도달가능하다.

# Bipartite Graphs
Bipartite Graph (이분 그래프)는 그래프의 정점들을 두 개의 상호 배타적인 집합으로 분할할 수 있는 그래프이다.
이 그래프에서 각 간선은 한 집합의 정점과 다른 집합의 정점을 연결합니다. 즉, 그래프를 두 개의 그룹으로 나누어서 
각 그룹 내에서는 간선이 존재하지 않는 형태입니다.

형식적으로, 그래프 G = (V, E)가 이분 그래프라면, 그래프의 정점 집합 V를 V1과 V2라는 두 개의 상호 배타적인 부
분집합으로 나눌 수 있어야 한다. 여기서 그래프의 간선 E는 V1에 속하는 정점과 V2에 속하는 정점을 연결하는 형
태를 가져야 한다. 이렇게 정점을 두 개의 그룹으로 나누는 것을 그래프의 이분화(bipartition)라고 한다.

이분 그래프는 다양한 응용 분야에서 활용될 수 있다. 예를 들어 학생과 강의, 직원과 프로젝트, 웹 페이지와 하이퍼
링크 등 서로 다른 유형의 개체나 개념들 간의 관계를 모델링하는 데 사용될 수 있다. 또한, 이분 그래프는 이분 
매칭 문제나 최대 유량 문제와 같은 일부 문제를 효율적으로 해결하는 알고리즘을 가지고 있다.

A simple graph is bipartite if V can be partitioned into V = V1 U V2 
such that any two adjacent vertices are in different parts of the partition. 
Another way of expressing the same idea is 
bichromatic. vertices can be colored using two colors so that no two vertices of the same
color are adjacent

