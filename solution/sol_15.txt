지네릭스란?

지네릭스는 다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입체크(compile-time
type check)를 해주는 기능이다. 객체의 타입을 컴파일 시에 체크하기 때문에 객체의 타입 안정성을 높이고 
형변환의 번거로움이 줄어든다. 
타입 안정성을 높인다는 것은 의도하지 않은 타입의 객체가 저장되는 것을 막고, 저장된 객체를 꺼내올 때
원래의 타입과 다른 타입으로 잘못 형변환되어 발생할 수 있는 오류를 줄여준다는 뜻이다.
장점 :
1. 타입 안정성을 제공한다.
2. 타입체크와 형변환을 생략할 수 있으므로 코드가 간결해 진다.

class Box<T>{
  T item;
  void setItem(T item){ this.item = item; }
  T getItem() { return item; }
}
Box<String> b = new Box<String>(); //타입 T대신, 실제 타입을 지정
b.setItem(new Object()); //에러. String이외의 타입은 지정불가
b.setItem("ABC") //ok
String item = b.getItem(); //형변환이 필요없음

Box<T> : 지네릭 클래스. 'T의 Box' 또는 'T Box'라고 읽는다.
T : 타입 변수 또는 타입 매개변수.(T는 타입 문자)
Box : 원시 타입(raw type)

모든 객체에 대해 동일하게 동작해야하는 static멤버에 타입 변수 T를 사용할 수 없다.
T는 인스턴스변수로 간주되기 때문이다.

class Box<T>{
  static T item; //에러
  static int compare(T t1, T t2) {...} //에러
  ...
}
static멤버는 타입 변수에 지정된 타입, 즉 대입된 타입의 종류에 관계없이 동일한 것이어야 하기 때문
이다. 그리고 지네릭 타입의 배열을 생성하는 것도 허용되지 않는다. 지네릭 타입의 참조변수를 선언
하는 것은 가능하지만, 'new T[10]'과 같이 배열을 생성하는 것은 안된다.

class Box<T>{
  T[] itemArr; //ok. T타입의 배열을 위한 참조변수
  ...
  T[] toArray(){
    T[] tmpArr = new T[itemArr.length]; //에러. 지네릭 배열 생성불가
    ...
    return tmpArr;
  }
    ...
}
지네릭 배열을 생성할 수 없는 것은 new연산자 때문인데, 이 연산자는 컴파일 시점에 타입 T가 뭔지
정확히 알아야 한다. 위의 코드에 정의된 Box<T>클래스를 컴파일하는 시점에서는 T가 어떤 타입이 될지
전혀 알 수 없다. instanceof연산자도 new연산자와 같은 이유로 T를 피연산자로 사용할 수 없다.
꼭 지네릭 배열을 생성해야할 필요가 있을 때는, new연산자대신 'Reflection API'의 newInstance()와
같이 동적으로 객체를 생성하는 메서드로 배열을 생성하거나, Object배열을 생성해서 복사한 다음에
'T[]'로 형변환하는 방법 등을 사용한다.

Box<Apple> appleBox = new Box<Apple>();//ok
Box<Apple> appleBox = new Box<Grape>();//에러
Box<Fruit> appleBox = new Box<Apple>(); //에러
Box<Apple> appleBox = new FruitBox<Apple>(); //ok.다형성

JDK1.7부터는 추정이 가능한 경우 생성자에 반복해서 타입을 지정해주지 않아도 된다.

타입 문자로 사용할 타입을 명시하면 한 종류의 타입만 저장할 수 있도록 제한할 수 있지만, 그래도
여전히 모든 종류의 타입을 지정할 수 있다는 것에는 변함이 없다. 타입 매개변수 T에 지정할 수 있는
타입의 종류를 제한할 수 있는 방법은 없을까?
지네릭 타입에 'extends'를 사용하면, 특정 타입의 자손들만 대입할 수 있게 제한할 수 있다.
class FruitBox<T extends Fruit>{
  //Fruit의 자손만 타입으로 지정가능
  ArrayList<T> list = new ArrayList<T>();
  ...
}
FruitBox<Apple> appleBox = new FruitBox<Apple>(); //ok
FruitBox<Toy> toyBox = new FruitBox<Toy>(); //에러. Toy는 Fruit의 자손이 아님

만일 클래스가 아니라 인터페이스를 구현해야 한다는 제약이 필요하다면, 이때도 'extends'를 사용한다.
'implements'를 사용하지 않는다는 점에 주의하자.
클래스 Fruit의 자손이면서 Eatable인터페이스도 구현해야한다면 아래와 같이 '&'기호로 연결한다.
class FruitBox<T extends Fruit & Eatable>{...}

매개변수에 과일박스를 대입하면 주스를 만들어서 반환하는 Juicer라는 클래스가 있고, 이 클래스에는
과일을 주스로 만들어서 반환하는 makeJuice()라는 static메서드가 다음과 같이 정의되어 있다고 가정하
자.

class Juicer{
  static Juice makeJuice(FruitBox<Fruit> box){ //<Fruit>으로 지정
    String tmp = "";
    for(Fruit f : box.getList()) tmp += f + " ";
    return new Juice(tmp);
  }
}
Juicer클래스는 지네릭 클래스가 아닌데다, 지네릭 클래스라고 해도 static메서드에는 타입 매개변수 T
를 매개변수에 사용할 수 없으므로 아예 지네릭스를 적용하지 않던가, 위와 같이 타입 매개변수 대신, 특
정 타입을 지정해줘야 한다.
지네릭 타입을 'FruitBox<Fruit>'로 고정해 놓으면, 'FruitBox<Apple>'타입의 객체는 makeJuice()의
매개변수가 될 수 없으므로, 여러 가지 타입의 매개변수를 갖는 makeJuice()를 만들 수 밖에 없다.
그러나 지네릭 타입이 다른 것만으로는 오버로딩이 성립하지 않는다. 지네릭 타입은 컴파일러가 컴파일
할 때만 사용하고 제거해버린다. 이럴 때 사용하기 위해 고안된 것이 바로 '와일드 카드'이다.
<? extends T> : 와일드 카드의 상한 제한. T와 그 자손들만 가능
<? super T> : 와일드 카드의 하한 제한. T와 그 조상들만 가능
<?> : 제한 없음. 모든 타입이 가능 <? extends Object>와 동일

static Juice makeJuice(FruitBox<? extends Fruit> box){
  String tmp = "";
  for(Fruit f : box.getList()) tmp += f + " ";
  return new Juice(tmp);
}
FruitBox<Fruit> fruitBox = new FruitBox<Fruit>();
FruitBox<Apple> applebox = new FruitBox<Apple>();
...
System.out.println(Juicer.makeJuice(fruitBox)); //ok. FruitBox<Fruit>
System.out.println(Juicer.makeJuice(appleBox)); //ok. FruitBox<Apple>

Collections.sort() 메서드의 선언부는 다음과 같다.
static <T> void sort(List<T> list, Comparator<? super T> c)
'static' 옆에 있는 '<T>'는 메서드에 선언된 지네릭 타입이다. 이런 메서드를 지네릭 메서드라고 하고,
Comparator의 지네릭 타입에 하한 제한이 걸려있는 와일드 카드가 사용되었다.
먼저 다음과 같이 와일드 카드를 사용하지 않았다고 가정해보자.

static <T> void sort(List<T> list, Comparator<T> c)
만일 타입 매개변수 T에 Apple이 대입되면, 위의 정의는 아래와 같이 바뀔 것이다.
static void sort(List<Apple> list, Comparator<Apple> c)
이것은 List<Apple>을 정렬하기 위해서는 Comparator<Apple>이 필요하다는 것을 의미한다.
그래서 Comparator<Apple>을 구현한 AppleComp클래스를 아래처럼 정의하였다.
class AppleComp implements Comparator<Apple>{
  public int compare(Apple t1, Apple t2){
    return t2.weight - t1.weight;
  }
}
이 때, Apple대신 Grape가 대입된다면? List<Grape>를 정렬하려면, Comparator<Grape>가 필요하다.
코드의 중복도 문제이고, 새로운 Fruit의 자손이 생길 때마다 위와 같은 코드를 반복해서 만들어야 한
다는 것도 문제이다. 이 문제를 해결하기 위해 타입 매개변수에 하한 제한의 와일드 카드를 적용해야 한
다.
static <T> void sort(List<T> list, Comparator<? super T> c)
위의 문장에서 타입 매개변수 T에 Apple이 대입되면 다음과 같이 된다.
static void sort(List<Apple> list, Comparator<? super Apple> c)
매개변수의 타입이 Comparator<? super Apple>이라는 의미는 Comparator의 타입 매개변수로 Apple과
그 조상이 가능하다는 뜻이다. 즉, Comparator<Apple>, Comparator<Fruit>, Comparator<Object> 중의
하나가 두 번째 매개변수로 올 수 있다는 뜻이다.
그래서 아래와 같이 FruitComp를 만듬련, List<Apple>과 List<Grape>를 모두 정렬할 수 있다.
비교의 대상이 되는 weight는 Apple과 Grape의 조상인 Fruit에 정의되어 있기 때문에 가능한 것이기도
하다. 
class FruitComp implements Comparator<Fruit>
{
  public int compare(Fruit t1, Fruit t2){
    return t1.weight - t2.weight;
  }
}  
  ...
//List<Apple>과 List<Grape>를 모두 Comparator<Fruit>으로 정렬
Collections.sort(appleBox.getList(), new FruitComp());
Collections.sort(grapeBox.getList(), new FruitComp());
이러한 장점 때문에 Comparator에는 항상 <? super T>가 습관적으로 따라 붙는다. 

메서드의 선언부에 지네릭 타입이 선언된 메서드르 지네릭 메서드라 한다. 위의 Collections.sort()가
바로 지네릭 메서드이며, 지네릭 타입의 선언 위치는 반환 타입 바로 앞이다.
static <T> void sort(List<T> list, Comparator<? super T> c)
지네릭 클래스에 정의된 타입 매개변수와 지네릭 메서드에 정의된 타입 매개변수는 전혀 별개의 것이다.
class FruitBox<T>{
  ...
  static <T> void sort(List<T> list, Comparator<? super T> c)
  ...
  }
}
sort()가 static 메서드라는 것에 주목하자. static멤버에는 타입 매개변수를 사용할 수 없지만,
이처럼 메서드에 지네릭 타입을 선언하고 사용하는 것은 가능하다. 메서드에 선언된 지네릭 타입은
지역 변수를 선언한 것과 같다고 생각하면 이해하기 쉬운데, 이 타입 매개변수는 메서드 내에서만 지역
적으로 사용될 것이므로 메서드가 static이건 아니건 상관이 없다.
 static Juice makeJuice(FruitBox<? extends Fruit> box){
      String tmp = "";
      for(Fruit f : box.getList())
          tmp += f + " ";
      return new Juice(tmp);
    }
 static <T extends Fruit>Juice makeJuice(FruitBox<T> box){
      String tmp = "";
      for(Fruit f : box.getList())
          tmp += f + " ";
      return new Juice(tmp);
    }
지네릭 메서드는 매개변수의 타입이 복잡할 때도 유용하다. 
public static void printAll(ArrayList<? extends Product> list, ArrayList<? extends Product>
list 2){
  for(Unit u : list){
    System.out.println(u);
  }
}
public static <T extends Product> void printAll(ArrayList<T> list, ArrayList<T> list2){
  for(Unit u : list){
    System.out.println(u);
  }
}

public static <T extends Comparable<? super T>> void sort(List<T> list)
1. 타입 T를 요소로 하는 List를 매개변수로 허용한다.
2. 'T'는 Comparable을 구현한 클래스이어야 하며(<T extends Comparable>), 'T'또는 그 조상의 타입을
비교하는 Comparable이어야한다는 것(Comparable<? super T>)을 의미한다. 만일 T가 Student이고, 
Person의 자손이라면, <? super T>는 Student, Person, Object가 모두 가능하다.

지네릭 타입과 원시 타입(raw type)간의 형변환이 가능할까?
Box box = null;
Box<Object> objBox = null;

box = (Box)objBox; //ok. 지네릭 타입 -> 원시타입. 경고발생
objBox = (Box<Object>)box; //ok. 원시타입 -> 지네릭 타입. 경고발생
지네릭 타입과 넌지네릭 타입간의 형변환은 항상 가능하다. 다만 경고가 발생할 뿐이다.
대입된 타입이 다른 지네릭 타입 간에는 형변환이 가능할까?

Box<Object> objBox = null;
Box<String> strBox = null;

objBox = (Box<Object>)strBox; //에러.
strBox = (Box<String>)objBox; //에러.
불가능하다. 
Box<? extends Object> wBox = new Box<String>();
형변환이 된다. 그래서 makeJuice메서드의 매개변수에 다형성이 적용될 수 있었던 것이다.

static Juice makeJuice(FruitBox<? extends Fruit> box){...}
FruitBox<? extends Fruit> box = new FruitBox<Fruit>(); //ok
FruitBox<? extends Fruit> box = new FruitBox<Apple>(); //ok
FruitBox<? extends Fruit> box = new FruitBox<Grape>(); //ok

다음은 java.util.Optional클래스의 실제 소스의 일부이다. 
public final calss Optional<T>{
  private static final Optional<?> EMPTY = new Optional<>();
  private final T value;
    ...
  public static<T> Optional<T> empty(){
    Optional<T> t = (Optional<T>) EMPTY;
    return t;
  }
    ...
}
static상수 EMPTY에 비어있는 Optional객체를 생성해서 저장했다가 empty()를 호출하면 EMPTY
를 형변환해서 반환한다. 먼저 상수를 선언하는 문장은 다음과 같다.
Optional<?> EMPTY = new Optional<>();
-> Optional<? extends Object> EMPTY = new Optional<>();
-> Optional<? extends Object> EMPTY = new Optional<Object>();
<?>는 <? extends Object>를 줄여쓴 것이며, <>안에 생략된 타입은 '?'가 아니라 'Object'이다.

위의 문장에서 EMPTY의 타입을 Optional<Object>가 아닌 Optional<?>로 한 이유는 Optional<T>로
형변환이 가능하기 때문이다.
Optional<?> wopt = new Optional<Object>();
Optional<Object> oopt = new Optional<Object>();

Optional<String> sopt = (Optional<String>)wopt; //ok. 형변환 가능
Optional<String> sopt = (Optional<String>)oopt; //에러. 형변환 불가
empty()의 반환 타입이 Optional<T>이므로 EMPTY를 Optional<T>로 형변환해야 하는데, 
위의 코드에서 알 수 있는 것처럼 Optional<Object>는 Optional<T>로 형변환이 불가능하다.
  public static<T> Optional<T> empty(){
    Optional<T> t = (Optional<T>) EMPTY;
    return t;
  }  
Optional<Object>를 Optional<String>으로 직접 형변환하는 것은 불가능하지만, 와일드 카드가 포함된
지네릭 타입으로 형변환하면 가능하다. 대신 확인되지 않은 타입으로의 형변환이라는 경고가 발생한다.
Optional<Object> -> Optional<T> // 형변환 불가능.
Optional<Object> -> Optional<?> -> Optional<T> // 형변환 가능. 경고발생

컴파일러는 지네릭 타입을 이용해서 소스파일을 체크하고, 필요한 곳에 형변환을 넣어준다. 그리고 지네
릭 타입을 제거한다. 즉, 컴파일된 파일(*.class)에는 지네릭 타입에 대한 정보가 없는 것이다.
지네릭이 도입되기 이전의 소스 코드와의 호환성을 유지하기 위해서이다. 

1. 지네릭 타입의 경계(bound)를 제거한다.
지네릭 타입이<T extends Fruit>라면 T는 Fruit로 치환된다. <T>인 경우는 T는 Object로 치환된다.
그리고 클래스 옆의 선언은 제거된다.

class Box<T extends Fruit>{
  void add(T t){
  ...
  }
} 
class Box{
  void add(Fruit t){
  ...
  }
}

2. 지네릭 타입을 제거한 후에 타입이 일치하지 않으면, 형변환을 추가한다.
List의 get()은 Object타입을 반환하므로 형변환이 필요하다.

T get (int i){
  return list.get(i);
} 
Fruit get(int i){
  return (Fruit)list.get(i);
}
와일드 카드가 포함되어 있는 경우에는 다음과 같이 적절한 타입으로의 형변환이 추가된다.
 static Juice makeJuice(FruitBox<? extends Fruit> box){
      String tmp = "";
      for(Fruit f : box.getList())
          tmp += f + " ";
      return new Juice(tmp);
    }
 static Juice makeJuice(FruitBox box){
      String tmp = "";
      Iterator it = box.getList().iterator();
      while(it.hasNext()){
        tmp += (Fruit)it.next() + " ";
      }
      return new Juice(tmp);
    }
