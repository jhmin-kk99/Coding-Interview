람다식이란? 

람다식의 도입으로 인해, 자바는 객체지향언어인 도이에 함수형 언어가 되었다. 
람다식(Lambda expression)은 간단히 말해서 메서드를 하나의 '식(expression)'으로 표현한 것이다.
람다식은 함수를 간략하면서도 명확한 식으로 표현할 수 있게 해준다. 메서드를 람다식으로 표현하면
메서드의 이름과 반환값이 없어지므로, 람다식을 '익명함수(anonymous function)'이라고도 한다.

int[] arr = new int[5];
Arrays.setAll(arr, (i)->(int)(Math.random()*5)+1);

모든 메서드는 클래스에 포함되어야 하므로 클래스도 새로 만들어야 하고, 객체도 생성해야만 비로소 이 메
서드를 호출할 수 있다. 그러나 람다식은 이 모든 과정없이 오직 람다식 자체만으로도 이 메서드의 역할을 대
신할 수 있다. 게다가 람다식은 메서드의 매개변수로 전달되어지는 것이 가능하고, 메서드의 결과로 반환될
수도 있다. 람다식으로 인해 메서드를 변수처럼 다루는 것이 가능해진 것이다. 

int max(int a, int b){
  return a > b ? a : b;
}
->
(a, b) -> a > b ? a : b

void printVar(String name, int i){
  System.out.println(name + "=" + i);
}
->
(name, i) -> System.out.println(name + "=" + i);

int square(int x){
  return x * x;
}
->
x -> x * x 

int roll(){
  return (int)(Math.random() * 6);
}
->
() -> (int)(Math.random() * 6)

int sumArr(int[] arr){
  int sum = 0;
  for(int i : arr)
    sum += i;
  return sum;
}
->
(int[] arr) -> {
  int sum = 0;
  for(int i : arr)
    sum += i;
  return sum;
}

자바에서 모든 메서드는 클래스 내에 포함되어야 하는데, 람다식은 어떤 클래스에 포함되는 것일까?
람다식은 익명 클래스의 객체와 동등하다.

interface MyFunction{
  public abstract int max(int a, int b);
}
MyFunction f = new MyFunction(){
  public int max(int a, int b){
    return a > b ? a : b;
  }
};
int big = f.max(5, 3); // 익명 객체의 메서드를 호출

MyFunction인터페이스에 정의된 메서드 max()는 람다식'(int a, int b) -> a > b ? a : b'과 메서드의
선언부가 일치한다. 그래서 위 코드의 익명 객체를 람다식으로 아래와 같이 대체할 수 있다. 

MyFunction f = (int a, int b) -> a > b ? a : b; // 익명 객체를 람다식으로 대체
int big = f.max(5, 3); // 익명 객체의 메서드를 호출

이처럼 MyFunction인터페이스를 구현한 익명 객체를 람다식으로 대체가 가능한 이유는, 람다식도 실제로는
익명 객체이고, MyFunction인터페이스를 구현한 익명 객체의 메서드 max()와 람다식의 매개변수의 타입과
개수 그리고 반환값이 일치하기 때문이다. 인터페이스를 통해 람다식을 다루기로 결정되었으며, 람다식을
다루기 위한 인터페이스를 '함수형 인터페이스(functional interface)'라고 부르기로 했다.

@FunctionalInterface
interface MyFunction{ // 함수형 인터페이스 MyFunction을 정의
  public abstract int max(int a, int b);
}
단, 함수형 인터페이스에는 오직 하나의 추상 메서드만 정의되어 있어야 한다는 제약이 있다. 그래야 람다
식과 인터페이스의 메서드가 1:1로 연결될 수 있기 때문이다. 반면에 static메서드와 default메서드의 개
수에는 제약이 없다.

함수형 인터페이스 MyFunction이 아래와 같이 정의되어 있다고 하자.
@FunctionalInterafce
interface MyFunction{
  void myMethod(); //추상 메서드
}
메서드의 매개변수가 MyFunction타입이면, 이 메서드를 호출할 때 람다식을 참조하는 참조변수를 매개변수
로 지정해야한다.

void aMethod(MyFunction f){ // 매개변수의 타입이 함수형 인터페이스
  f.myMethod(); // MyFunction에 정의된 메서드 호출
}
  ...
MyFunction f = () -> System.out.println("myMethod()");
aMethod(f);
또는 참조변수 없이 아래와 같이 직접 람다식을 매개변수로 지정하는 것도 가능하다.

aMethod(() -> System.out.println("myMethod()")); // 람다식을 매개변수로 지정

그리고 메서드의 반환타입이 함수형 인터페이스타입이라면, 이 함수형 인터페이스의 추상메서드와 동등한
람다식을 가리키는 참조변수를 반환하거나 람다식을 직접 반환할 수 있다.

MyFunction myMethod(){
  MyFunction f = () -> {};
  return f; // 이 줄과 윗 줄을 한 줄로 줄이면, return () -> {};
}

람다식을 참조변수로 다룰 수 있다는 것은 메서드를 통해 람다식을 주고받을 수 있다는 것을 의미한다.
즉, 변수처럼 메서드를 주고받는 것이 가능해진 것이다.

@FunctionalInterface
interface MyFunction {
  void run(); //public abstract void run();
}
class LambdaEx{
  static void execute(MyFunction f){ // 매개변수의 타입이 MyFunction인 메서드
    f.run();
  }
  static MyFunction getMyFunction(){
    MyFunction f = () -> System.out.println("f3.run()");
    return f;
  }
  public static void main(String args[]){
    // 람다식으로 MyFunction의 run()을 구현
    MyFunction f1 = () -> System.out.println("f1.run()");

    MyFunction f2 = new MyFunction(){ // 익명클래스로 run()을 구현
      public void run(){ // public을 반드시 붙여야 함
        System.out.println("f2.run()");
      }
    };
    MyFunction f3 = getMyFunction();
    f1.run();
    f2.run();
    f3.run();
    execute(f1);
    execute( () -> System.out.println("run()") );
  }
}

함수형 인터페이스로 람다식을 참조할 수 있는 것일 뿐, 람다식의 타입이 함수형 인터페이스의 타입과
일치하는 것은 아니다. 람다식은 익명 객체이고 익명 객체는 타입이 없다. 정확히는 타입이 있지만 컴파
일러가 임의로 이름을 정하기 때문에 알 수 없는 것이다. 그래서 대입 연산자의 양변의 타입을 일치시키기
위해 아래와 같이 형변환이 필요하다.

MyFunction f = (MyFunction)(()->{}); // 양변의 타입이 다르므로 형변환이 필요

람다식은 MyFunction인터페이스를 직접 구현하지 않았지만, 이 인터페이스를 구현한 클래스의 객체와
완전히 동일하기 때문에 위와 같은 형변환을 허용한다. 그리고 이 형변환은 생략가능하다. 람다식은
이름이 없을 뿐 분명히 객체인데도, 아래와 같이 Object타입으로 형변환 할 수 없다. 람다식은 오직
함수형 인터페이스로만 형변환이 가능하다.

Object obj = (Object)(()->{}); // 에러. 함수형 인터페이스로만 형변환 가능

굳이 Object타입으로 형변환하려면, 먼저 함수형 인터페이스로 변환해야 한다.

Object obj = (Object)(MyFunction)(()->{});
String str = ((Object)(MyFunction)(()->{})).toString();

또한, 람다식 내에서 참조하는 지역변수는 final이 붙지 않았어도 상수로 간주된다.

java.util.function패키지에 일반적으로 자주 쓰이는 형식의 메서드를 함수형 인터페이스로 미리
정의해 놓았다. 매번 새로운 함수형 인터페이스를 정의하지 말고, 가능하면 이 패키지의 인터페이스를 활
용하는 것이 좋다. 그래야 함수형 인터페이스에 정의된 메서드 이름도 통일되고, 재사용성이나 유지보수
측면에서도 좋다.

- java.lang.Runnable / void run() / 매개변수도 없고, 반환값도 없음
- Supplier<T> / T get() / 매개변수는 없고, 반환값만 있음
- Consumer<T> / void accept(T t) / Supplier와 반대로 매개변수만 있고, 반환값이 없음
- Function<T,R> / R apply(T t) / 일반적인 함수. 하나의 매개변수를 받아서 결과를 반환
- Predicate<T> / boolean test(T t) / 조건식을 표현하는데 사용됨. 매개변수는 하나. 반환 타입은
boolean

매개변수의 반환값의 유무에 따라 4개의 함수형 인터페이스가 정의되어 있고, Function의 변형으로 
Predicate가 있는데, 반환값이 boolean이라는 것만 제외하면 Function과 동일하다. Predicate는 조건식
을 함수로 표현하는데 사용된다.
Predicate는 Function의 변형으로, 반환타입이 boolean이라는 것만 다르다. Predicate는 조건식을 람다식
으로 표현하는데 사용된다.

Predicate<String> isEmptyStr = s -> s.length() == 0;
String s = "";
if(isEmptyStr.test(s)) // if(s.length() == 0)
  System.out.println("This is an empty String.");

매개변수의 개수가 2개인 함수형 인터페이스는 이름 앞에 접두사 'Bi'가 붙는다.
- BiConsumer<T,U> / void accept(T t, U u) / 두 개의 매개변수만 있고, 반환값이 없음
- BiPredicate<T,U> / boolean test(T t, U u) / 조건식을 표현하는데 사용됨. 매개변수는 둘, 반환값은
boolean
- BiFunction<T,U,R> / R apply(T t, U u) / 두 개의 매개변수를 받아서 하나의 결과를 반환

두 개 이상의 매개변수를 갖는 함수형 인터페이스가 필요하다면 직접 만들어서 써야한다.
만일 3개의 매개변수를 갖는 함수형 인터페이스를 선언한다면 다음과 같을 것이다.

@Functional Interface
interface TriFunction<T,U,V,R>{
  R apply(T t, U u, V v);
}

Function의 또 다른 변형으로 UnaryOperator와 BinaryOperator가 있는데, 매개변수의 타입과 반환타입의
타입이 모두 일치한다는 점만 제외하고는 Function과 같다.
- UnaryOperator<T> / T apply(T t) / Function의 자손, Function과 달리 매개변수와 결과의 타입이 같
다.
- BinaryOperator<T> / T apply(T t, T t) / BiFunction의 자손, BiFunction과 달리 매개변수와 결과의
타입이 같다.

// 컬렉션 프레임웍과 함수형 인터페이스
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class LambdaEx {
    public static void main(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        for(int i=0; i<10; i++)
            list.add(i);
        // list의 모든 요소를 출력
        list.forEach(i->System.out.print(i+","));
        System.out.println();
        // list에서 2 또는 3의 배수를 제거한다.
        list.removeIf(x -> x%2==0 || x%3==0);
        System.out.println(list);

        list.replaceAll(i -> i*10); //list의 각 요소에 10을 곱한다.
        System.out.println(list);

        Map<String, String> map = new HashMap<>();
        map.put("1","1");
        map.put("2","2");
        map.put("3","3");
        map.put("4","4");

        // map의 모든 요소를 {k,v}의 형식으로 출력한다.
        map.forEach((k,v) -> System.out.print("{"+k+","+v+"},"));
        System.out.println();
    }
}

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

public class LambdaEx {
    public static void main(String[] args) {
        Supplier<Integer> s = () -> (int)(Math.random()*100)+1;
        Consumer<Integer> c = i -> System.out.print(i+", ");
        Predicate<Integer> p = i -> i%2==0;
        Function<Integer,Integer> f = i -> i/10*10; //i의 일의 자리를 없앤다.

        List<Integer> list = new ArrayList<>();
        makeRandomList(s, list);
        System.out.println(list);
        printEvenNum(p, c, list);
        List<Integer> newList = doSomething(f, list);
        System.out.println(newList);
    }
    static<T> List<T> doSomething(Function<T,T> f, List<T> list){
        List<T> newList = new ArrayList<T>(list.size());
        for(T i : list){
            newList.add(f.apply(i));
        }
        return newList;
    }
    static<T> void printEvenNum(Predicate<T> p, Consumer<T> c, List<T> list){
        System.out.print("[");
        for(T i : list){
            if(p.test(i))
                c.accept(i);
        }
        System.out.println("]");
    }
    static <T> void makeRandomList(Supplier<T> s, List<T> list){
        for(int i=0; i<10; i++){
            list.add(s.get());
        }
    }
}

문자열을 숫자로 변환하는 함수 f와 숫자를 2진 문자열로 변환하는 함수 g를 andThen()으로 합성하여
새로운 함수 h를 만들어낼 수 있다.
Function<String, Integer> f = (s) -> Integer.parseInt(s,16);
Function<Integer,String> g = (i) -> Integer.toBinaryString(i);
Function<String,String> h = f.andThen(g);

System.out.println(h.apply("FF")); // "FF" -> 255 -> "11111111"

여러 조건식을 논리 연산자인 &&(and), ||(or), !(not)으로 연결해서 하나의 식을 구성할 수 있는 것처
럼, 여러 Predicate를 and(), or(), negate()로 연결해서 하나의 새로운 Predicate로 결합할 수 있다.

Predicate<Integer> p = i -> i < 100;
Predicate<Integer> q = i -> i < 200;
Predicate<Integer> r = i -> i%2 == 0;
Predicate<Integer> notP = p.negate(); // i >= 100

//100 <= i && (i < 200 || i % 2 == 0)
Predicate<Integer> all = notP.and(q.or(r));
System.out.println(all.test(150)); //true

그리고 static메서드인 isEqual()은 두 대상을 비교하는 Predicate를 만들 때 사용한다.
Predicate<String> p = Predicate.isEqual(str1);
boolean result = p.test(str2); // str1과 str2가 같은지 비교하여 결과를 반환
-> boolean result = Predicate.isEqual(str1).test(str2);

람다식이 하나의 메서드만 호출하는 경우에는 '메서드 참조(method reference)'라는 방법으로 람다식을
간략히 할 수 있다. 

Function<String, Integer> f = (String s) -> Integer.parseInt(s);
Function<String, Integer> f = Integer :: parseInt; //메서드 참조

BiFunction<String, String, Boolean> f = (s1, s2) -> s1.equals(s2);
BiFunction<String, String, Boolean> f = String :: equals; //메서드 참조

Boolean을 반환하는 equals라는 이름의 메서드는 다른 클래스에도 존재할 수 있기 때문에 equals앞에
클래스 이름은 반드시 필요하다.

하나의 메서드만 호출하는 람다식은 '클래스이름::메서드이름' 또는 '참조변수::메서드이름'으로 바꿀 
수 있다.
생성자를 호출하는 람다식도 메서드 참조로 변환할 수 있다.

Supplier<MyClass> s = () -> new MyClass(); //람다식
Supplier<MyClass> s = MyClass::new; //메서드 참조
Function<Integer, MyClass> f = (i) -> new MyClass(i); //람다식
Function<Integer, MyClass> f2 = MyClass::new; //메서드 참조
BiFunction<Integer, String, MyClass> bf = (i, s) -> new MyClass(i, s); //람다식
BiFunction<Integer, String, MyClass> bf2 = MyClass::new; //메서드 참조

Function<Integer, int[]> f = x -> new int[x]; //람다식
Function<Integer, int[]> f2 = int[]::new; //메서드 참조
