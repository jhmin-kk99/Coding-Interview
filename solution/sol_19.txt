스트림이란?

지금까지 우리는 많은 수의 데이터를 다룰 때, 컬렉션이나 배열에 데이터를 담고 원하는 결과를 얻기 위해
for문과 Iterator를 이용해서 코드를 작성해왔다. 그러나 이러한 방식으로 작성된 코드는 너무 길고 알아보
기 어렵다. 그리고 재사용성도 떨어진다. 또 다른 문제는 데이터 소스마다 다른 방식으로 다뤄야한다는 것이
다. Colleciton이나 Iterator와 같은 인터페이스를 이용해서 컬렉션을 다루는 방식을 표준화하기는 했지
만, 각 컬렉션 클래스에는 같은 기능의 메서드들이 중복해서 정의되어 있다. 예를 들어 List를 정렬할 때는 
Collections.sort()를 사용해야하고, 배열을 정렬할 때는 Arrays.sort()를 사용해야 한다. 이러한 문제점들
을 해결하기 위해서 만든 것이 '스트림(Stream)'이다. 스트림은 데이터소스를 추상화하고, 데이터를 다루는
데 자주 사용되는 메서드들을 정의해 놓았다. 데이터 소스를 추상화하였다는 것은, 데이터 소스가 무엇이던 
간에 같은 방식으로 다룰 수 있게 되었다는 것과 코드의 재사용성이 높아진다는 것을 의미한다.
스트림을 이용하면, 배열이나 컬렉션뿐만이 아니라 파일에 저장된 데이터도 모두 같은 방식으로 다룰 수 있
다.
예를 들어, 문자열 배열과 같은 내용의 문자열을 저장하는 List가 있을 때,

String[] strArr = {"aaa", "ddd", "ccc"};
List<String> strList = Arrays.asList(strArr);

이 두 데이터 소스를 기반으로 하는 스트림은 다음과 같이 생성한다.

Stream<String> strStream1 = strList.stream(); // 스트림을 생성
Stream<String> strStream2 = Arrays.stream(strArr); // 스트림을 생성

이 두 스트림으로 데이터 소스의 데이터를 읽어서 정렬하고 화면에 출력하는 방법은 다음과 같다.
데이터 소스가 정렬되는 것은 아니라는 것에 유의ㅏ자.

strStream1.sorted().forEach(System.out::println);
strStream2.sorted().forEach(System.out::println);

스트림은 데이터 소스로부터 데이터를 읽기만할 뿐, 데이터 소스를 변경하지 않는다. 필요하다면, 정렬
된 결과를 컬렉션이나 배열에 담아서 반환할 수도 있다.

//정렬된 결과를 새로운 List에 담아서 반환한다.
List<String> sortedList = strStream2.sorted().collect(Collectors.toList());

스트림은 Iterator처럼 일회용이다. Iterator로 컬렉션의 요소를 모두 읽고 나면 다시 사용할 수 없는
것처럼, 스트림도 한번 사용하면 닫혀서 다시 사용할 수 없다. 필요하다면 스트림을 다시 생성해야한다.

strStream1.sorted().forEach(System.out::println);
int numOfStr = strStream1.count(); //에러. 스트림이 이미 닫혔음.

스트림을 이용한 작업이 간결할 수 있는 비결중의 하나가 바로 '내부 반복'이다. 내부 반복이라는 것은
반복문을 메서드의 내부에 숨길 수 있다는 것을 의미한다. forEach()는 스트림에 정의된 메서드 중의 하
나로 매개변수에 대입된 람다식을 데이터 소스의 모든 요소에 적용한다.

void forEach(Consumer<? super T> action){
  Objects.requireNonNull(action); // 매개변수의 널 체크
  for(T t : src) { // 내부 반복
    action.accept(T);
  }
}

스트림이 제공하는 다양한 연산을 이용해서 복잡한 작업들을 간단히 처리할 수 있다. 마치 데이터베이스
에 SELECT문으로 질의(쿼리, query)하는 것과 같은 느낌이다. 
스트림이 제공하는 연산은 중간 연산, 최종 연산으로 분류할 수 있는데, 중간 연산은 연산결과를 스트림
으로 반환하기 때문에 중간 연산을 연속해서 연결할 수 있다. 반면에 최종 연산은 스트림의 요소를 소모
하면서 연산을 수행하므로 단 한번만 연산이 가능하다. 

중간연산 : 연산결과가 스트림인 연산. 스트림에 연속해서 중간 연산할 수 있음
최종연산 : 연산 결과가 스트림이 아닌 연산. 스트림의 요소를 소모하므로 단 한번만 가능

stream.distinct().limit(5).sorted().forEach(System.out::println)

모든 중간 연산의 결과는 스트림이지만, 연산 전의 스트림과 같은 것은 아니다. 위의 문장과 달리
모든 스트림 연산을 나누어 쓰면 아래와 같다.

String[] strArr = {"dd", "aaa", "CC", "cc", "b" };
Stream<String> stream = Stream.of(strArr); //문자열 배열이 소스인 스트림
Stream<String> filteredStream = stream.filter(); //걸러내기(중간연산)
Stream<String> distinctedStream = stream.distinct(); //중복제거(중간연산)
Stream<String> sortedStream = stream.sort(); //정렬(중간연산)
Stream<String> limitedStream = stream.limit(5); //스트림 자르기(중간연산)
int total = stream.count(); //요소 개수 세기(최종연산)

중간 연산은 map()과 flatMap(), 최종 연산은 reduce()와 collect()가 핵심이다. 나머지는 이해하기
쉽고 사용법도 간단하다. 스트림 연산에서 한 가지 중요한 점은 최종 연산이 수행되기 전까지는 중간 연
산이 수행되지 않는다는 것이다. 스트림에 대해 distinct()나 sort()같은 중간 연산을 호출해도 즉각적
인 연산이 수행되는 것은 아니라는 것이다. 중간 연산을 호출하는 것은 단지 어떤 작업이 수행되어야하는
지를 지정해주는 것일 뿐이다. 최종 연산이 수행되어야 비로소 스트림의 요소들이 중간 연산을 거쳐 최
종 연산에서 소모된다.

요소의 타입이 T인 스트림은 기본적으로 Stream<T>이지만, 오토박싱&언박싱으로 인한 비효율을 줄이기 
위해 데이터 소스의 요소를 기본형으로 다루는 스트림, IntStream, LongStream, DoubleStream이 제공
된다. 일반적으로 Stream<Integer>대신 IntStream을 사용하는 것이 더 효율적이고, IntStream에는 int
타입의 값으로 작업하는데 유용한 메서드들이 포함되어 있다. 

스트림으로 데이터를 다룰 때의 장점 중 하나가 바로 병렬 처리가 쉽다는 것이다. 병렬 스트림은 내부적
으로 fork&join프레임웍을 이용해서 자동적으로 연산을 병렬로 수행한다. 스트림에 parallel()이라는
메서드를 호출해서 병렬로 연산을 수행하도록 지시하면 되고, 반대로 병렬로 처리되지 않게 하려면 
sequential()을 호출하면 된다. 모든 스트림은 기본적으로 병렬 스트림이 아니므로 sequential()을 호출
할 필요가 없다. 이 메서드는 parallel()을 취소할 때만 사용한다.

컬렉션의 최고 조상인 Collection에 stream()이 정의되어 있다. 그래서 Collection의 자손인 List와 
Set을 구현한 컬렉션 클래스들은 모두 이 메서드로 스트림을 생성할 수 있다. stream()은 해당 컬렉션
을 소스(source)로 하는 스트림을 반환한다. 

List<Integer> list = Arrays.asList(1,2,3,4,5); // 가변인자
Stream<Integer> intStream = list.stream(); // list를 소스로 하는 컬렉션 생성
intStream.forEach(System.out::println); //스트림의 모든 요소를 출력한다.

forEach()는 스트림의 요소를 소모하면서 작업을 수행하므로 같은 스트림에 forEach()를 두 번
호출할 수 없다. 스트림의 요소를 한번 더 출력하려면 스트림을 새로 생성해야 한다. forEach()에 의해
스트림의 요소가 소모되는 것이지, 소스의 요소가 소모되는 것은 아니기 때문에 같은 소스로부터 다시
스트림을 생성할 수 있다. 

# 배열
배열을 소스로 하는 스트림을 생성하는 메서드는 다음과 같이 Stream과 Arrays에 static메서드로 정의
되어 있다. 
Stream<T> Stream.of(T... values) // 가변인자
Stream<T> Stream.of(T[])
Stream<T> Arrays.stream(T[])
Stream<T> Arrays.stream(T[] array, int startInclusive, int endExclusive)

예를 들어 문자열 스트림은 다음과 같이 생성한다.
Stream<String> strStream = Stream.of("a","b","c"); 
Stream<String> strStream = Stream.of(new String[]{"a","b","c"});
Stream<String> strStream = Arrays.stream(new String[]{"a","b","c"});
Stream<String> strStream = Arrays.stream(new String[]{"a","b","c"}, 0, 3);

그리고 int, long, double과 같은 기본형 배열을 소스로 하는 스트림을 생성하는 메서드도 있다.
IntStream IntStream.of(int... values) //Stream이 아니라 IntStream
IntStream IntStream.of(int[])
IntStream Arrays.stream(int[])
IntStream Arrays.stream(int[] array, int startInclusive, int endExclusive)
이 외에도 long과 double타입의 배열로부터 LongStream과 DoubleStream을 반환하는 메서드들이 있다.

# 특정 범위의 정수
IntStream과 LongStream은 다음과 같이 지정된 범위의 연속된 정수를 스트림으로 생성해서 반환하는
range()와 rangeClosed()를 가지고 있다.
IntStream IntStream.range(int begin, int end)
IntStream IntStream.rangeClosed(int begin, int end)

# 임의의 수
난수를 생성하는데 사용하는 Random클래스에는 아래와 같이 인스턴스 메서드들이 포함되어 있다.
이 메서드들은 해당 타입의 난수들로 이루어진 스트림을 반환한다.

IntStream ints()
LongStream longs()
DoubleStream doubles()
이 메서드들이 반환하는 스트림은 크기가 정해지지 않은 '무한 스트림(infinite stream)'이므로
limit()도 같이 사용해서 스트림의 크기를 제한해 주어야 한다. limit()은 스트림의 개수를 지정하는데
사용되며, 무한 스트림을 유한 스트림으로 만들어 준다.

IntStream intStream = new Random().ints(); //무한 스트림
intStream.limit(5).forEach(System.out::println); //5개의 요소만 출력한다.

IntStream ints(long streamSize)
IntStream ints(int begin, int end) 
IntStream ints(long streamSize, int begin, int end)
...
과 같은 메서드들도 있다.

# 람다식 - iterate(), generate()
static <T> Stream<T> iterate(T seed, UnaryOperator<T> f)
static <T> Stream<T> generate(Supplier<T> s)

iterator()는 씨앗값(seed)으로 지정된 값부터 시작해서, 람다식 f에 의해 계산된 결과를 다시 seed
값으로 해서 계산을 반복한다.
Stream<Integer> evenStream = Stream.iterate(0, n->n+2); //0,2,4,6,...

generate()도 iterate()처럼, 람다식에 의해 계산되는 값을 요소로 하는 무한 스트림을 생성해서 반환
하지만, iterate()와 달리, 이전 결과를 이용해서 다음 요소롤 계산하지 않는다.

Stream<Double> randomStream = Stream.generate(Math::random);
Stream<Integer> oneStream = Stream.generate(()->1);

그리고 generate()에 정의된 매개변수의 타입은 Supplier<T>이므로 매개변수가 없는 람다식만 허용된다.
주의할 점은 iterate()와 generate()에 의해 생성된 스트림을 아래와 같이 기본형 스트림 타입의 참조
변수로 다룰 수 없다는 것이다.

IntStream evenStream = Stream.iterate(0, n->n+2); //에러.
DoubleStream randomStream = Stream.generate(Math::random); //에러.

굳이 필요하다면, 아래와 같이 mapToInt()와 같은 메서드로 변환을 해야 한다.

IntStream evenStream = Stream.iterate(0, n->n+2).mapToInt(Integer::valueOf);
Stream<Integer> stream = evenStream.boxed(); //IntStream -> Stream<Integer>

# 파일
java.nio.file.Files는 파일을 다루는 데 필요한 유용한 메서드들을 제공하는데, list()는 지정된 디렉
토리(dir)에 있는 파일의 목록을 소스로 하는 스트림을 생성해서 반환한다.

Stream<Path> Files.list(Path dir)
이 외에도 파일의 한 행(line)을 요소로 하는 스트림을 생성하는 메서드도 있다. 
Stream<String> Files.lines(Path path)
Stream<String> Files.lines(Path path, Charset cs)
Stream<String> lines() //BufferedReader클래스의 메서드, 파일 뿐 아니라 다른 입력대상으로부터도 
데이터를 행단위로 읽어올 수 있다.

# 빈 스트림
요소가 하나도 없는 비어있는 스트림을 생성할 수도 있다. 스트림에 연산을 수행한 결과가 하나도 없을
때, null보다 빈 스트림을 반환하는 것이 낫다.
Stream emptyStream = Stream.empty(); //empty()는 빈 스트림을 생성해서 반환한다.
long count = emptyStream.count(); //count의 값은 0

# 두 스트림의 연결
Stream의 static메서드인 concat()을 사용하면, 두 스트림을 하나로 연결할 수 있다. 
두 스트림의 요소는 같은 타입이어야 한다.
String[] str1 = {"123", "456", "789"}
String[] str2 = {"ABC", "abc", "DEF"}
Stream<String> strs1 = Stream.of(str1);
Stream<String> strs2 = Stream.of(str2);
Stream<String> strs3 = Stream.concat(strs1, strs2); //두 스트림을 하나로 연결

스트림의 중간연산
스트림 자르기 - skip(), limit()
스트림의 요소 걸러내기 - filter(), distinct()
정렬 - sorted()
Stream<T> sorted()
Stream<T> sorted(Comparator<? super T> comparator)
변환 - map()
스트림의 요소에 저장된 값 중에서 원하는 필드만 뽑아내거나 특정 형태로 변환해야 할 때가 있다. 이
때 사용하는 것이 바로 map()이다. 
Stream<R> map(Function<? super T, ? extends R> mapper)
예를 들어 File의 스트림에서 파일의 이름만 뽑아서 출력하고 싶을 때, 아래와 같이 map()을 이용하면
File객체에서 파일의 이름(String)만 간단히 뽑아낼 수 있다.

Stream<File> fileStream = Stream.of(new File("EX1.java"), new File("EX"), new File("EX1.bak"),
new File("EX2.java"), new File("EX1.txt")); 
//map()으로 Stream<File>을 Stream<String>으로 변환
Stream<String> filenameStream = fileStream.map(File::getName);
filenameStream.forEach(System.out::println); // 스트림의 모든 파일이름을 출력

조회 - peek()
연산과 연산 사이에 올바르게 처리되었는지 확인하고 싶다면, peek()를 사용하자. forEach()와 달리
스트림의 요소를 소모하지 않으므로 연산 사이에 여러 번 끼워 넣어도 문제가 되지 않는다.

map()은 연산의 결과로 Stream<T>타입의 스트림을 반환하는데, 스트림의 요소를 숫자로 변환하는 경우
IntStream과 같은 기본형 스트림으로 변환하는 것이 더 유용할 수 있다. Stream<T>타입의 스트림을 기본
형 스트림으로 변환할 때 다음과 같이 사용한다.

IntStream studentScoreStream = studentStream.mapToInt(Student::getTotalScore);
int allTotalScore = studentScoreStream.sum(); //int sum();

스트림의 요소가 배열이거나 map()의 연산결과가 배열인 경우, 즉 스트림의 타입이 Stream<T[]>인 경우
Stream<T>로 다루는 것이 더 편리할 때가 있다. 그럴 때는 map() 대신 flatMap()을 사용하면 된다.
예를 들어 아래와 같이 요소가 문자열 배열(String[])인 스트림이 있을 때, 
Stream<String[]> strArrStrm = Stream.of(new String[]{"abc", "def", "ghi"},
new String[]{"ABC", "GHI"m "JKLMN"});
각 요소의 문자열들을 합쳐서 문자열이 요소인 스트림, 즉 Stream<String>으로 만들려면 flatMap()을
사용하면 된다. 또한 아래와 같이 여러 문장을 요소로 하는 스트림이 있을 때, 이 문장들을 split()으로
나눠서 요소가 단어인 스트림을 만들고 싶다면 어떻게 해야 할까?
String[] lineArr = {
  "Believe or not It is true", "Do or do not There is no try",
};
Stream<String> lineStream = Arrays.stream(lineArr);
Stream<String> strStream = lineStream.flatMap(line->Stream.of(line.split(" +"))); //정규식

Optional<T>은 지네릭 클래스로 'T타입의 객체'를 감싸는 래퍼 클래스이다. 그래서 Optional타입의
객체에는 모든 타입의 참조변수를 담을 수 있다.
public final class Optional<T>{
  private final T value; //T타입의 참조변수
  ...
}
최종 연산의 결과를 그냥 반환하는 것이 아니라 Optional객체에 담아서 반환하는 것이다. 이처럼
객체에 담아서 반환을 하면, 반환된 결과가 null인지 매번 if문으로 체크하는 대신 Optional에 정의된
메서드를 통해서 간단히 처리할 수 있다. 널 체크를 위한 if문 없이도 NullPointerException이 발생하지
않는 보다 간결하고 안전한 코드를 작성하는 것이 가능하다.

Optional<String> optVal = Optional.of("abc");
String str = optVal.orElse(""); //optVal에 저장된 값이 null일 때, ""를 반환

최종 연산은 스트림의 요소를 소모해서 결과를 만들어낸다. 최종 연산의 결과는 스트림의 요소의 합과
같은 단일 값이거나, 스트림의 요소가 담긴 배열 또는 컬렉션일 수 있다.

forEach()는 peek()와 달리 스트림의 요소를 소모하는 최종연산이다. 반환 타입이 void이므로 스트림의
요소를 출력하는 용도로 많이 사용된다.
조건 검사 - allMatch(), anyMatch(), noneMatch(), findFirst(), findAny()
통계 - count(), sum(), average(), max(), min()
리듀싱 - reduce()
reduce()는 이름에서 짐작할 수 있듯이, 스트림의 요소를 줄여나가면서 연산을 수행하고 최종결과를
반환한다. 그래서 매개변수의 타입이 BinaryOperator<T>인 것이다. 처음 두 요소를 가지고 연산한 결과
를 가지고 그 다음 요소와 연산한다.
이 과정에서 스트림의 요소를 하나씩 소모하게 되며, 스트림의 모든 요소를 소모하게 되면 그 결과를
반환한다.
Optional<t> reduce(BinaryOperator<T> accumulator)
이 외에도 연산결과의 초기값(identity)을 갖는 reduce()도 있는데, 이 메서드들은 초기값과 스트림의
첫 번째 요소로 연산을 시작한다. 스트림의 요소가 하나도 없는 경우, 초기값이 반환되므로 반환 타입이
Optional<T>가 아니라 T이다.

T reduce(T identity, BinaryOperator<T> accumulator)
int count = intStream.reduce(0, (a,b) -> a+1);
int sum = intStream.reduce(0, (a,b) -> a+b);
int max = intStream.reduce(Integer.MIN_VALUE,(a,b) -> a>b ? a:b);
// OptionalInt max = intStream.reduce(Integer::max);
// -> int maxValue = max.getAsInt(); //Optional Int에 저장된 값을 maxValue에 저장
int min = intStream.reduce(Integer.MAX_VALUE, (a,b) -> a<b ? a:b);
// OptionalInt min = intStream.reduce(Integer::min);
// -> int minValue = min.getAsInt(); //Optional Int에 저장된 값을 minValue에 저장

reduce()가 내부적으로 동작하는 과정을 for문으로 나타내면 다음과 같다.
int a = identity // 초기값을 a에 저장한다.
for(int b : stream)
  a = a + b; // 모든 요소의 값을 a에 누적한다.

T reduce(T identity, BinaryOperator<T> accumulator){
  T a = identity;
  for(T b : stream)
    a = accumulator.apply(a,b);
  return a;
}

스트림의 최종 연산중에서 가장 복잡하면서도 유용하게 활용될 수 있는 것이 collect()이다.
collect()는 스트림의 요소를 수집하는 최종 연산으로 리듀싱(reducing)과 유사하다. collect()가 스트
림의 요소를 수집하려면 , 어떻게 수집할 것인가에 대한 방법이 정의되어 있어야 하는데, 이 방법을
정의한 것이 바로 컬렉터(collector)이다. 컬렉터는 Collector인터페이스를 구현한 것으로, 직접 구현
할 수도 있고 미리 작성된 것을 사용할 수도 있다. Collectors클래스는 미리 작성된 다양한 종류의 컬
렉터를 반환하는 static메서드를 가지고 있으며, 이 클래스를 통해 제공되는 컬렉터만으로도 많은 일들
을 할 수 있다.
collect() : 스트림의 최종연산, 매개변수로 컬렉터를 필요로 한다.
Collector : 인터페이스, 컬렉터는 이 인터페이스를 구현해야 한다.
Collectors : 클래스, static메서드로 미리 작성된 컬렉터를 제공한다.

스트림을 컬렉션과 배열로 변환 - toList(), toSet(), toMap(), toCollection(), toArray()
스트림의 모든 요소를 컬렉션에 수집하려면, Collectors클래스의 toList()와 같은 메서드를 사용하면
된다. List나 Set이 아닌 특정 컬렉션을 지정하려면, toColleciton()에 해당 컬렉션의 생성자 참조를 
매개변수로 넣어주면 된다.
List<String> names = stuStream.map(Student::getName).collect(Collectors.toList());
ArrayList<String> list = names.stream().collect(Collectors.toCollection(ArrayList::new));

Map은 키와 값의 쌍으로 저장해야하므로 객쳉늬 어떤 필드를 키로 사용할지와 값으로 사용할지를 지정
해줘야 한다.
Map<String, Person> map = personStream.collect(Collectors.toMap(p->p.getRegId(), p->p));
위의 문장은 요소의 타입이 Person인 스트림에서 사람의 주민번호(regId)를 키로 하고, 값으로 Person
객체를 그대로 저장한다.
스트림에 저장된 요소들을 'T[]'타입의 배열로 변환하려면, toArray()를 사용하면 된다. 단, 해당 타입
의 생성자 참조를 매개변수로 지정해줘야 한다. 만일 매개변수를 지정하지 않으면 반환되는 배열의 타입
은 'Object[]'이다.

Student[] stuNames = studentStream.toArray(Student[]::new); //ok
Student[] stuNames = studentStream.toArray(); //에러
Object[] stuNames = studentStream.toArray(); //ok

그룹화와 분할 - groupingBy(), partitioningBy()
그룹화는 스트림의 요소를 특정 기준으로 그룹화하는 것을 의미하고, 분할은 스트림의 요소를 두 가지, 
지정된 조건에 일치하는 그룹과 일치하지 않는 그룹으로의 분할을 의미한다. groupingBy()는 스트림의
요소를 Function으로, partitioningBy()는 Predicate로 분류한다.
스트림을 두 개의 그룹으로 나눠야 한다면 partitioningBy()로 분할하는 것이 더 빠르다. 그 외에는 
groupingBy()를 쓰면 된다. 그리고 그룹화와 분할의 결과는 Map에 담겨 반환된다.
