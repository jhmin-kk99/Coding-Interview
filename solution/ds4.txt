2-3, 2-3-4트리란?

# 2-3 Tree
Each Node has 1 or 2 keys
Thus, each Node has 2 or 3 children
** Not allowed to have a single child

All Leaves at the same level
- That is, Root to Leaf distance is the same for all leaves
Can you prove that the height of a 2-3 Tree is O(logN) when there are N keys?
- Hint : Maybe you don't try to calculate the height for fixed N, you could try to
find minimum and maximum of N for a fixed Height

# Proof of 2-3 Tree Height
The height of 2-3 Tree is H
then, 2^H <= # node <= 3^H
->
2^H <= # key (= N) <= 2*3^H
H = O(logN)

# 2-3 Tree Insert
Algorithm
1. (From Root) Go down the tree doing search until Leaf
2. (At Leaf) See if Leaf has 1 or 2 keys
- Case 1 key: Just insert in the Leaf
- Case 2 key: Split the node, Put 1 key in each node, save middle key for part3,
go to parent (middle key and 2 Pointers sent to Parent)
3. (Only if Case 2 Happened) Repeat the following if Case 2 happens
- Case 1 key in Parent : Put middle key and 2 Pointers in Parent
- Case 2 keys in Parent : Split the Parent and Put 1 key in each node, save middle key
for part 3, go to parent (middle key and 2 Pointers sent to Parent)
4. (If there is no Parent in Case 2) Make a new root, 1 key, 2 children

# 2-3-4 Tree
Each Node has 1,2 or 3 keys
Thus, each Node has 2,3 or 4 children
** Not allowed to have a single child

# Proof of 2-3-4 Tree Height
The height of 2-3-4 Tree is H
then, 2^H <= # node <= 4^H
->
2^H <= # key (= N) <= 3*4^H
H = O(logN)

# 2-3-4 Tree Insert
Algorithm is analogous
But
- There are now options
- You may split node when there are 3 keys
- Why is it impossible for 2-3 Trees?

# An Improvement over 2-3 Tree






