2-3, 2-3-4, RedBlack 트리란?

# 2-3 Tree
Each Node has 1 or 2 keys
Thus, each Node has 2 or 3 children
** Not allowed to have a single child

All Leaves at the same level
- That is, Root to Leaf distance is the same for all leaves
Can you prove that the height of a 2-3 Tree is O(logN) when there are N keys?
- Hint : Maybe you don't try to calculate the height for fixed N, you could try to
find minimum and maximum of N for a fixed Height

# Proof of 2-3 Tree Height
The height of 2-3 Tree is H
then, 2^H <= # node <= 3^H
->
2^H <= # key (= N) <= 2*3^H
H = O(logN)

# 2-3 Tree Insert
Algorithm
1. (From Root) Go down the tree doing search until Leaf
2. (At Leaf) See if Leaf has 1 or 2 keys
- Case 1 key: Just insert in the Leaf
- Case 2 key: Split the node, Put 1 key in each node, save middle key for part3,
go to parent (middle key and 2 Pointers sent to Parent)
3. (Only if Case 2 Happened) Repeat the following if Case 2 happens
- Case 1 key in Parent : Put middle key and 2 Pointers in Parent
- Case 2 keys in Parent : Split the Parent and Put 1 key in each node, save middle key
for part 3, go to parent (middle key and 2 Pointers sent to Parent)
4. (If there is no Parent in Case 2) Make a new root, 1 key, 2 children

# 2-3-4 Tree
Each Node has 1,2 or 3 keys
Thus, each Node has 2,3 or 4 children
** Not allowed to have a single child

# Proof of 2-3-4 Tree Height
The height of 2-3-4 Tree is H
then, 2^H <= # node <= 4^H
->
2^H <= # key (= N) <= 3*4^H
H = O(logN)

# 2-3-4 Tree Insert
Algorithm is analogous
But
- There are now options
- You may split node when there are 3 keys
- Why is it impossible for 2-3 Trees?

# An Improvement over 2-3 Tree
2-3 Tree
- Go down the Tree -> Reach Leaf
- If Leaf is split -> Parent may split -> Parent may split -> ...
2-3-4 Tree
- Split 4-Nodes when going down the Tree -> Reach Leaf
- If Leaf is split -> Parent can never be split
(비어 있으면 이미 split하고 내려왔음)

# Major or Minor Improvement?
Everything depends on the situation
In Memory, not much of an improvement
But if you are using Hard Disk?
- On Hard Disk reading is slow
- And the read time is the same up to some size 
- So, following a pointer is much slower than moving to the next address on
a hard disk

2-3 트리의 작업은 크게 Internal Node Operation, Following Link, Make New Nodes and 
Links로 나눌 수 있다. Disk에서의 특징은 다음과 같다:

- Internal Node Operation은 Disk에서는 비교적 시간이 적게 소요된다.
내부 노드 연산은 주로 키 비교와 탐색 작업을 의미한다. Disk에서는 내부 노드의 키 개수가 
많아도 읽는 시간에는 큰 차이가 없다.
- Following Link 작업은 Disk에서 시간이 많이 소요된다. 2-3-4 트리에서 Search를 수행하
면서 split 작업을 함께 진행하는 것이 반복적인 split 작업을 최소화하여 효율적일 수 있다.
각 노드의 키 개수가 많아질수록 해당 노드는 배열처럼 동작하며 Memory에서 시간 소요가 많
이 발생할 수 있다. 그러나 Following Link 작업은 시간이 그리 길지 않기 때문에, 키 개수를 
늘리는 것보다 Following Link를 줄이는 방법을 채택하는 것이 효율적이다.
결론적으로, Disk에서는 내부 노드 연산은 비교적 빠르지만 Following Link 작업은 느리다. 
따라서 효율적인 split 작업을 통해 최소한의 Following Link 작업을 수행하는 것이 중요하
며, 키 개수를 늘리는 것은 Memory 접근에 따른 시간 소요를 고려하여 결정해야 한다.

#  RedBlack Tree
A different representation of 2-3-4 Tree

# Important Observations
When you go down the Tree until you cannot go further, you see the same number of Black Links (Black Links는 그대로이고, 내려가면서 split하는 경우 Red Link만 추가됨)
When you go down the Tree, you don't see consecutive Red Links
- So, if you see K Black Edges, what is the maximum number of Red Edges you can see?
k+1 (앞뒤로 붙을 수 있음)

# Independent Definition of R-B Tree
Binary Search Tree
Red and Black Edges
All Root-to-Leaf Paths have the same number of Black Edges
No Root-to-Leaf Path has consecutive Red Edges

# Operations on R-B Tree 
Normal BST Insert using Red Edge (내려가면서 split 안할 경우)
- Rotate if consecutive Red Edge
- Rotation may propagate upwards
-> This is like 2-3 Tree and AVL Tree
You may fold Red Edges when searching down the Tree
-> This is like 2-3-4 Tree

# Similarities and Differences of R-B against AVL Trees
Terminated Down Sequence
- Shortest and Longest about 2 times different
- Why? 
Shortest와 Longest의 Black Edges의 수는 같지만, Longest에는 Red Edges가 중간중간 있을
수 있고(Red Edge가 연속일 수는 없음), 그 최대 수는 (Black Edges의 수가 k라고 할 때) 
k+1개이다. 따라서 Shortest와 Longest는 약 2배 정도 차이날 수 있다.(k , 2k+1)
Height Difference of Left and Right Subtrees
- In R-B Tree height may differ 2 times 
Rotation Operations
- You can use AVL Tree in an analogous way




