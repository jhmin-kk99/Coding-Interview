형식화 클래스

성적처리 프로그램을 작성했을 때 각 점수의 평균을 소수점 2자리로 일정하게 맞춰서 출력
하려면 어떻게해야 할까?
평균값에 100을 곱하고 int형으로 형변환한 다음에 다시 100f로 나누고 반올림하려면 Math.round()도
써야하고 복잡하다. 날짜를 형식에 맞게 출력하려면 숫자보다 더 복잡해진다. Calendar를 이용해서
년, 월, 일, 시, 분, 초를 각각 별도로 얻어서 조합을 해야 하는 과정을 거쳐야 한다.

자바에서는 이러한 문제들을 쉽게 해결할 수 있는 방법을 제공하는데 그것이 바로 형식화 클래스이다.
이 클래스는 java.text패키지에 포함되어 있으며 숫자, 날짜, 텍스트 데이터를 일정한 형식에 맞게 
표현할 수 있는 방법을 객체 지향적으로 설계하여 표준화하였다. 
형식화 클래스는 형식화에 사용될 패턴을 정의하는데, 데이터를 정의된 패턴에 맞춰 형식화할 수 있을
뿐만 아니라 역으로 형식화된 데이터에서 원래의 데이터를 얻어낼 수도 있다.

형식화 클래스 중에서 숫자를 형식화 하는데 사용되는 것이 DecimalFormat이다.
DecimalFormat을 이용하면 숫자 데이터를 정수, 부동소수점, 금액 등의 다양한 형식으로 표현할 수 있으며,
반대로 일정한 형식의 텍스트 데이터를 숫자로 쉽게 변환하는 것도 가능하다.

DecimalFormat을 사용하는 방법은 간단하다. 먼저 원하는 출력형식의 패턴을 작성하여 DecimalFormat인스턴스를 생성
한 다음, 출력하고자 하는 문자열로 format메서드를 호출하면 원하는 패턴에 맞게 변환된 문자열을 얻게 된다.

double number = 1234567.89;
DecimalFormat df = new DecimalFormat("#.#E0");
String result = df.format(number);

import java.text.*;

class DecimalFormatEx2{
  public static void main(String[] args){
    DecimalFormat df = new DecimalFormat("#,###.##");
    DecimalFormat df2 = new DecimalFormat("#.###E0");
    
    try{
      Number num = df.parse("1,234,567.89"); //df형식에 맞는 문자열을 숫자로 변환하여 num에 반환
      System.out.print("1,234,567.89" + " -> ");
      
      double d = num.doubleValue(); //Number에 저장된 값을 double형의 값으로 변환하여 반환
      System.out.print(d + " -> ");
      
      System.out.println(df2.format(num)); //num을 df2의 형식에 맞게 문자열로 변환
    }catch(Exception e){} 
  }
}
// 1,234,567.89 -> 1234567.89 -> 1.235E6
// Integer.parseIng메서드는 콤마(,)가 포함된 문자열을 숫자로 변환하지 못한다.

Date와 Calendar만으로 날짜 데이터를 원하는 형태로 다양하게 출력하는 것은 불편하고 복잡하다.
SimpleDateFormat을 사용하면 이 문제들이 간단히 해결된다.

DateFormat은 추상클래스로 SimpleDateFormat의 조상이다. DateFormat은 추상클래스이므로 인스턴스를
생성하기 위해서는 getDateInstance()와 같은 static메서드를 이용해야 한다. getDateInstance()에 의해
반환되는 것은 DateFormat을 상속받아 완전하게 구현한 SimpleDateFormat인스턴스이다.

SimpleDateFormat을 사용하는 방법은 간단하다. 먼저 원하는 출력형식의 패턴을 작성하여 SimpleDateFormat인
스턴스를 생성한 다음, 출력하고자 하는 Date인스턴스를 가지고 format(Date d)를 호출하면 지정한 출력
형식에 맞게 변환된 문자열을 얻게 된다.

Date today = new Date();
SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
//오늘 날짜를 yyyy-MM-dd형태로 변환하여 반환한다.
String result = df.format(today);
홑따옴표(')는 escape기호이기 때문에 패턴 내에서 홑따옴표를 표시하기 위해서는 홑따옴표를 연속적으로
두 번 사용해야 한다.

Date인스턴스만 format 메서드에 사용될 수 있기 때문에 Calendar인스턴스를 Date인스턴스로 변환해서
사용해야 한다.

Calendar cal = Calendar.getInstance();
cal.set(2005,9,3); //2005년 10월 3일 
Date day = cal.getTime(); //Calendar를 Date로 변환

Date인스턴스를 Calendar인스턴스로 변환할 때는 Calendar클래스의 setTime()을 사용하면 된다.

import java.util.*;
import java.text.*;

class DateFormat{
  public static void main(String[] args){
    DateFormat df = new SimpleDateFormat("yyyy년 MM월 dd일");
    DateFormat df2 = new SimpleDateFormat("yyyy/MM/dd");
    
    try{
      Date d = df.parse("2015년 11월 23일");
      System.out.println(df2.format(d));
    }catch(Exception e){}
  }
}
Integer의 parseInt()가 문자열을 정수로 변환하는 것처럼 SimpleDateFormat의 parse(String source)는
문자열source을 날짜Date인스턴스로 변환해주기 때문에 매우 유용하게 쓰일 수 있다.

예를 들어 사용자로부터 날짜 데이터를 문자열로 입력받을 때, 입력받은 문자열을 날짜로 인식하기 위해서
는 substring메서드를 이용해서 년, 월, 일을 뽑아내야 하는데 parse(String source)은 이러한 수고를 덜어
준다. parse(String source)는 SimpleDateFormat의 조상인 DateFormat에 정의되어 있다.
지정된 형식과 입력된 형식이 일치하지 않는 경우에는 예외가 발생하므로 적절한 예외처리가 필요하다.

ChoiceFormat은 특정 범위에 속하는 값을 문자열로 변환해준다. 연속적 또는 불연속적인 범위의 값들을
처리하는 데 있어서 if문이나 switch문은 적절하지 못한 경우가 많다. 이럴 때 ChoiceFormat을 잘
사용하면 복잡하게 처리될 수밖에 없었던 코드를 간단하고 직관적으로 만들 수 있다.

import java.text.*;
class ChoiceFormatEx{
  public static void main(String[] args){
    double[] limits = {60, 70, 80, 90}; //낮은 값부터 큰 값의 순서로 적어야한다.
    //limits, grades간의 순서와 개수를 맞추어야 한다.
    String[] grades = {"D", "C", "B", "A"};
    int[] scores = {100, 95, 88, 70, 52, 60, 70};
    
    ChoiceFormat form = new ChoiceFormat(limits, grades);
    
    for(int i=0;i<scores.length;i++){
      System.out.println(scores[i]+":"+form.format(scores[i]));
    }
  }
}

두개의 배열이 사용되었는데 하나(limits)는 범위의 경계값을 저장하는데 사용하였고, 또 하나(grades)
는 범위에 포함된 값을 치환할 문자열을 저장하는데 사용되었다. 경계값은 double형으로 반드시 모두 오름
차순으로 정렬되어 있어야 하며, 치환 될 문자열의 개수는 경계값에 의해 정의된 범위의 개수와 일치해야한다.
그렇지 않으면 IllegalArgumentException이 발생한다.

import java.text.*;

class ChoiceFormatEx{
  public static void main(String[] args){
    String pattern = "60#D|70#C|80<B|90#A";
    int[] scores = {91, 90, 80, 88, 70, 52, 60};
    
    ChoiceFormat form = new ChoiceFormat(pattern);
    
    for(int i=0;i<scores.length;i++){
      System.out.println(scores[i] + ":" + form.format(scores[i]));
    }
  }
}

이처럼 배열 대신 패턴을 사용해서 보다 간결하게 처리할 수도 있다. 패턴은 구분자로 '#'와 '<' 두 가지
를 제공하는데, 'limit#value'의 형태로 사용한다. '#'은 경계값을 범위에 포함시키지만, '<'는 포함시키지 안흔ㄴ다.
위의 결과에서 90은 A지만, 80은 B가 아닌, C이다.

MessageFormat은 데이터를 정해진 양식에 맞게 출력할 수 있도록 도와준다. 데이터가 들어갈 자리를
마련해 놓은 양식을 미리 작성하고 프로그램을 이용해서 다수의 데이터를 같은 양식으로 출력할 때 사용하면
좋다. 예를 들어 고객들에게 보낼 안내문을 출력할 때, 또는 하나의 데이터를 다양한 양식으로 출력할 때
사용한다.

import java.text.*;

class MessageFormatEx{
  public static void main(String[] args){
    String msg = "Name: {0} \nTel: {1} \nAge: {2} \nBirthday: {3}";
    
    Object[] arguments = {
      "이자바", "02-123-1234", "27", "07-09"
    };
    
    String result = 
              MessageFormat.format(msg, arguments);
    System.out.println(result);
  }
}

import java.text.*;

class MessageFormatEx{
  public static void main(String[] args){
    String tableName = "CUST_INFO";
    String msg = "INSERT INTO " + tableName
                                +" VALUES (''{0}'',''{1}'',{2},''{3}'');";
    Object [][] arguments = {
      {"이자바","02-123-1234","27","07-09"},
      {"김프로","032-333-1234","33","10-07"},
    };
      
    for(int i=0; i<arguments.length; i++){
      String result = MessageFormat.format(msg, arguments[i]);
      System.out.println(result);
    }
  }
}

다수의 데이터를 Database에 저장하기 위한 Insert문으로 변환하는 경우 등에 사용하면 좋을 것

import java.text.*;

class MessageFormatEx{
  public static void main(String[] args) throws Exception{
    String[] data = {
      "INSERT INTO CUST_INFO VALUES ('이자바','02-123-1234',27,'07-09');"
      "INSERT INTO CUST_INFO VALUES ('김프로','032-333-1234',33,'10-07');"
    };
    
    String pattern = "INSERT INTO CUST_INFO VALUES ({0},{1},{2},{3});";
    MessageFormat mf = new MessageFormat(pattern);
    
    for(int i=0; i<data.length; i++){
      Object[] objs = mf.parse(data[i]);
      for(int j=0; j<objs.length; j++){
        System.out.print(objs[j] + ",");
      }
      System.out.println();
    }
  }
}

parse(String source)를 이용해서 출력된 데이터로부터 필요한 데이터만을 뽑아내는 방법이다.
데이터를 객체배열에 직접 초기화하였는데, 이렇게 하면 데이터가 바뀔 때마다 매번 배열을 변경해야
하고 그리고는 다시 컴파일을 해줘야하므로 불편하다.

이러한 불편함을 없애기 위해 Scanner를 통해 파일로부터 데이터를 라인별로 읽어서 처리하도록 변경
했다. 이렇게 파일로부터 데이터를 제공받으면 데이터가 변경되어도 다시 컴파일을 하지 않아도 된다.

import java.util.*;
import java.text.*;
import java.io.*;

class MessageFormatEx{
  public static void main(String[] args) throws Exception{
    String tableName = "CUST_INFO";
    String fileName = "data.txt";
    String msg = "INSERT INTO " + tableName + " VALUES ({0}, {1}, {2}, {3});";
    
    Scanner s = new Scanner(new File(fileName));
    
    String pattern = "{0}, {1}, {2}, {3}";
    MessageFormat mf = new MessageFormat(pattern);
    
    while(s.hasNextLine()){
      String line = s.nextLine();
      Object[] objs = mf.parse(line);
      System.out.println(MessageFormat.format(msg, objs));
    }
    s.close();
  }
}
