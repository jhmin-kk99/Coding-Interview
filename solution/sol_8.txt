인터페이스와 추상클래스의 차이, 각각의 특징

1. 추상클래스
2. 인터페이스

1. 클래스를 설계도에 비유한다면, 추상클래스는 미완성 설계도에 비유할 수 있다.
미완성 설계도로 완성된 제품을 만들 수 없듯이 추상클래스로 인스턴스는 생성할 수 
없다. 추상클래스는 상속을 통해서 자손클래스에 의해서만 완성될 수 있다.

추상클래스 자체로는 클래스로서의 역할을 다 못하지만, 새로운 클래스를 작성하는데
있어서 바탕이 되는 조상클래스로서 중요한 의미를 갖는다.

같은 크기의 TV라도 기능의 차이에 따라 여러 종류의 모델이 있지만, 사실 이
들의 설계도는 아마 90%정도는 동일할 것이다. 서로 다른 세 개의 설계도를 따로
그리는 것보다는 이들의 공통부분만을 그린 미완성 설계도를 만들어 놓고, 이 미완
성 설계도를 이용해서 각각의 설계도를 완성하는 것이 훨씬 효율적일 것이다.

추상클래스는 추상메서드를 포함하고 있다는 것을 제외하고는 일반클래스와 전혀
다르지 않다. 추상클래스에도 생성자가 있으며, 멤버변수와 메서드도 가질 수 있다.
(추상메서드를 포함하고 있지 않은 클래스에도 키워드 'abstract'를 붙여서 추상클래스
로 지정할 수도 있다. 추상메서드가 없는 완성된 클래스라 할지라도 추상클래스로
지정되면 클래스의 인스턴스를 생성할 수 없다.)

추상클래스로부터 상속받는 자손클래스는 오버라이딩을 통해 조상인 추상클래스의 추상
메서드를 모두 구현해주어야 한다.

2. 인터페이스는 일종의 추상클래스이다. 인터페이스는 추상클래스처럼 추상메서드를
갖지만 추상클래스보다 추상화 정도가 높아서 추상클래스와 달리 몸통을 갖춘 일반
메서드 또는 멤버변수를 구성원으로 가질 수 없다. 오직 추상메서드와 상수만을 멤버로
가질 수 있으며, 그 외의 다른 어떠한 요소도 허용하지 않는다.
인터페이스도 추상클래스처럼 완성되지 않은 불완전한 것이기 때문에 그 자체만으로
사용되기 보다는 다른 클래스를 작성하는데 도움 줄 목적으로 작성된다.

interface 인터페이스이름 {
	public static final 타입 상수이름 = 값;
	(public abstract) 메서드이름(매개변수목록);
}

인터페이스는 인터페이스로부터만 상속받을 수 있으며, 클래스와는 달리 다중상속,
즉 여러 개의 인터페이스로부터 상속을 받는 것이 가능하다.

interface Movable{
	void move(int x, int y);
}
interface Attackable{
	void attack(Unit u);
}
interface Fightable extends Movable, Attackable {}

인터페이스도 추상클래스처럼 그 자체로는 인스턴스를 생성할 수 없으며, 추상클래스
가 상속을 통해 추상메서드를 완성하는 것처럼, 인터페이스도 자신에 정의된 추상메서드
의 몸통을 만들어주는 클래스를 작성해야 한다.

인터페이스의 이름에는 주로 Fightable과 같이 '~을 할 수 있는'의 의미인 'able'로
끝나는 것들이 많은데, 그 이유는 어떠한 기능 또는 행위를 하는데 필요한 메서드를
제공한다는 의미를 강조하기 위해서이다.

interface Movable{
	void move(int x, int y);
}
class Fighter implements Movable{
	public void move(int x, int y){} 
}

오버라이딩 할 때는 조상의 메서드보다 넓은 범위의 접근 제어자를 지정해야 한다.
Movable인터페이스에 'void move(int x, int y)'와 같이 정의되어 있지만 사실
'public abstract'가 생략된 것이기 때문에 실제로 'public abstract void move(int x,
int y)'이다. 그래서 이를 구현하는 Fighter클래스에서는 'void move(int x, int y)'의
접근 제어자를 반드시 public으로 해야한다.

자바는 다중상속을 허용하지 않지만, 인터페이스를 이용하면 다중상속이 가능하다.

인터페이스는 static상수만 정의할 수 있으므로 조상클래스의 멤버변수와 충돌하는 경우
는 거의 없고 충돌된다 하더라도 클래스 이름을 붙여서 구분이 가능하다. 그리고 추상
메서드는 구현내용이 전혀 없으므로 조상클래스의 메서드와 선언부가 일치하는 경우에는
당연히 조상 클래스 쪽의 메서드를 상속받으면 되므로 문제되지 않는다.
그러나 이렇게 하면 상속받는 멤버의 충돌은 피할 수 있지만, 다중상속의 장점을 잃게된다.
만일 두개의 클래스로부터 상속을 받아야 할 상황이라면, 두 조상클래스 중에서 비중이 높은
쪽을 선택하고 다른 한쪽은 클래스 내부에 멤버로 포함시키는 방식으로 처리하거나 어느
한쪽의 필요한 부분을 뽑아서 인터페이스로 만든 다음 구현하도록 한다.

public class Tv{
	protected boolean power;
	protected int channel;
	protected int volume;

	public void power() {power = !power;}
	public void channelUp() {channel++;}
	public void channelDown() {channel--;}
	public void volumeUp() {volume++;}
	public void volumeDown() {volume--;}
}

public class VCR{
	protected int counter;

	public void play(){...}
	public void stop(){...}
	public void reset(){counter = 0;}
	public int getCounter(){return counter;}
	public void setCounter(int c){counter = c;}
}

public interface IVCR{
	public void play();
	public void stop();
	public void reset();
	public int getCounter();
	public void setCounter(int c);
}

public class TVCR extends Tv implements IVCR{
	VCR vcr = new VCR();

	public void play(){
		vcr.play();
	}
	public void stop(){
		vcr.stop();
	}
	public void reset(){
		vcr.reset();
	}
	public int getCounter(){
		return vcr.getCounter();
	}
	public void setCounter(int c){
		vcr.setCounter(c);
	}
	
}

인터페이스는 이를 구현한 클래스의 조상이라 할 수 있으므로 해당 인터페이스 타입의 참조변수로
이를 구현한 클래스의 인스턴스를 참조할 수 있으며, 인터페이스 타입으로의 형변환도 가능하다.

리턴타입이 인터페이스라는 것은 메서드가 해당 인터페이스를 구현한 클래스의 인스턴스를 반환
한다는 것을 의미한다.

class ParserTest {
    public static void main(String[] args) {

        Parseable parser = ParseManager.getParser("XML");
        parser.parse("document.XML");
        parser = ParseManager.getParser("HTML");
        parser.parse("document2.html");

    }
}

interface Parseable{
    public abstract void parse(String fileName);
}
class ParseManager{
	//리턴타입이 Parseable인터페이스이다.
    public static Parseable getParser(String type){
        if(type.equals("XML")){
            return new XMLParser();
        }else{
            Parseable p = new HTMLParser();
            return p;
        }

    }
}

class XMLParser implements  Parseable{
    @Override
    public void parse(String fileName) {
        System.out.println(fileName + "-XML");
    }
}
class HTMLParser implements  Parseable{

    @Override
    public void parse(String fileName) {
        System.out.println(fileName + "-HTML");
    }
}

나중에 새로운 종류의 XML구문분석기 NewXMLParser클래스가 나와도 ParserTest클래스는
변경할 필요 없이 ParserManager클래스의 getParser메서드에서 'return new XMLParser();'
대신 'return new NewXMLParser();'로 변경하기만 하면 된다.

이러한 장점은 특히 분산환경 프로그래밍에서 그 위력을 발휘한다. 사용자 컴퓨터에 설치
된 프로그램을 변경하지 않고 서버측의 변경만으로도 사용자가 새로 개정된 프로그램을 
사용하는 것이 가능하다.




