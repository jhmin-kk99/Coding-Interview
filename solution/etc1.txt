Pipeline이란?

단일사이클은 설계가 올바르게 작동한다 하더라도 비효율성 때문에 현대적 설계에서는 쓰이지 않는다.
단일사이클 설계에서는 클럭 사이클이 모든 명령어에 대해 같은 길이를 가져야 하기 때문이다. 클럭 사이클은
컴퓨터에서 가능한 경로 중 가장 긴 경로에 의해 결정된다. 이 최장 경로는 lw명령어라는 것이 거의 확실
한데, 이 적재 명령어는 명령어 메모리, 레지스터 파일, ALU, 데이터 메모리, 레지스터 파일의 다섯 개 기능
유닛을 차례로 사용한다. CPI값은 1이지만, 단일 사이클 구현은 클럭 사이클이 너무 길기 때문에 전체 성능
은 좋지 않다. 

파이프라이닝(pipelining)은 여러 명령어가 중첩되어 실행되는 구현 기술이다. 

파이프라이닝은 다음의 특성을 지닌다.
- piplelining doesn't help latency of single task, it helps throughput of entire workload
- pipeline rate limited by slowest pipeline stage
- multiple tasks operating simultaneously using different resources
- potential speedup = number pipe stages
- unbalanced lengths of pipe stages reduces speedup
- time to 'fill' pipeline and time to 'drain' it reduces speedup
- stall for dependences

MIPS pipeline은 명령어 처리에 5단계를 거친다
1. IF : Instruction fetch from memory(Ifetch)
2. ID : Instruction decode & register read(ID/Reg)
3. EX : Execute operation or calculate address(Exec)
4. MEM : Access memory operand(Mem)
5. WB : Write result back to register(Wr)

why pipeline?

suppose
- 100 instructions are executed
- the single cycle machine has a cycle time of 45ns
- the multicycle and pipeline machines have cycle times of 10ns
- the multicycle machine has a CPI of 3.6

# single cycle machine
45 ns/cycle * 1 CPI * 100 inst = 4500 ns
# multicycle machine
10 ns/cycle * 3.6 CPI * 100 inst = 3600 ns
# ideal pipelined machine
10 ns/cycle * (1 CPI * 100 inst + 4 cycle drain) = 1040 ns
# ideal pipelined vs single cycle speedup
4500 ns / 1040 ns = 4.33


명령어의 5단계 각각을 수행하는 동안, 각 명령어의 값, 레지스터의 값 등을 유지하기 위해서 해당 단계에서 
사용중인 값을 레지스터에 저장해야 한다. 이를 'Pipeline Register'라고 한다.

다음 명령어가 다음 클럭 사이클에 실행될 수 없는 상황이 있다. 이러한 사건을 해저드(hazard)라 부르는데 세 종류가 있다.

structural hazards(구조적 해저드) : attempt to use the same resource two different ways at the same time
- Eg. two instructions try to read the same memory at the same time
구조적 해저드는 클럭 사이클에 실행하기를 원하는 여러 명령어들의 수행을 하드웨어가 지원할 수 없기 때문에 발생한다. 
각 파이프라인의 단계는 자신이 맡은 동작을 실행하기 위해서 메모리나 레지스터 등의 구성 요소를 사용하게 되는데, 
같은 파이프라인 단계에 있는 명렁어들이 동시에 하나의 자원을 같이 사용하려고 하면 파이프라인이 지연될 수 있다. 
파이프라인을 설계할 때 구조적 해저드를 피하도록 유의해야한다.

solution 1 : Instruction fetch would have to stall for that
- would cause a pipeline 'bubble'
solution 2 : pipelined datapaths require separate instruction/data memories
- or separate instruction/data caches
solution 3 : allow memory to read and write more than one word per cycle 
- 2 read, 1 write port가 있는 register file 처럼

data hazards(데이터 해저드) : attempt to use item before it is ready
- instruction depends on result of prior instruction still in the pipeline
add r1, r2, r3
sub r4, r2, r1

solution 1 : insert the stalls(nops)
- this really slows us down
solution 2 : Internal bypassing, Data forwarding
Internal bypassing
- fix register file access hazard by doing reads in the second half of the cycle and writes in the first half
register file의 Read Address1 혹은 Read Address2와 Write Address가 같으면, Write Data를 Read Data1 혹은 Read Data2에 보내준다.
Data forwarding
- Use temporary results, don't wait for them to be written 

1. 
add r1,r2,r3
sub r1,r1,r5
and r6,r7,r1
or r8,r1,r1
sw r4,100(r1)
data fowarding으로 해결 가능
- can fix data hazard by forwarding results as soon as they are available to where they are needed)
2.
add $1,$1,$2
add $1,$1,$3
add $1,$1,$4
another potential data hazard can occur
- when there is a conflict between the result of the WB stage instruction and the MEM stage instruction
- which should be forwarded? More recent result!
3.
lw $2,20($1)
and $4,$2,$5
can't always avoid stalls by forwarding
- if value not computed when needed
- can't forward backward in time!
must delay/stall instruction dependent on loads

control hazards(제어 해저드) : attempt to make a decision before condition is evaluated
- branch instructions
beq r1, r4, loop
add r1, r2, r3

branch determines flow of control
- conditional branches (beq, bne)
- unconditional branches (j)
when the flow of instruction addresses is not sequential; incurred by change of instructions(Branch)
- fetching next instruction depends on branch outcome
- pipeline can't always fetch correct instruction
possible solutions
solution1 : stall
- wait until decision is clear
j incur 1 stall
jumps not decoded until ID, so one flush is needed (pc+4)
solution2 : reducing branch delay 
move decision point earlier in the pipeline
1. move the branch decision hardware back to the EX stage
- reduces the number of stall (flush) cycles to two
- adds an and gate and a 2x1 mux to the EX timing path
2. add hardware to compute the branch target address and evaluate the branch decision to the ID stage
- reduces the number of stall (flush) cycles to one (like with jumps)
(but now need to add forwarding hardware in ID stage)
- computing branch target address can be done in parellel with RegFile read
(done for all instructions - only used when needed)
- comparing the registers can't be done until after RegFile read, so comparing and updating the PC adds
a mux, a comparator, and an and gate to the ID timing path
3. For deeper pipelines, branch decision points can be even later in the pipeline, incurring more stalls

solution3 : predict
solution4 : delay decision (requires compiler support)
control hazards occur less frequently than data hazards
- there is nothing as effective against control hazards as forwarding is for data hazards






















