프로세스란? 쓰레드란?

프로세스(process)란 간단히 말해서 '실행 중인 프로그램(program)'이다. 프로그램을 실행하면 OS로 부터
실행에 필요한 자원(메모리)을 할당받아 프로세스가 된다. 프로세스는 프로그램을 수행하는 데 필요한 데이터
와 메모리 등의 자원 그리고 쓰레드로 구성되어 있으며 프로세스의 자원을 이용해서 실제로 작업을 수행하는
것이 바로 쓰레드이다. 그래서 모든 프로세스에는 최소한 하나 이상의 쓰레드가 존재하며, 둘 이상의 쓰레드
를 가진 프로세스를 '멀티쓰레드 프로세스(multi-threaded process)'라고 한다.
하나의 프로세스가 가질 수 있는 쓰레드의 개수는 제한되어 있지 않으나 쓰레드가 작업을 수행하는데
개별적인 메모리 공간(호출스택)을 필요로 하기 때문에 프로세스의 메모리 한계에 따라 생성할 수 있는 쓰레
드의 수가 결정된다. 실제로는 프로세스의 메모리 한계에 다다를 정도로 많은 쓰레드를 생성하는 일은 없을
것이니 걱정하지 않아도 된다.

현재 우리가 사용하고 있는 윈도우나 유닉스를 포함한 대부분의 OS는 멀티태스킹(multitasking, 다중작업)
을 지원하기 때문에 여러 개의 프로세스가 동시에 실행될 수 있다. 이와 마찬가지로 멀티쓰레딩은 하나의
프로세스 내에서 여러 쓰레드가 동시에 작업을 수행하는 것이다. CPU의 코어(core)가 한 번에 단 하나의
작업만 수행할 수 있으므로, 실제로 동시에 처리되는 작업의 개수는 코어의 개수와 일치한다. 그러나 처리해
야하는 쓰레드의 수는 언제나 코어의 개수보다 훨씬 많기 때문에 각 코어가 아주 짧은 시간 동안 여러 작업
을 번갈아 가며 수행함으로써 여러 작업들이 모두 동시에 수행되는 것처럼 보이게 한다.
프로세스의 성능이 단순히 쓰레드의 개수에 비례하는 것은 아니며, 하나의 쓰레드를 가진 프로세스 보다
두 개의 쓰레드를 가진 프로세스가 오히려 더 낮은 성능을 보일 수도 있다.

멀티쓰레딩의 장점
- CPU의 사용률을 향상시킨다.
- 자원을 보다 효율적으로 사용할 수 있다.
- 사용자에 대한 응답성이 향상된다.
- 작업이 분리되어 코드가 간결해진다.

여러 사용자에게 서비스를 해주는 서버 프로그램의 경우 멀티쓰레드로 작성하는 것은 필수적이어서 하나
의 서버 프로세스가 여러 개의 쓰레드를 생성해서 쓰레드와 사용자의 요청이 일대일로 처리되도록 프로
그래밍해야 한다. 멀티쓰레드 프로세스는 여러 쓰레드가 같은 프로세스 내에서 자원을 공유하면서 작업
을 하기 때문에 발생할 수 있는 동기화(synchronization), 교착상태(deadlock)와 같은 문제들을 고려해서
신중히 프로그래밍해야 한다. 

쓰레드를 구현하는 방법은 Thread클래스를 상속받는 방법과 Runnable인터페이스를 구현하는 방법, 두 가지
가 있다. Thread클래스를 상속받으면 다른 클래스를 상속받을 수 없기 때문에, Runnable인터페이스를 구현
하는 방법이 일반적이다. Runnable인터페이스를 구현하는 방법은 재사용성(reusability)이 높고 코드의
일관성(consistency)을 유지할 수 있기 때문에 보다 객체지향적인 방법이다.

1. Thread클래스를 상속
class MyThread extends Thread{
  public void run {작업내용} //Thread클래스의 run()을 오버라이딩
}

2. Runnable인터페이스를 구현
class MyThread implements Runnable{
  public void run(){작업내용} //Runnable인터페이스의 run()을 구현
}
public interface Runnable{
  public abstract void run();
}
쓰레드를 구현한다는 것은, 쓰레드를 통해 작업하고자 하는 내용으로 run()의 몸통{}을 채우는 것이다.

Thread클래스를 상속받은 경우와 Runnable인터페이스를 구현한 경우의 인스턴스 생성 방법이 다르다.

ThreadEx1_1 t1 = new ThreadEx1_1(); //Thread 자손 클래스의 인스턴스를 생성
Runnable r = new ThreadEx1_2(); //Runnable을 구현한 클래스의 인스턴스를 생성
Thread t2 = new Thread(r); // 생성자 Thread(Runnable target)
Thread t2 = new Thread(new ThreadEx1_2()); //위의 두 줄을 한 줄로 간단히

Runnable인터페이스를 구현한 경우, Runnable인터페이스를 구현한 클래스의 인스턴스를 생성한 다음,
이 인스턴스를 Thread클래스의 생성자의 매개변수로 제공해야 한다.

public class Thread{
  private Runnable r; //Runnable을 구현한 클래스의 인스턴스를 참조하기 위한 변수
  public Thread(Runnable r){
    this.r = r;
  }
  public void run(){
    if(r != null)
      r.run(); //Runnable인터페이스를 구현한 인스턴스의 run()을 호출
  }
}
Thread클래스를 상속받으면, 자손 클래스에서 조상인 Thread클래스의 메서드를 직접 호출할 수 있지만,
Runnable을 구현하면 Thread클래스의 static메서드인 currentThread()를 호출하여 쓰레드에 대한 참조
를 얻어 와야만 호출이 가능하다.
쓰레드를 생성했다고 해서 자동으로 실행되는 것은 아니다. start()를 호출해야만 쓰레드가 실행된다.
start()가 호출되었다고 해서 바로 실행되는 것이 아니라, 일단 실행대기 상태에 있다가 자신의 차례가
되어야 실행된다. 물론 실행대기중인 쓰레드가 하나도 없으면 곧바로 실행상태가 된다.
(쓰레드의 실행순서는 OS의 스케줄러가 작성한 스케줄에 의해 결정된다.)
한 번 실행이 종료된 쓰레드는 다시 실행할 수 없다. 하나의 쓰레드에 대해 start()가 한 번만 호출될 수
있다.

main메서드에서 run()을 호출하는 것은 생성된 쓰레드를 실행시키는 것이 아니라 단순히 클래스에 선언된
메서드를 호출하는 것일 뿐이다. 반면에 start()는 새로운 쓰레드가 작업을 실행하는데 필요한 호출스택
(call stack)을 생성한 다음에 run()을 호출해서, 생성된 호출스택에 run()이 첫 번째로 올라가게 한다.
모든 쓰레드는 독립적인 작업을 수행하기 위해 자신만의 호출스택을 필요로 하기 때문에, 새로운 쓰레드를
생성하고 실행시킬 때마다 새로운 호출스택이 생성되고 쓰레드가 종료되면 작업에 사용된 호출스택은
소멸된다. 스케줄러는 실행대기중인 쓰레드들의 우선순위를 고려하여 실행순서와 실행시간을 결정하고,
각 쓰레드들은 작성된 스케줄에 따라 자신의 순서가 되면 지정된 시간동안 작업을 수행한다.
이 때 주어진 시간동안 작업을 마치지 못한 쓰레드는 다시 자신의 차례가 돌아올 때까지 대기상태로 있게
되며, 작업을 마친 쓰레드, 즉 run()의 수행이 종료된 쓰레드는 호출스택이 모두 비워지면서 이 쓰레드가
사용하던 호출스택은 사라진다. 이는 마치 자바프로그램을 실행하면 호출스택이 생성되고 main메서드가
처음으로 호출되고, main메서드가 종료되면 호출스택이 비워지면서 프로그램도 종료되는 것과 같다.
main메서드의 작업을 수행하는 것도 쓰레드이며, 이를 main쓰레드라고 한다. 지금까지는 main메서드가 수
행을 마치면 프로그램이 종료되었으나, main메서드가 수행을 마쳤다하더라도 다른 쓰레드가 아직 작업을
마치지 않은 상태라면 프로그램이 종료되지 않는다.

두 개의 작업을 하나의 쓰레드(th1)로 처리하는 경우와 두 개의 쓰레드(th1, th2)로 처리하는 경우를 
가정해보자. 하나의 쓰레드로 두 작업을 처리하는 경우는 한 작업을 마친 후에 다른 작업을 시작하지만,
두 개의 쓰레드로 작업 하는 경우에는 짧은 시간동안 2개의 쓰레드(th1, th2)가 번갈아 가면서 작업을
수행해서 동시에 두 작업이 처리되는 것과 같이 느끼게 한다.
하나의 쓰레드로 두개의 작업을 수행한 시간과 두 개의 쓰레드로 두 개의 작업을 수행한 시간(t2~=t2')
은 거의 같다. 오히려 두 개의 쓰레드로 작업한 시간이 싱글 쓰레드로 작업한 시간보다 더 걸리게 되는데
그 이유는 쓰레드간의 작업전환(context switching)에 시간이 걸리기 때문이다. 
작업 전환을 할 때는 현재 진행 중인 작업의 상태, 예를 들면 다음에 실행해야할 위치(PC, 프로그램 카운터)
등의 정보를 저장하고 읽어 오는 시간이 소요된다. 참고로 쓰레드의 스위칭에 비해 프로세스의 스위칭이
더 많은 정보를 저장해야하므로 더 많은 시간이 소요된다.

실행결과를 싱글 코어일 때와 멀티 코어일 때를 비교한다고 하자. 싱글 코어인 경우네는 멀티쓰레드라도
하나의 코어가 번갈아가면서 작업을 수행하는 것이므로 두 작업이 절대 겹치지 않는다. 그러나, 멀티 코어
에서는 멀티쓰레드로 두 작업을 수행하면, 동시에 두 쓰레드가 수행될 수 있으므로 두 작업이 겹치는 부분
이 발생한다. 실행 결과는 실행할 때마다 다른 결과를 얻을 수 있는데 그 이유는 실행 중인 프로세스가
OS의 프로세스 스케줄러의 영향을 받기 때문이다. JVM의 쓰레드 스케줄러에 의해서 어떤 쓰레드가 얼마동안
실행될 것인지 결정되는 것과 같이 프로세스도 프로세스 스케줄러에 의해서 실행순서와 실행시간이 결정
되기 때문에 매 순간 상황에 따라 프로세스에게 할당되는 실행시간이 일정하지 않고 쓰레드에게 할당되는
시간 역시 일정하지 않게 된다. 그래서 쓰레드가 이러한 불확실성을 가지고 있다는 것을 염두에 두어야 한다.
자바가 OS(플랫폼) 독립적이라고 하지만, 실제로는 OS종속적인 부분이 몇 가지 있는데 쓰레드도 그 중의
하나이다. JVM의 종류에 따라 쓰레드 스케줄러의 구현방법이 다를 수 있기 때문에 멀티쓰레드로 작성된
프로그램을 다른 종류의 OS에서도 충분히 테스트해 볼 필요가 있다.
두 쓰레드가 서로 다른 자원을 사용하는 작업의 경우에는 싱글쓰레드 프로세스보다 멀티쓰레드 프로세스가
더 효율적이다. 예를 들면 데이터를 입력받는 작업, 네트워크로 파일을 주고받는 작업, 프린터로 파일을
출력하는 작업과 같이 외부기기와의 입출력을 필요로 하는 경우가 이에 해당한다.

쓰레드는 우선순위(priority)라는 속성(멤버변수)을 가지고 있는데, 이 우선순위의 값에 따라 쓰레드가
얻는 실행시간이 달라진다. 쓰레드가 수행하는 작업의 중요도에 따라 쓰레드의 우선순위를 서로 다르게
지정하여 특정 쓰레드가 더 많은 작업시간을 갖도록 할 수 있다. 예를 들어 파일전송기능이 있는 메신저의
경우, 파일다운로드를 처리하는 쓰레드보다 채팅내용을 전송하는 쓰레드의 우선순위가 더 높아야 사용자가
채팅하는데 불편함이 없을 것이다. 대신 파일다운로드 작업에 걸리는 시간은 더 길어질 것이다.
이처럼 시각적인 부분이나 사용자에게 빠르게 반응해야하는 작업을 하는 쓰레드의 우선순위는 다른 작업을
수행하는 쓰레드에 비해 높아야 한다.

쓰레드의 우선순위와 관련된 메서드와 상수는 다음과 같다.
void setPriority(int newPriority) 쓰레드의 우선순위를 지정한 값으로 변경한다.
int getPriority() 쓰레드의 우선순위를 반환한다.
public static final int MAX_PRIORITY = 10 //최대우선순위
public static final int MIN_PRIORITY = 1 //최소우선순위
public static final int NORM_PRIORITY = 5 //보통우선순위

쓰레드가 가질 수 있는 우선순위의 범위는 1~10이며 숫자가 높을수록 우선순위가 높다.
쓰레드의 우선순위는 쓰레드를 생성한 쓰레드로부터 상속받는다. main메서드를 수행하는 쓰레드는 우선순위
가 5이므로 main메서드 내에서 생성하는 쓰레드의 우선순위는 자동적으로 5가 된다.
우선순위가 같은 경우 각 쓰레드에게 거의 같은 양의 실행시간이 주어지지만, 우선순위가 다르다면 우선순위
가 높은 th1에게 상대적으로 th2보다 더 많은 양의 실행시간이 주어지고 결과적으로 작업 A가 B보다 빨리
완료될 수 있다. 그러나 멀티코어에서는 쓰레드의 우선순위에 따른 차이가 전혀 없다. 우선순위를 다르게
해도 결과는 같다. 쓰레드에 높은 우선순위를 주면 더 많은 실행시간과 실행기회를 갖게 될 것이라고 기대
할 수 없는 것이다. 멀티코어라 해도 OS마다 다른 방식으로 스케줄링하기 때문에, 어떤 OS에서 실행하느냐
에 따라 다른 결과를 얻을 수 있다. 굳이 우선순위에 차등을 두어 쓰레드를 실행하려면, 특정 OS의 스케줄
링 정책과 JVM의 구현일 직접 확인해봐야 한다. 자바는 쓰레드가 우선순위에 따라 어떻게 다르게 처리되어야
하는지에 대해 강제하지 않으므로 쓰레드의 우선순위와 관련된 구현이 JVM마다 다를 수 있기 때문이다. 만일
확인한다 하더라도 OS의 스케줄러에 종속적이라서 어느 정도 예측만 가능한 정도일 뿐 정확히 알 수는 없다.
차라리 쓰레드에 우선순위를 부여하는 대신 작업에 우선순위를 두어 PriorityQueue에 저장해 놓고, 우선순위
가 높은 작업이 먼저 처리되도록 하는 것이 나을 수 있다.

쓰레드 그룹은 서로 관련된 쓰레드를 그룹으로 다루기 위한 것으로, 폴더를 생성해서 관련된 파일들을
함께 넣어서 관리하는 것처럼 쓰레드 그룹을 생성해서 쓰레드를 그룹으로 묶어서 관리할 수 있다.
또한 폴더 안에 폴더를 생성할 수 있듯이 쓰레드 그룹에 다른 쓰레드 그룹을 포함 시킬 수 있다. 사실
쓰레드 그룹은 보안상의 이유로 도입된 개념으로, 자신이 속한 쓰레드 그룹이나 하위 쓰레드 그룹은 변경
할 수 있지만 다른 쓰레드 그룹의 쓰레드를 변경할 수는 없다. ThreadGroup을 사용해서 생성할 수 있다.
쓰레드를 쓰레드 그룹에 포함시키려면 Thread의 생성자를 이용해야한다.

Thread(ThreadGroup group, String name)
Thread(ThreadGroup group, Runnable target)
Thread(ThreadGroup group, Runnable target, String name)
Thread(ThreadGroup group, Runnable target, String name, long stackSize)

모든 쓰레드는 반드시 쓰레드 그룹에 포함되어 있어야 하기 때문에, 위와 같이 쓰레드 그룹을 지정하는
생성자를 사용하지 않은 쓰레드는 기본적으로 자신을 생성한 쓰레드와 같은 쓰레드 그룹에 속하게 된다.
자바 어플리케이션이 실행되면, JVM은 main과 sysem이라는 쓰레드 그룹을 만들고 JVM운영에 필요한 쓰레드
들을 생성해서 이 쓰레드 그룹에 포함시킨다. 예를 들어 main메서드를 수행하는 main이라는 이름의 쓰레드
는 main쓰레드 그룹에 속하고, 가비지컬렉션을 수행하는 Finalizer쓰레드는 system쓰레드 그룹에 속한다.
우리가 생성하는 모든 쓰레드 그룹은 main쓰레드 그룹의 하위 쓰레드 그룹이 되며, 쓰레드 그룹을 지정하지
않고 생성한 쓰레드는 자동적으로 main쓰레드 그룹에 속하게 된다.

ThreadGroup getThreadGroup() 쓰레드 자신이 속한 쓰레드 그룹을 반환한다.
void uncaughtException(Thread t, Throwable e) 쓰레드 그룹의 쓰레드가 처리되지 않은 예외에 의해
실행이 종료되었을 때, JVM에 의해 이 메서드가 자동적으로 호출된다.

public class ThreadEx {
    public static void main(String[] args) throws Exception{
        ThreadGroup main = Thread.currentThread().getThreadGroup();
        ThreadGroup grp1 = new ThreadGroup("Group1");
        ThreadGroup grp2 = new ThreadGroup("Group2");

        //ThreadGroup(ThreadGroup parent, String name)
        ThreadGroup subGrp1 = new ThreadGroup(grp1, "SubGroup1");
        grp1.setMaxPriority(3); //쓰레드 그룹 grp1의 최대우선순위를 3으로 변경

        Runnable r = new Runnable() {
            @Override
            public void run() {
                try{
                    Thread.sleep(1000); //쓰레드를 1초간 멈추게 한다.
                }catch(InterruptedException e){}
            }
        };
        //Thread(ThreadGroup tg, Runnable r, String name)
        new Thread(grp1, r, "th1").start();
        new Thread(subGrp1, r, "th2").start();
        new Thread(grp2, r, "th3").start();

        System.out.println(">>List of ThreadGroup : "+ main.getName()
        + ", Active ThreadGroup : " + main.activeGroupCount()
        + ", Active Thread : " + main.activeCount());
        main.list();
    }

}
->
>>List of ThreadGroup : main, Active ThreadGroup : 3, Active Thread : 5
java.lang.ThreadGroup[name=main,maxpri=10]
    Thread[main,5,main]
    Thread[Monitor Ctrl-Break,5,main]
    java.lang.ThreadGroup[name=Group1,maxpri=3]
        Thread[th1,3,Group1]
        java.lang.ThreadGroup[name=SubGroup1,maxpri=3]
            Thread[th2,3,SubGroup1]
    java.lang.ThreadGroup[name=Group2,maxpri=10]
        Thread[th3,5,Group2]
결과를 보면 쓰레드 그룹에 포함된 하위 쓰레드 그룹이나 쓰레드는 들여쓰기를 이용해서 구별되도록
하였음을 알 수 있다. 새로 생성한 모든 쓰레드 그룹은 main쓰레드 그룹의 하위 쓰레드 그룹으로 포함
되어 있다는 것과 setMaxPriority()는 쓰레드가 쓰레드 그룹에 추가되기 이전에 호출되어야 하며,
쓰레드 그룹 grp1의 최대우선순위를 3으로 했기 때문에, 후에 여기에 속하게 된 쓰레드 그룹과 쓰레드가
영향을 받았음을 확인하자. 그리고 참조변수 없이 쓰레드를 생성해서 바로 실행시켰는데, 그렇다고 해서
이 쓰레드가 가비지 컬렉터의 제거 대상이 되지는 않는다. 이 쓰레드의 참조가 ThreadGroup에 저장되어
있기 때문이다.

데몬쓰레드는 다른 일반 쓰레드(데몬 쓰레드가 아닌 쓰레드)의 작업을 돕는 보조적인 역할을 수행하는
쓰레드이다. 일반 쓰레드가 모두 종료되면 데몬 쓰레드는 강제적으로 자동 종료되는데, 그 이유는 데몬
쓰레드는 일반 쓰레드의 보조역할을 수행하므로 일반 쓰레드가 모두 종료되고 나면 데몬 쓰레드의 존재
의 의미가 없기 때문이다. 이 점을 제외하고는 데몬쓰레드와 일반 쓰레드는 다르지 않다. 데몬 쓰레드의
예로는 가비지 컬렉터, 워드프로세서의 자동저장, 화면자동갱신 등이 있다.
데몬 쓰레드는 무한루프와 조건문을 이용해서 실행 후 대기하고 있다가 특정 조건이 만족되면 작업을
수행하고 다시 대기하도록 작성한다. 데몬 쓰레드는 일반 쓰레드의 작성방법과 실행방법이 같으며 다만
쓰레드를 생성한 다음 실행하기 전에 setDaemon(true)를 호출하기만 하면 된다. 그리고 데몬 쓰레드가
생성한 쓰레드는 자동적으로 데몬 쓰레드가 된다.

boolean isDaemon() 쓰레드가 데몬 쓰레드인지 확인한다. 데몬 쓰레드이면 true를 반환한다.
void setDaemon(boolean on) 쓰레드를 데몬 쓰레드로 또는 사용자 쓰레드로 변경한다. 매개변수 on의
값을 true로 지정하면 데몬 쓰레드가 된다.

setDaemon메서드는 반드시 start()를 호출하기 전에 실행되어야 한다. 그렇지 않으면 IllegalThread
-StateException이 발생한다.

효율적인 멀티쓰레드 프로그램을 만들기 위해서는 보다 정교한 스케줄링을 통해 프로세스에게 주어진
자원과 시간을 여러 쓰레드가 낭비업이 잘 사용하도록 프로그래밍 해야 한다. 쓰레드의 스케줄링을
잘하기 위해서는 쓰레드의 상태와 관련 메서드를 잘 알아야 한다.

상태
NEW : 쓰레드가 생성되고 아직 start()가 호출되지 않은 상태
RUNNABLE : 실행 중 또는 실행 가능한 상태
BLOCKED : 동기화블럭에 의해서 일시정지된 상태(lock이 풀릴 때까지 기다리는 상태)
WAITING, TIMED_WAITING : 쓰레드의 작업이 종료되지는 않았지만 실행가능하지 않은(unrunnable)
일시정지 상태. TIMED_WAITING은 일시정지시간이 지정된 경우를 의미한다.
TERMINATED : 쓰레드의 작업이 종료된 상태
쓰레드의 상태는 Thread의 getState()메서드를 호출해서 확인할 수 있다.

sleep(long millis) - 일정시간동안 쓰레드를 멈추게 한다.
try{
  Thread.sleep(1, 500000); 
}catch(InterruptedException e){}

sleep()에 의해 일시정지 상태가 된 쓰레드는 지정된 시간이 다 되거나 interrupt()가 호출되면
(InterruptedException발생), 잠에서 깨어나 실행대기 상태가 된다.
그래서 sleep()을 호출할 때는 항상 try-catch문으로 예외를 처리해줘야 한다. 매번 예외처리를 해주는
것이 번거롭기 때문에, 아래와 같이 try-catch문까지 포함하는 새로운 메서드를 만들어서 사용하기도
한다.

void delay(long millis){
  try{
  Thread.sleep(millis); 
}catch(InterruptedException e){}
}
sleep()은 static으로 선언되어 있으며 참조변수를 이용해서 호출하기 보다는 Thread.sleep(millis);
과 같이 해야한다.

interrupt()와 interrupted() - 쓰레드의 작업을 취소한다.
진행 중인 쓰레드의 작업이 끝나기 전에 취소시켜야할 때가 있다. 예를 들어 큰 파일을 다운로드받을 때
시간이 너무 오래 걸리면 중간에 다운로드를 포기하고 취소할 수 있어야 한다. interrupt()는 쓰레드
에게 작업을 멈추라고 요청한다. 단지 멈추라고 요청만 하는 것일 뿐 쓰레드를 강제로 종료시키지는
못한다. interrupt()는 그저 쓰레드의 interrupted상태(인스턴스 변수)를 바꾸는 것일 뿐이다.
그리고 interrupted()는 쓰레드에 대해 interrupt()가 호출되었는지 알려준다. interrupt()가
호출되지 않았다면 false를, interrupt()가 호출되었다면 true를 반환한다.

void interrupt() : 쓰레드의 interrupted상태를 false에서 true로 변경
boolean isInterrupted() : 쓰레드의 interruptead상태를 반환
static boolean interrupted : 현재 쓰레드의 interrupted상태를 반환 후, false로 변경

쓰레드가 sleep(), wait(), join()에 의해 '일시정지 상태(WAITING)'에 있을 때, 해당 쓰레드에 대해
interrupt()를 호출하면, sleep(), wait(), join()에서 InterruptedException이 발생하고 쓰레드는
'실행대기 상태(RUNNABLE)'로 바뀐다. 즉, 멈춰있던 쓰레드를 깨워서 실행가능한 상태로 만드는 것이다.

필요하다면 다음과 같이 catch블럭에 interrupt()를 추가로 넣어줘서 쓰레드의 interrupted상태를
true로 다시 바꿔준다.

try{
  Thread.sleep(1000);
}catch(InterruptedException e){
  interrupt(); 
}

suspend(), resume(), stop() - deprecated
suspend()는 sleep()처럼 쓰레드를 멈추게 한다. suspend()에 의해 정지된 쓰레드는 resume()을
호출해야 다시 실행대기 상태가 된다. stop()은 호출되는 즉시 쓰레드가 종료된다.
suspend(), resume(), stop()은 쓰레드의 실행을 제어하는 가장 손쉬운 방법이지만, suspend()와
stop()이 교착상태(deadlock)를 일으키기 쉽게 작성되어있으므로 'deprecated'되었다.
필요하다면 다음과 같이 해결할 수 있다.

class ThreadEx{
  public static void main(String args[]){
    ThreadEx_1 th1 = new ThreadEx_1("*");
    ThreadEx_1 th2 = new ThreadEx_1("**");
    ThreadEx_1 th3 = new ThreadEx_1("***");
    th1.start();
    th2.start();
    th3.start();

    try{
        Thread.sleep(2000);
        th1.suspend();
        Thread.sleep(2000);
        th2.suspend();
        Thread.sleep(3000);
        th1.resume();
        Thread.sleep(3000);
        th1.stop();
        th2.stop();
        Thread.sleep(2000);
        th3.stop();
    }catch(InterruptedException e){}
  }
}

class ThreadEx_1 implements Runnable{
  boolean suspended = false;
  boolean stopped = false;
  Thread th;
  ThreadEx_1(String name){
    th = new Thread(this, name) //Thread(Runnable r, String name) 
  }
  public void run(){
    while(!stopped){
      if(!suspended){
        System.out.println(Thread.currentThread().getName());
        try{
          Thread.sleep(1000);
        }catch(InterruptedException e){}
      }
    }
  }
  System.out.println(Thread.currentThread().getName() + " - stopped");
}
public void suspend(){suspended = true;}
public void resume(){suspended = false;}
public void stop(){stopped = true;}
public void start(){th.start();}

yield() - 다른 쓰레드에게 양보한다.
yield()는 쓰레드 자신에게 주어진 실행시간을 다음 차례의 쓰레드에게 양보(yield)한다.
예를 들어 스케줄러에 의해 1초의 실행시간을 할당받은 쓰레드가 0.5초의 시간동안 작업한 상태에서
yield()가 호출되면, 나머지 0.5초는 포기하고 다시 실행대기상태가 된다.
yield()와 interrupt()를 적절히 사용하면, 프로그램의 응답성을 높이고 보다 효율적인 실행이 가능하게
할 수 있다.

while(!stopped){
  if(!suspended){
    ...
    try{
      Thread.sleep(1000);
    }catch(InterruptedException e){}
  }else{
      Thread.yield();
  }
}
else가 없고, 만일 suspended의 값이 true라면, 즉 잠시 실행을 멈추게 한 상태라면, 쓰레드는
주어진 실행시간을 그저 while문을 의미없이 돌면서 낭비하게 될 것이다. 이런 상황을 '바쁜 대기상태
(busy-waiting)'이라고 한다. 그러나 else가 있는 경우에 yield()를 호출해서 남은 실행시간을
while문에서 낭비하지 않고 다른 쓰레드에게 양보(yield)하게 되므로 더 효율적이다. 

public void suspend(){
  suspended = true;
  th.interrupt();
}
public void stop(){
  stopped = true;
  th.interrupt();
}
만일 stop()이 호출되었을 때 Thread.sleep(1000)에 의해 쓰레드가 일시정지 상태에 머물러 있는
상황이라면, stopped의 값이 true로 바뀌었어도 쓰레드가 정지될 때까지 최대 1초의 시간지연이 생길
것이다. 그러나 같은 상황에서 interrupt()를 호출하면, sleep()에서 InterruptedException이 발생
하여 즉시 일시정지 상태에서 벗어나게 되므로 응답성이 좋아진다. 

join() - 다른 쓰레드의 작업을 기다린다.
쓰레드 자신이 하던 작업을 잠시 멈추고 다른 쓰레드가 지정된 시간동안 작업을 수행하도록 할 때
join()을 사용한다. 작업 중에 다른 쓰레드의 작업이 먼저 수행되어야할 필요가 있을 때 join()을
사용한다.
try{
  th1.join(); // 현재 실행중인 쓰레드가 쓰레드 th1의 작업이 끝날때까지 기다린다.
}catch(InterruptedException e){}

join()도 sleep()처럼 interrupt()에 의해 대기상태에서 벗어날 수 있으며, join()이 호출되는 부분을
try-catch문으로 감싸야 한다. join()은 여러모로 sleep()과 유사한 점이 많은데, sleep()과 다른
점은 join()은 현재 쓰레드가 아닌 특정 쓰레드에 대해 동작하므로 static메서드가 아니라는 것이다.

싱글쓰레드 프로세스의 경우 프로세스 내에서 단 하나의 쓰레드만 작업하기 때문에 프로세스의 자원을
가지고 작업하는데 별문제가 없지만, 멀티쓰레드 프로세스의 경우 여러 쓰레드가 같은 프로세스 내의 자
원을 공유해서 작업하기 때문에 서로의 작업에 영향을 주게 된다. 만일 쓰레드A가 작업하던 도중에 다
른 쓰레드B에게 제어권이 넘어갔을 때, 쓰레드 A가 작업하던 공유데이터를 쓰레드B가 임의로 변경하였다
면,다시 쓰레드 A가 제어권을 받아서 나머지 작업을 마쳤을 때 원래 의도했던 것과는 다른 결과를 얻을 
수 있다. 이러한 일이 발생하는 것을 방지하기 위해서 한 쓰레드가 특정 작업을 끝마치기 전까지 다른
쓰레드에 의해 방해받지 않도록 하는 것이 필요하다. 그래서 도입된 개념이 바로 '임계 영역(critical
section)'과 '잠금(락, lock)'이다.
공유 데이터를 사용하는 코드 영역을 임계 영역으로 지정해놓고, 공유 데이터(객체)가 가지고 있는
lock을 획득한 단 하나의 쓰레드만 이 영역 내의 코드를 수행할 수 있게 한다. 그리고 해당 쓰레드가
임계 영역 내의 모든 코드를 수행하고 벗어나서 lock을 반납해야만 다른 쓰레드가 반납된 lock을 획득
하여 임계 영역의 코드를 수행할 수 있게 된다. 이처럼 한 쓰레드가 진행 중인 작업을 다른 쓰레드가
간섭하지 못하도록 막는 것을 '쓰레드의 동기화(synchronization)'라고 한다. 자바에서는 synchronized
블럭을 이용해서 쓰레드의 동기화를 지원했지만, JDK1.5부터는 'java.util.concurrent.locks'와 
'java.util.concurrent.atomic'패키지를 통해서 다양한 방식으로 동기화를 구현할 수 있도록 지원하고 
있다.

synchronized를 이용한 동기화
1. 메서드 전체를 임계 영역으로 지정
public synchronized void calcSum(){
  ...
}
2. 특정한 영역을 임계 영역으로 지정
synchronized(객체의 참조변수){
  ...
}
1번은 메서드 앞에 synchronized를 붙이는 것인데, synchronized를 붙이면 메서드 전체가 임계 영역으로
설정된다. 쓰레드는 synchronized메서드가 호출된 시점부터 해당 메서드가 포함된 객체의 lock을 얻어
작업을 수행하다가 메서드가 종료되면 lock을 반환한다.
2번은 메서드 내의 코드 일부를 블럭{}으로 감싸고 블럭 앞에 'synchronized(참조변수)'를 붙이는 것인
데, 이때 참조변수는 락을 걸고자하는 객체를 참조하는 것이어야 한다. 이 블럭을 synchronized블럭이라
고 부르며, 이 블럭의 영역 안으로 들어가면서부터 쓰레드는 지정된 객체의 lock을 얻게 되고, 이 블럭
을 벗어나면 lock을 반납한다. 두 방법 모두 lock의 획득과 반납이 모두 자동적으로 이루어지므로 우리
가 해야 할 일은 그저 임계 영역만 설정해주는 것뿐이다. 모든 객체는 lock을 하나씩 가지고 있으며,
해당 객체의 lock을 가지고 있는 쓰레드만 임계 영역의 코드를 수행할 수 있다. 그리고 다른 쓰레드들은
lock을 얻을 때까지 기다리게 된다. 임계 영역은 멀티쓰레드 프로그램의 성능을 좌우하기 때문에 가능하
면 메서드 전체에 락을 거는 것보다 synchronized블럭으로 임계 영역을 최소화해서 보다 효율적인 프로
그램이 되도록 노력해야 한다.

class ThreadEx{
  public static void main(String args[]){
    Runnable r = new RunnableEX();
    new Thread(r).start();
    new Thread(r).start();
  }
}
class Account{
  private int balance = 1000; //private으로 해야 동기화가 의미가 있다.
  public int getBalance(){
    return balance;
  }
  public synchronized void withdraw(int money){ // synchronzied로 메서드를 동기화
    if(balance >=money){
      try{ Thread.sleep(1000); }catch(InterruptedException e){}
      balance -=money;
    }
  }  
}
class RunnableEx implements Runnable{
  Account acc = new Account();
  public void run(){
    while(acc.getBalance() > 0){
    //100, 200, 300 중의 한 값을 임의로 선택해서 출금(withdraw)
    int money = (int)(Math.random() * 3 + 1) * 100;
    acc.withdraw(money);
    System.out.println("balance : " + acc.getBalance());
    }
  }
}
Account클래스의 인스턴스변수인 balance의 접근 제어자가 private이다. 만일 private이 아니면,
외부에서 직접 접근할 수 있기 때문에 아무리 동기화를 해도 이 값의 변경을 막을 길이 없다. 
synchronized를 이용한 동기화는 지정된 영역의 코드를 한 번에 하나의 쓰레드가 수행하는 것을 보장하
는 것일 뿐이기 때문이다.

synchronized로 동기화해서 공유 데이터를 보호하는 것까진 좋은데, 특정 쓰레드가 객체의 락을 가진
상태로 오랜 시간을 보내지 않도록 하는 것도 중요하다. 만일 계좌에 출금할 돈이 부족해서 다른 쓰레드
들은 모두 해당 객체의 락을 기다리느라 다른 작업들도 원활히 진행되지 않을 것이다. 이러한 상황을
개선하기 위해 고안된 것이 바로 wait()과 notify()이다. 동기화된 임계 영역의 코드를 수행하다가 작업
을 더 이상 진행할 상황이 아니면, 일단 wait()을 호출하여 쓰레드가 락을 반납하고 기다리게 한다. 그
러면 다른 쓰레드가 락을 얻어 해당 객체에 대한 작업을 수행할 수 있게 된다. 나중에 작업을 진행할 수
있는 상황이 되면, notify()를 호출해서, 작업을 중단했던 쓰레드가 다시 락을 얻어 작업을 진행할 수
있게 한다.
이는 마치 빵을 사려고 빵집 앞에 줄을 서있는 것과 유사한데, 자신의 차례가 되었는데도 자신이 원하
는 빵이 나오지 않았으면, 다음 사람에게 순서를 양보하고 기다리다가 자신이 원하는 빵이 나오면 통보
를 받고 빵을 사가는 것이다. 차이가 있다면, 오래 기다린 쓰레드가 락을 얻는다는 보장이 없다는 것이
다. wait()이 호출되면, 실행 중이던 쓰레드는 해당 객체의 대기실(waiting pool)에서 통지를 기다린다.
notify()가 호출되면, 해당 객체의 대기실에 있던 모든 쓰레드 중에서 임의의 쓰레드만 통지를 받는다.
notifyAll()은 기다리고 있는 모든 쓰레드에게 통보를 하지만, 그래도 lock을 얻을 수 있는 것은 하나의
쓰레드일 뿐이고 나머지는 통보를 받긴 했지만, lock을 얻지 못하면 다시 lock을 기다리는 신세가 된다.
wait()과 notify()는 특정 객체에 대한 것이므로 Object클래스에 정의되어 있다.
waiting pool은 객체마다 존재하는 것이므로 notifyAll()이 호출된다고 해서 모든 객체의 waiting pool
에 있는 쓰레드가 깨워지는 것은 아니다. notifyAll()이 호출된 객체의 waiting pool에 대기 중인 쓰레
드만 해당된다.

wait(), notify(), notifyAll()
- Object에 정의되어 있다.
- 동기화 블록(synchronized블록)내에서만 사용할 수 있다.
- 보다 효율적인 동기화를 가능하게 한다.


import java.util.ArrayList;
class Customer implements Runnable{
    private Table table;
    private String food;

    Customer(Table table, String food){
        this.table = table;
        this.food = food;
    }
    @Override
    public void run(){
        while(true){
            try{Thread.sleep(100);}catch(InterruptedException e){}
            String name = Thread.currentThread().getName();
            table.remove(food);
            System.out.println(name + " ate a " + food);
        }
    }
}class Cook implements Runnable{
    private Table table;
    Cook(Table table){this.table = table;}

    @Override
    public void run() {
        while(true){
            int idx = (int)(Math.random()*table.dishNum());
            table.add(table.dishNames[idx]);
            try{Thread.sleep(10);}catch(InterruptedException e){}
        }
    }
}
class Table{
    String[] dishNames = {"donut", "donut", "burger" };
    //donut의 확률을 높인다.
    final int MAX_FOOD = 6;
    private ArrayList<String> dishes = new ArrayList<>();
    public synchronized void add(String dish){
        while(dishes.size() >= MAX_FOOD){
            String name = Thread.currentThread().getName();
            System.out.println(name + " is waiting.");
            try{
                wait(); //COOK쓰레드를 기다리게 한다.
                Thread.sleep(500);
            }catch(InterruptedException e){}
    }
        dishes.add(dish);
        notify(); //기다리고 있는 CUST를 깨우기 위함.
        System.out.println("Dishes:" + dishes.toString());
    }
    public void remove(String dishName){
    synchronized (this){
        String name = Thread.currentThread().getName();
        while(dishes.size()==0){
            System.out.println(name + " is waiting.");
            try{
                wait(); //CUST쓰레드를 기다리게 한다.
                Thread.sleep(500);
            }catch(InterruptedException e){}
        }
        while(true){
            for(int i=0; i<dishes.size(); i++){
                if(dishName.equals(dishes.get(i))){
                    dishes.remove(i);
                    notify(); //잠자고 있는 COOK을 깨우기 위함
                    return;
                }
            }
            try{
                System.out.println(name + " is waiting.");
                wait(); //원하는 음식이 없는 CUST쓰레드를 기다리게 한다.
                Thread.sleep(500);
            }catch (InterruptedException e){}
        }
    }
    }
    public int dishNum() {return dishNames.length;}
}
public class ThreadEx {
    public static void main(String[] args) throws Exception{
        Table table = new Table();

        new Thread(new Cook(table), "COOK1").start();
        new Thread(new Customer(table, "donut"), "CUST1").start();
        new Thread(new Customer(table, "burger"), "CUST2").start();
        Thread.sleep(2000);
        System.exit(0);
    }

}
한 가지 문제가 있다. 테이블 객체의 waiting pool에 요리사 쓰레드와 손님 쓰레드가 같이 기다린다는 
것이다. 그래서 notify()가 호출되었을 때, 요리사 쓰레드와 손님 쓰레드 중에서 누가 통지를 받을지 알
수 없다. 만일 테이블의 음식이 줄어들어서 notify()가 호출되었다면, 요리사 쓰레드가 통지를 받아야
한다. 그러나 notify()는 그저 waiting pool에서 대기 중인 쓰레드 중에서 하나를 임의로 선택해서 통지
할 뿐, 요리사 쓰레드를 선택해서 통지할 수 없다. 운 좋게 요리사 쓰레드가 통지를 받으면 다행인데, 
손님 쓰레다 통지를 받으면 lock을 얻어도 여전히 자신이 원하는 음식이 없어서 다시 waiting pool에 들
어가게 된다.
지독히 운이 나쁘면 요리사 쓰레드는 계속 토지를 받지 못하고 오랫동안 기다리게 되는데, 이것을 '기아
(starvation) 현상'이라고 한다. 이 현상을 막으려면, notify()대신 notifyAll()을 사용해야 한다.
일단 모든 쓰레드에게 통지를 하면, 손님 쓰레드는 다시 waiting pool에 들어가더라도 요리사 쓰레드는 
결국 lock을 얻어서 작업을 진행할 수 있기 때문이다. notifyAll()로 요리사 쓰레드의 기아현상은 막았
지만, 손님 쓰레드까지 통지를 받아서 불필요하게 요리사 쓰레드와 lock을 얻기 위해 경쟁하게 된다. 이
처럼 여러 쓰레드가 lock을 얻기 위해 서로 경쟁하는 것을 '경쟁 상태(race condition)'라고 하는데, 이
경쟁 상태를 개선하기 위해서는 요리사 쓰레드와 손님 쓰레드를 구별해서 통지하는 것이 필요하다. 
Lock과 Condition을 이용하면, wait() & notify()로는 불가능한 선별적인 통지가 가능하다.

Lock과 Condition을 이용한 동기화 //필요할 때 추가

멀티 코어 프로세서에서는 코어마다 별도의 캐시를 가지고 있다. 코어는 메모리에서 읽어온 값을 캐시에
저장하고 캐시에서 값을 읽어서 작업한다. 다시 같은 값을 읽어올 때는 먼저 캐시에 있는지 확인하고 없
을 때만 메모리에서 읽어온다. 그러다보니 도중에 메모리에 저장된 변수의 값이 변경되었는데도 캐시에 
저장된 값이 갱신되지 않아서 메모리에 저장된 값이 다른 경우가 발생한다. 
변수 앞에 volatile을 붙이면, 코어가 변수의 값을 읽어올 때 캐시가 아닌 메모리에서 읽어오기 때문에
캐시와 메모리간의 값의 불일치가 해결된다. 

volatile boolean suspended = false;
volatile boolean stopped = false;

변수에 volatile을 붙이는 대신에 synchronized블럭을 사용해도 같은 효과를 얻을 수 있다. 쓰레드가
synchronized블럭으로 들어갈 때와 나올 때, 캐시와 메모리간의 동기화가 이루어지기 때문에 값의 불일
치가 해소되기 때문이다.

public synchronized void stop(){
  stopped = true;
}

JVM은 데이터를 4 byte(=32bit)단위로 처리하기 때문에, int와 int보다 작은 타입들은 한 번에 읽거나 
쓰는 것이 가능하다. 즉, 단 하나의 명령어로 읽거나 쓰기가 가능하다는 뜻이다. 하나의 명령어는 더이
상 나눌 수 없는 최소의 작업단위이므로, 작업의 중간에 다른 쓰레드가 끼어들 틈이 없다.
그러나, 크기가 8 byte인 long과 double타입의 변수는 하나의 명령어로 값을 읽거나 쓸 수 없기 때문
에, 변수의 값을 읽는 과정에 다른 쓰레드가 끼어들 여지가 있다. 다른 쓰레드가 끼어들지 못하게 하려
고 변수를 읽고 쓰는 모든 문장을 synchronized블럭으로 감쌀 수도 있지만, 더 간단한 방법이 있다. 변
수를 선언할 때 volatile을 붙이는 것이다. 상수에는 volatile을 붙일 수 없다. 사실 상수는 변하지 않
는 값이므로 멀티쓰레드에 안전(thread-safe)하다.

volatile long sharedVal; //long타입의 변수(8 byte)를 원자화
volatile double sharedVal; //double타입의 변수(8 byte)를 원자화

volatile은 해당 변수에 대한 읽거나 쓰기가 원자화된다. 원자화라는 것은 작업을 더 이상 나눌 수 없
게 한다는 의미인데, synchronized블럭도 일종의 원자화라고 할 수 있다. 즉, synchronized블럭은 여
러 문장을 원자화함으로써 쓰레드의 동기화를 구현한 것이라고 보면 된다.
volatile은 변수의 읽거나 쓰기를 원자화 할 뿐, 동기화하는 것은 아니라는 점에 주의하자. 동기화가
필요할 때 synchronized블럭 대신 volatile을 쓸 수 없다.

volatile long balance; //인스턴스 변수 balance를 원자화한다.
synchronized int getBalance(){ //balance의 값을 반환한다.
  return balance;
}
synchronized void withdraw(int money){ //balance의 값을 변경
  if(balance >= money){
    balance -= money;
  }
}
인스턴스변수 balance를 volatile로 원자화했으니까, 이 값을 읽어서 반환하는 메서드 getBalance()를 
동기화할 필요가 없다고 생각할 수 있다. 그러나 getBalance()를 synchronized로 동기화하지 않으면, 
withdraw()가 호출되어 객체에 lock을 걸고 작업을 수행하는 중인데도 getBalance()가 호출되는 것이 가
능해진다. 출금이 진행 중일 때는 기다렸다가 출금이 끝난 후에 잔고를 조회할 수 있도록 하려면 
getBalance()에 synchronized를 붙여서 동기화를 해야 한다.

fork & join 프레임 웍 // 필요할 때 추가
