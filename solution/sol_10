예외 처리를 언제,왜 하는지

프로그램이 실행 중 어떤 원인에 의해서 오작동을 하거나 비정상적으로 종료되는 경우가 있다. 이러한 결과를 초래하는 원인을
프로그램 에러 또는 오류라고 한다.

컴파일 에러는 컴파일 시에 발생하는 에러
런타임 에러는 실행 시에 발생하는 에러
논리적 에러는 실행은 되지만, 의도와 다르게 동작하는 것을 의미한다.

런타임 에러를 방지하기 위해서는 프로그램의 실행도중 발생할 수 있는 모든 경우의 수를 고려하여 이에 대한 대비를 하는 것이 필요하다.
자바에서는 실행 시(runtime) 발생할 수 있는 프로그램 오류를 '에러(error)'와 예외(exception)' 두 가지로 구분하였다.
에러는 메모리 부족(OutOfMemoryError)이나 스택오버플로우(StackOverflowError)와 같이 일단 발생하면 복구할 수 없는 심각한 오류이고,
예외는 발생하더라도 수습될 수 있는 비교적 덜 심각한 것이다.

에러가 발생하면, 프로그램의 비정상적인 종료를 막을 길이 없지만, 예외는 발생하더라도 프로그래머가 이에 대한 적절한 코드를 미리 작성해
놓음으로써 프로그램의 비정상적인 종료를 막을 수 있다.

자바에서는 실행 시 발생할 수 있는 오류(Exception과 Error)를 클래스로 정의하였다. 모든 클래스의 조상은 Object클래스이므로 Exception과
Error클래스 역시 Object클래스의 자손들이다.
예외 클래스들은 다음과 같이 두 그룹으로 나눠질 수 있다.
1. Exception클래스와 그 자손들 
2. RuntimeException클래스와 그 자손들

Exception클래스들은 주로 외부의 영향으로 발생할 수 있는 것들로서, 프로그램의 사용자들의 동작에 의해서 발생하는 경우가 많다.
RuntimeException클래스들은 주로 프로그래머의 실수에 의해서 발생될 수 있는 예외들로 자바의 프로그래밍 요소들과 관계가 깊다.

예외처리의 목적은 예외의 발생으로 인한 실행 중인 프로그램의 갑작스런 비정상 종료를 막고, 정상적인 실행상태를 유지할 수 있도록 하는 것이다.

예외가 발생했을 때 생성되는 예외 클래스의 인스턴스에는 발생한 예외에 대한 정보가 담겨있으며, getMessage()와 printStackTrace()를 통해서
예외의 발생원인을 알 수 있다. catch블럭의 괄호()에 선언된 참조변수를 통해 이 인스턴스에 접근할 수 있다.

여러 catch블럭을 '|'기호를 이용해서, 하나의 catch블럭으로 합쳐 중복된 코드를 줄일 수 있는데, 만일 이 멀티 catch블럭의 '|'로 연결된 예외
클래스가 조상과 자손의 관계에 있다면 컴파일 에러가 발생한다. 두 예외 클래스가 조상과 자손의 관계에 있다면 조상클래스만 써주는 것과 똑같기
때문이다.

키워드 throw를 사용해서 프로그래머가 고의로 예외를 발생시킬 수 있다. 주로 비즈니스 로직을 구현하는 과정 중 컴파일에는 문제가 없지만 해당 
비지니스 로직이 개발자가 의도한 대로 통과하지 못했을 경우 고의로 예외를 발생시켜야 할 때 사용한다.

public class ExceptionTest {
	public static void main(String[] args) {
		int a = 5;
		int b = 0;
		divide(a,b);
	}

	public static int divide(int a, int b) {
		if (b == 0) {
			throw new ArithmeticException("0으로 나눌 수 없습니다.");
		}
		return a / b;
	}
}
 만약 인자 값 a가 5인 경우 throw 키워드를 통해 강제로 예외 발생시킬 수도 있다. 이처럼 throw 키워드를 사용하면 프로그래머의 판단에 따라 강제로 
 예외를 발생시킬 수 있다.
 'RuntimeException클래스와 그 자손들'에 해당하는 예외는 프로그래머에 의해 실수로 발생하는 것들이기 때문에 예외처리를 강제하지 않는다.
 컴파일러가 예외처리를 확인하지 않는 RuntimeException클래스와 그 자손들은 'unchecked예외'라고 부르고, 예외처리를 확인하는 Exception클래스와 그 자손들
 은 'checked예외'라고 부른다.
 
 메서드에 키워드 throws를 사용해서 예외를 메서드에 선언하는 방법이 있다. 메서드의 선언부에 예외를 선언함으로써 메서드를 사용하려는 사람이 메서드
 의 선언부를 보았을 때, 이 메서드를 사용하기 위해서는 어떠한 예외들이 처리되어져야 하는지 쉽게 알 수 있다. 
 예외를 메서드의 throws에 명시하는 것은 예외를 처리하는 것이 아니라, 자신(예외가 발생할 가능성이 있는 메서드)을 호출한 메서드에게 예외를 전달
 하여 예외처리를 떠맡기는 것이다. 여러가지 발생 가능한 예외들을 호출한 메서드에서 한 번에 처리할 수 있게 하여 관리를 용이하게 해줄 수 있다.
 
 import java.io.*;
 
 class ExceptionEx{
  public static void main(String[] args){
    try{
      File f = createFile(args[0]);
      System.out.println(f.getName() + "파일이 성공적으로 생성되었습니다.");
    }catch(Exception e){
      System.out.println(e.getMessage() + "다시 입력해 주시기 바랍니다.");
    }
  }
  
  static File createFile(String fileName) throws Exception{
    if(fileName==null || fileName.equals(""))
      throw new Exception("파일이름이 유효하지 않습니다.");
    File f = new File(fileName); //File클래스의 객체를 만든다.
    f.createNewFile(); //File객체의 createNewFile메서드를 이용해서 실제 파일을 생성한다.
    return f; //생성된 객체의 참조를 반환한다.
  }
 }
 
 예외가 발생한 메서드 내에서 자체적으로 처리해도 되는 것은 메서드 내에서 try-catch문을 사용해서 처리하고, 메서드에 호출 시 넘겨받아야 할 값(fileName)
 을 다시 받아야 하는 경우(메서드 내에서 자체적으로 해결이 안 되는 경우)에는 예외를 메서드에 선언해서, 호출한 메서드에서 처리해야한다.
 
 예외의 발생여부에 상관없이 실행되어야할 코드를 포함시킬 목적으로 finally블럭을 사용한다.
 
 //try with resources문 추가//
 
 자바 표준 API에서 제공하는 예외 클래스만으로는 다양한 종류의 예외를 표현할 수 없다.
 예를 들어 은행 업무 처리에서 잔고보다 많은 출금 요청시, 오류! 잔고 부족 예외는 표준 API에 존재하지 않는다.
 요즘은 예외처리를 선택적으로 할 수 있도록 RuntimeException을 상속받아서 작성하는 쪽으로 바뀌어가고 있다.
 그러나 가능하면 새로운 예외 클래스를 만들기보다 기존의 예외클래스를 활용한다.
 
 한 메서드에서 발생할 수 있는 예외가 여럿인 경우, 몇개는 try-catch문을 통해서 메서드 내에서 자체적으로 처리하고, 그 나머지는 선언부에 지정하여
 호출한 메서드에서 처리하도록 함으로써, 양쪽에서 나눠서 처리되도록 할 수 있다.
 심지어 단 하나의 예외에 대해서도 예외가 발생한 메서드와 호출한 메서드, 양쪽에서 처리하도록 할 수 있다. 
 이것은 예외를 처리한 후에 인위적으로 다시 발생시키는 방법을 통해서 가능한데, 이것을 '예외 되던지기(exception re-throwing)'이라고 한다.
 
 먼저 예외가 발생할 가능성이 있는 메서드에서 try-catch문을 사용해서 예외를 처리해주고 catch문에서 필요한 작업을 행한 후에 throw문을 사용해서 예외를
 다시 발생시킨다. 다시 발생한 예외는 이 메서드를 호출한 메서드에게 전달되고 호출한 메서드의 try-catch문에서 예외를 또 다시 처리한다.
 이 방법은 하나의 예외에 대해서 예외가 발생한 메서드와 이를 호출한 메서드 양쪽 모두에서 처리해줘야 할 작업이 있을 때 사용된다. 이 때 주의할 점은
 예외가 발생할 메서드에서는 try-catch문을 사용해서 예외처리를 해줌과 동시에 메서드의 선언부에 발생할 예외를 throws에 지정해줘야 한다는 것이다.
 반환값이 있는 return문의 경우, catch블럭에도 return문이 있어야 한다. 예외가 발생했을 경우에도 값을 반환해야하기 때문이다.
 
 한 예외가 다른 예외를 발생시킬 수도 있다. 예를 들어 예외 A가 예외 B를 발생시켰다면, A를 B의 '원인 예외(cause exception)'라고 한다. 
 발생한 예외를 그냥 처리하면 될 텐데, 원인 예외로 등록해서 다시 예외를 발생시키는 이유는 여러가지 예외를 하나의 큰 분류의 예외로 묶어서 다루기 위해서이다.
 
 try{
  startInstall(); //SpaceException발생
  copyFiles();
 }catch(SpaceException e){
  InstallException ie = new InstallException("설치중 예외발생"); //예외 생성
  ie.initCause(e); //InstallException의 원인 예외를 SpaceException으로 지정
  throw ie; //InstallException을 발생시킨다.
 }catch(MemoryException me){
 ...
 
 initCause()는 Exception클래스의 조상인 Throwable클래스에 정의되어 있기 때문에 모든 예외에서 사용가능하다.
 
 Throwable initCuase(Throwable cause) 지정한 예외를 원인 예외로 등록
 Throwable getCause() 원인 예외르 반환
 
 또 다른 이유는 checked예외를 unchecked예외로 바꿀 수 있도록 하기 위해서이다. checked예외를 unchecked예외로 바꾸면 예외처리가 선택적이 되므로 
 의미없는 try-catch문을 추가하지 않아도 된다.
 
 static void startInstall() throws SpaceException{
  if(!enoughSpace())
    throw new SpaceException("설치할 공간이 부족합니다");
  if(!enoughMemory())
    throw new RuntimeException(new MemoryException("메모리가 부족합니다."));
 }
 
