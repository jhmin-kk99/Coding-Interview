java.lang 패키지와 유용한 클래스들

1 java.lang 패키지
1.1 Object클래스
1.2 String클래스
1.3 StringBuffer, StringBuilder클래스 
1.4 Math클래스
1.5 Wrapper클래스

2 유용한 클래스
2.1 java.util.Objects클래스
2.2 java.util.Random클래스
2.3 정규식(Regular Expression) - java.util.regex패키지
2.4 java.util.Scanner클래스
2.5 java.util.StringTokenizer클래스
2.6 java.math.BigInteger클래스
2.7 java.math.BigDecimal클래스



java.lang 패키지
1.1
equals(Object obj)
매개변수로 객체의 참조변수를 받아서 비교하여 그 결과를 booean값으로 알려주는 역할을 한다.
  public boolean equals(Object obj){
    return (this==obj);
  }
서로 다른 두 객체를 equals메서드로 비교하면 항상 false를 결과로 얻게 된다.
equals메서드로 인스턴스가 가지고 있는 값을 비교하려면 오버라이딩을해서 주소가 아닌 객체에 저장된 내용을 비교하도록 변경하면 된다.

class Card{
  String kind;
  int number;
  
  Card(){
    this("SPADE" , 1);
  }
  Card(String kind, int number){
    this.kind = kind;
    this.number = number;
  }
  
  public boolean equals(Object obj){ //오버라이딩
    if(!(obj instanceof Card))
      return false;
    Card c = (card)obj;
    return this.kind.equals(c.kind) && this.number == c.number;
  }
}

hashCode()
이 메서드는 해싱(hashing)기법에 사용되는 '해시함수(hash function)'를 구현한 것이다.
해싱은 데이터관리기법 중의 하나인데 다량의 데이터를 저장하고 검색하는 데 유용하다.
해시함수는 찾고자하는 값을 입력하면, 그 값이 저장된 위치를 알려주는 해시코드(hash code)를 반환한다.
일반적으로 해시코드가 같은 두 객체가 존재하는 것이 가능하지만, Object클래스에 정의된 hashCode메서드는 객체의 주소값으로 해시코드를 만들어 int(4 byte)
반환하기 때문에 32bit JVM에서는 서로 다른 두 객체는 결코 같은 해시코드를 가질 수 없었지만, 64 bit JVM에서는 8 byte 주소값(long)으로 해시코드(4 byte)를
만들기 때문에 해시코드가 중복될 수 있다.
클래스의 인스턴스변수 값으로 객체의 같고 다름을 판단해야하는 경우라면 equals 메서드 뿐만 아니라 hashCode메서드도 적절히 오버라이딩해야 한다.
같은 객체라면 hashCode메서드를 호출했을 때의 결과값인 해시코드도 같아야 하기 때문이다.

class Card{
  String kind;
  int number;
  
  Card(){
    this("SPADE" , 1);
  }
  Card(String kind, int number){
    this.kind = kind;
    this.number = number;
  }
  
  public boolean equals(Object obj){ //오버라이딩
    if(!(obj instanceof Card))
      return false;
    Card c = (card)obj;
    return this.kind.equals(c.kind) && this.number == c.number;
  }
  
  public int hashCode(){ //오버라이딩
    return Objects.hash(kind,number); //매개변수가 가변인자라서 호출 시 지정하는 값의 개수가 정해져있지 않다.
  }
}
toString()
이 메서드는 인스턴스에 대한 정보를 문자열(String)로 제공할 목적으로 정의한 것이다.
인스턴스의 정보를 제공한다는 것은 대부분의 경우 인스턴스 변수에 저장된 값들을 문자열로 표현한다는 뜻이다.

public String toString(){
  return getClass().getName()+"@"+Integer.toHexString(hashCode());
}
클래스를 작성할 때 toString()을 오버라이딩하지 않는다면, 위와 같은 내용이 그대로 사용될 것이기 때문에 주로 아래와 같이 오버라이딩 한다.

public String toString(){
  return "kind : " + kind + ", number : " + number;
}

1.2
기존의 다른 언어에서는 문자열을 char형의 배열로 다루었으나 자바에서는 문자열을 위한 클래스를 제공한다.(String 클래스)

한번 생성된 String인스턴스가 갖고 있는 문자열은 읽어 올 수만 있고, 변경할 수는 없다.

String a = "a";
String b = "b";
a = a + b;

'+'연산자를 이용해서 문자열을 결합하는 경우 인스턴스 내의 문자열이 바뀌는 것이 아니라 새로운 문자열 ("ab")이 담긴 String인스턴스가
생성된다. 이처럼 문자열을 결합하는 것은 매 연산 시 마다 새로운 문자열을 가진 String인스턴스가 생성되어 메모리공간을 차지하게 되므로
가능한 한 결합횟수를 줄이는 것이 좋다. 
문자열간의 결합이나 추출 등 문자열을 다루는 작업이 많이 필요한 경우에는 String클래스 대신 StringBuffer클래스를 사용하는 것이 좋다.
StringBuffer인스턴스에 저장된 문자열은 변경이 가능하므로 하나의 StringBuffer인스턴스만으로도 문자열을 다루는 것이 가능하다.

문자열을 만들 때는 문자열 리터럴을 지정한느 방법과 String클래스의 생성자를 사용해서 만드는 방법이 있다.
String클래스의 생성자를 이용한 경우에는 new연산자에 의해서 메모리할당이 이루어지기 때문에 항상 새로운 String인스턴스가 생성된다.
그러나 문자열 리터럴은 이미 존재하는 것을 재사용하는 것이다.(문자열 리터럴은 클래스가 메모리에 로드될 때 자동적으로 미리 생성된다.)
equals()를 사용하여 두 문자열을 비교한다.

자바 소스파일에 포함된 모든 문자열 리터럴은 컴파일 시에 클래스 파일에 저장된다. 이 때 같은 내용의 문자열 리터럴은 한번만 저장된다.
문자열 리터럴도 String인스턴스이고, 한번 생성하면 내용을 변경할 수 없으니, 하나의 인스턴스를 공유하면 되기 때문이다.

class StringEx{
  public static void main(String args[]){
    String s1 = "AAA";
    String s2 = "AAA";
    String s3 = "AAA";  
  }
}

"AAA"를 담고 있는 String인스턴스가 하나 생성된 후, 참조변수 s1,s2,s3는 모두 이 String인스턴스를 참조하게 된다.
클래스 파일에는 소스파일에 포함된 모든 리터럴의 목록이 있다. 해당 클래스 파일이 클래스 로더에 의해 메모리에 올라갈 때, 이 리터럴의 목록에 있는
리터럴들이 JVM내에 있는 '상수 저장소(constant pool)'에 저장된다. 이 때, 이곳에 "AAA"와 같은 문자열 리터럴이 자동적으로 생성되어 저장된다.

자바에서는 길이가 0인 배열이 존재할 수 있다. char형 배열도 길이가 0인 배열을 생성할 수 있고, 이 배열을 내부적으로 가지고 있는 문자열이
빈 문자열이다.

String s = "";

참조변수 s가 참조하고 있는 String인스턴스는 내부에 new char[0]과 같이 길이가 0인 char형 배열을 저장하고 있는 것이다.
일반적으로 변수를 선언할 때, 각 타입의 기본값으로 초기화 하지만, String과 char형은 다음과 같이 초기화한다.

String s = "";
char c = ' ';

1.3
String클래스는 인스턴스를 생성할 때 지정된 문자열을 변경할 수 없지만 StringBuffer클래스는 변경이 가능하다.
내부적으로 문자열 편집을 위한 버퍼(buffer)를 가지고 있으며, StringBuffer인스턴스를 생성할 때 그 크기를 지정할 수 있다. 
편집할 문자열의 길이를 고려하여 버퍼의 길이를 충분히 잡아주는 것이 좋다. 편집 중인 문자열이 버퍼의 길이를 넘어서게 되면 버퍼의 길이를 늘려주는
작업이 추가로 수행되어야하기 때문에 작업효율이 떨어진다.
String클래스에서는 equals메서드를 오버라이딩해서 문자열의 내용을 비교하도록 구현되어 있지만, StringBuffer클래스는 equals메서드를 오버라이딩
하지 않아서 등가비교연산자(==)로 비교한 것과 같은 결과를 얻는다.
반면에 toString()은 오버라이딩되어 있어서 StringBuffer인스턴스에 toString()을 호출하면, 담고있는 문자열을 String으로 반환한다.
StringBuffer인스턴스에 담긴 문자열을 비교하기 위해서는 다음과 같이 한다.

StringBuffer sb = new StringBuffer("abc");
StringBuffer sb2 = new StringBuffer("abc");

String s = sb.toString();
String s2 = sb2.toString();

System.out.println(s.equals(s2));

StringBuffer는 멀티쓰레드에 안전(thread safe)하도록 동기화되어 있다. 멀티쓰레드로 작성된 프로그램이 아닌 경우, StringBuffer의 동기화는
불필요하게 성능만 떨어뜨리게 된다. 그래서 StringBuffer에서 쓰레드의 동기화만 뺀 StringBuilder가 새로 추가되었다.
StringBuilder는 StringBuffer와 완전히 똑같은 기능으로 작성되어 있어서, 소스코드에서 StringBuffer대신 StringBuilder를 사용하도록 바꾸기만 하면
된다. 즉, StringBuffer타입의 참조변수를 선언한 부분과 StringBuffer의 생성자만 바꾸면 된다는 말이다.

1.4
Math클래스는 기본적인 수학계산에 유용한 메서드로 구성되어 있다. Math클래스의 생성자는 접근 제어자가 private이기 때문에 다른 클래스에서 Math
인스턴스를 생성할 수 없도록 되어있다. 클래스 내에 인스턴스변수가 하나도 없어서 인스턴스를 생성할 필요가 없기 때문이다.
Math클래스의 메서드는 모두 static이며, 2개의 상수만 정의해 놓았다.

public static final double E = 2.71.... //자연로그의 밑
public static final double PI = 3.14.... //원주율


1.5
객체지향 개념에서 모든 것은 객체로 다루어져야 한다. 그러나 자바에서는 8개의 기본형을 객체로 다루지 않는다. 때로는 기본형(primitive type) 변수도 
어쩔 수 없이 객체로 다뤄야 하는 경우가 있다. 예를 들면, 매개변수로 객체를 요구할 때, 기본형 값이 아닌 객체로 저장해야할 때, 객체 간의 비교가 필요
할 때 등등의 경우에는 기본형 값들을 객체로 변환하여 작업을 수행해야 한다.
이 때 사용되는 것이 래퍼(wrapper)클래스이다. 8개의 기본형을 대표하는 8개의 래퍼클래스가 있는데, 이 클래스들을 이용하면 기본형 값을 객체로 다룰 수 있다.

래퍼클래스들은 모두 equals()가 오버라이딩되어 있어서 주소값이 아닌 객체가 가지고 있는 값을 비교한다. 오토박싱이 된다고 해도 Integer객체에 비교연산자를
사용할 수 없다. 대신 compareTo()를 제공한다.
toString()도 오버라이딩되어 있엇너 객체가 가지고 있는 값을 문자열로 변환하여 반환한다. 이 외에도 래퍼 클래스들은 MAX_VALUE, MIN_VALUE, SIZE, BYTES,
TYPE 등의 static상수를 공통적으로 가지고 있다.

JDK1.5이전에는 기본형과 참조형 간의 연산이 불가능했기 때문에, 래퍼 클래스로 기본형을 객체로 만들어서 연산해야 했다. 

int i = 5;
Integer iObj = new Integer(7);
int sum = i + iObj; //에러. 기본형과 참조형 간의 덧셈 불가(JDK1.5 이전)

이제는 컴파일러가 자동으로 변환하는 코드를 넣어주기 때문에 기본형과 참조형 간의 덧셈이 가능하다.
이 외에도 내부적으로 객체 배열을 가지고 있는 Vector클래스나 ArrayList클래스에 기본형 값을 저장해야할 때나 형변환이 필요할 때도 컴파일러가 자동적으로 코드를
추가해 준다. 기본형 값을 래퍼 클래스의 객체로 자동 변환해주는 것을 '오토박싱(autoboxing)' , 반대로 변환하는 것을 '언박싱(unboxing)'이라고 한다.

ArrayList<Integer> list = new ArrayList<Integer>();
list.add(10); //오토박싱. 10 -> new Integer(10)

int value = list.get(0); //언박싱. new Integer(10) -> 10

ArrayList에 숫자를 저장하거나 꺼낼 때, 기본형 값을 래퍼 클래스의 객체로 변환하지 않아도 되므로 편리하다.

2.1
Objects클래스의 보조 클래스로 Math클래스처럼 모든 메서드가 'static'이다. 객체의 비교나 널 체크(null check)에 유용하다.
isNull()은 해당 객체가 널인지 확인해서 null이면 true를 반환하고 아니면 false를 반환한다.
requireNonNull()은 해당 객체가 널이 아니어야 하는 경우에 사용한다. 만일 객체가 널이면, NullPointerException을 발생시킨다. 두 번째 매개변수로 지정하는 문자열은
예외의 메시지가 된다.

static <T> T requireNonNull(T obj)
static <T> T requireNonNull(T obj, String message)
static <T> T requireNonNull(T obj, Supplier<String> messageSupplier)

예전 같으면, 매개변수의 유효성 검사를 다음과 같이 해야 하는데, 이제는 requireNonNull()의 호출만으로 간단히 끝낼 수 있다.

void setNema(String name){
  if(name == null)
    throw new NullPointerException("name must not be null");
    
  this.name = name;
}
->
void setName(String name){
  this.name = Objects.requireNonNull(name, "name must not be null");
}

Object클래스에는 두 객체의 등가비교를 위한 equals()만 있지만, Objects에는 compare()가 추가되었다.

static int compare(Object a, Object b, Comparator c)

이 메서드는 a와 b 두 객체를 비교하는데, 두 객체를 비교하는데 사용할 비교 기준이 Comparator이다.

Object클래스에 정의된 equals()는 Objects클래스에도 있는데, 이 메서드의 장점은 null검사를 하지 않아도 된다는 데에 있다.

if(a != null && a.equals(b)){ //a가 null인지 반드시 확인해야 한다.
  ...
}
->
if(Objects.equals(a,b)){ //매개변수의 값이 null인지 확인할 필요가 없다.
  ...
}

equals()의 내부에서 a와 b의 널 검사를 하기 때문에 따로 널 검사를 위한 조건식을 넣지 않아도 된다.

public static boolean equals(Object a, Object b){
  return (a == b) || (a != null && a.equals(b));
}

두 2차원 문자열 배열을 비교할 때, 단순히 equals()를 써서는 비교할 수 없다.
equals()와 반복문을 함께 써야하는데, deepEquals()를 쓰면 간단히 끝난다.

toString()도 내부적으로 널 검사를 한다.
두 번째 메서드는 o가 널일 때, 대신 사용할 값을 지정할 수 있어 유용하다.

static String toString(Object o)
static String toString(Object o, String nullDefault)

hashCode() 역시 내부적으로 널 검사를 한 후에 Object클래스의 hashCode()를 호출할 뿐이다. 단, 널일 때는 0을 반환한다.

static int hashCode(Object o)
static int hash(Object... values)

보통은 클래스에 선언된 인스턴스의 변수들의 hashCode()를 조합해서 반환하도록, hashCode()를 오버라이딩 하는데, 그 대신 매개변수의 타입이 가변
인자인 두 번째 메서드를 사용하면 편리하다.

static import문을 사용해도 OBject클래스의 메서드와 이름이 같은 것들은 충돌이 난다. 그럴 때는 클래스의 이름을 붙여줄 수 밖에 없다.

2.2
1~6사이의 정수를 난수로 얻고자 할 때는 다음과 같다.
int num = (int)(Math.random() * 6) + 1;
int num = new Random().nextInt(6) + 1; //nextInt(6)은 0~6사이의 정수를 반환

Math.random()과 Random의 가장 큰 차이점이라면, 종자값(seed)을 설정할 수 있다는 것이다. 종자값이 같은 Random인스턴스들은 항상 같은 난수를 같은 순서대로
반환한다. 종자값은 난수를 만드는 공식에 사용되는 값으로 같은 공식에 같은 값을 넣으면 같은 결과를 얻는 것처럼 같은 종자값을 넣으면 같은 난수를 얻게 된다.

생성자 Random()은 System.currentTimeMills()(현재시간을 천분의 1초단위로 변환해서 반환한다.)로 하기 때문에 실행할 때마다 얻는 난수가 달라진다.

public Random(){
  this(System.currentTimeMills()); //Random(long seed)를 호출한다.
}
Random(long seed) //매개변수 seed를 종자값으로 하는 Random인스턴스를 생성한다.

자주 사용되는 코드는 메서드로 만들어 놓으면 도움이 되므로 잘 정리해주자.

int[] fillRand(int[] arr, int from, int to)
: 배열 arr을 from과 to범위의 값들로 채워서 반환한다.
int[] fillRand(int[] arr, int[] data)
: 배열 arr을 배열 data에 있는 값들로 채워서 반환한다.
int getRand(int from, int to)
: from과 to범위의 정수(int)값을 반환한다. from과 to 모두 범위에 포함된다.

import java.util.*;

class RandomEx{
  public static void main(String[] args){
    for(int i=0; i<10; i++)
      System.out.print(getRand(5, 10) + ",");
    System.out.println();
    
    int[] result = fillRand(new int[10], new int[]{2, 3, 7, 5});
    
    System.out.println(Arrays.toString(result));
  } 


public static int[] fillRand(int[] arr, int from, int to){
  for(int i=0; i<arr.length; i++)
    arr[i] = getRand(from, to);
  return arr;
}

public static int[] fillRand(int[] arr, int[] data){
  for(int i=0; i<arr.length; i++)
    arr[i] = data[getRand(0, data.length - 1)];
}

public static int getRand(int from, int to){
  return (int)(Math.random() * (Math.abs(to - from) + 1)) + Math.min(from, to);
}

}

데이터베이스에 넣을 테스트 데이터를 만드는 예제이다. 불연속적인 값을 배열에 저장한 후, 배열의 index를 임의로 얻어서 배열에 저장된 값을 읽어
오도록 하면 된다. 

import java.util.*;

class RandomEx{
  final static int RECORD_NUM = 10; //생성할 레코드의 수를 정한다.
  final static String TABLE_NAME = "TEST_TABLE";
  final static String[] CODE1 = {"010", "011", "017", "018", "019"};
  final static String[] CODE2 = {"남자", "여자"};
  final static String[] CODE3 = {"10대", "20대", "30대", "40대", "50대"};
  
  public static void main(String[] args){
    for(int i=0; i<RECORD_NUM; i++){
      System.out.println(" INSERT INTO " + TABLE_NAME
        + " VALUES ("
        + " '" + getRandArr(CODE1) + "'"
        + ", '" + getRandArr(CODE2) + "'"
        + ", '" + getRandArr(CODE3) + "'"
        + ", '" + getRand(100, 200) //100~200 사이의 값을 얻는다.
        + "); ");
    } 
  } 
  
  public static String getRandArr(String[] arr){
    return arr[getRand(arr.length - 1)]; //배열에 저장된 값 중 하나를 반환한다.
  }
  public static int getRand(int n){return getRand(0, n);}
  public static int getRand(int from, int to){
    return (int)(Math.random() * (Math.abs(to-from)+1))+Math.min(from, to);
  }
}

2.3
정규식이란 텍스트 데이터 중에서 원하는 조건(패턴, pattern)과 일치하는 문자열을 찾아내기 위해 사용하는 것으로 미리 정의된 기호와 문자를
이용해서 작성한 문자열을 말한다. 정규식을 이용하면 많은 양의 텍스트 파일 중에서 원하는 데이터를 손쉽게 뽑아낼 수도 있고 입력된 데이터가 형식
에 맞는지 체크할 수도 있다. 예를 들면 html문서에서 전화번호나 이메일 주소만을 따로 추출한다던가, 입력한 비밀번호가 숫자와 영문자의 조합으로 
되어 있는지 확인할 수도 있다.

import java.util.regex.*; //Pattern과 Matcher가 속한 패키지

class RegularEx{
  public static void main(String[] args){
    String[] data = {"bat", "baby, "bonus", "cA", "ca", "co", "c.", "c0", "car", "combat", "count", "date", "disc"};
    Pattern p = Pattern.compile("c[a-z]*"); //c로 시작하는 소문자영단어
    
    for(int i=0; i<data.length; i++){
      Matcher m = p.matcher(data[i]);
      if(m.matches())
        System.out.print(data[i] + ",");
    }
  }
}
//ca, co, car, combat, count,

1. 정규식을 매개변수로 Pattern클래스의 static메서드인 Pattern compile(String regex)을 호출하여 Pattern인스턴스를 얻는다.
Pattern p = Pattern.compile("c[a-z]*");
2. 정규식으로 비교할 대상을 매개변수로 Pattern클래스의 Matcher matcher(CharSequence input)를 호출해서 Matcher인스턴스를 얻는다.
Matcher m  = p.matcher(data[i]);
3. Matcher인스턴스에 boolean matches()를 호출해서 정규식에 부합하는지 확인한다.
if(m.matches())

정규식의 일부를 괄호로 나누어 묶어서 그룹화(grouping)할 수 있다.
group() 또는 group(0)은 그룹으로 매칭된 문자열을 전체를 나누어지지 않은 채로 반환한다.

import java.util.regex.*;

class RegularEx{
  public static void main(String[] args){
    String source = "HP:011-1111-1111, HOME:02-999-9999 ";
    String pattern = "(0\\d{1,2})-(\\d{3,4})-(\\d{4})";
    
    Pattern p = Pattern.compile(pattern);
    Matcher m = p.matcher(source);
    
    int i = 0;
    while(m.find()){
      System.out.println(++i + ": " + m.group() + " -> " +m.group(1) + ", " + m.group(2) + ", " + m.group(3));
    }
  }
}
// 1: 011-1111-1111 -> 011, 1111, 1111
// 2: 02-999-9999 -> 02, 999, 9999

group(int i)를 호출할 때 i가 실제 그룹의 수보다 많으면 java.lang.IndexOutOfBoundsException이 발생한다.

Matcher의 find()로 정규식과 일치하는 부분을 찾으면, 그 위치를 start()와 end()로 알아낼 수 있고 appendReplacement(StringBuffer sb, String replacement)
를 이용해서 원하는 문자열(replacement)로 치환할 수 있다. 

import java.util.regex.*;

class RegularEx{
  public static void main(String[] args){
    String source = "A broken hand works, but not a broken heart.";
    String pattern = "broken";
    StringBuffer sb = new StringBuffer();
    
    Pattern p = Pattern.compile(pattern);
    Matcher m = p.matcher(source);
    System.out.println("source:"+source);
    
    int i=0;
    
    while(m.find()){
      system.out.println(++i + "번째 매칭:" + m.strat() + "~" + m.end());
      m.appendReplacement(sb, "drunken"); //broken을 drunken으로 치환하여 sb에 저장한다.
    }
    
    m.appendTail(sb);
    System.out.println("Replacement count : " + i);
    system.out.println("result:" + sb.toString()); 
  }
}
//source:A broken hand works, but not a broken heart.
//1번째 매칭:2~8
//2번째 매칭:31~37
//Replacement count : 2
//result:A drunken hand works, but not a drunken heart.

1. 문자열 source에서 "broken"을 m.find()로 찾은 후 처음으로 m.appendReplacement(sb, "drunken");가 호출되면 source의 시작부터 "broken"을 찾은
위치까지의 내용에 "drunken"을 더해서 저장한다.
- sb에 저장된 내용 : "A drunken"
2. m.find()는 첫 번째로 발견된 위치의 끝에서부터 다시 검색을 시작하여 두 번째 "broken"을 찾게 된다. 다시 m.appendReplacement(sb, "drunken");가
호출
- sb에 저장된 내용 : "A drunken hand works, but not a drunken"
3. m.appendTail(sb);이 호출되면 마지막으로 치환된 이후의 부분을 sb에 덧붙인다.
- sb에 저장된 내용 : "A drunken hand works, but not a drunken heart."

2.4
Scanner는 화면, 파일, 문자열과 같은 입력소스로부터 문자데이터를 읽어오는데 도움을 줄 목적으로 JDK1.5부터 추가되었다. Scanner에는 다음과 같은 생성자
를 지원하기 때문에 다양한 입력소스로부터 데이터를 읽을 수 있다.

Scanner(String source)
Scanner(File source)
Scanner(InputStream source)
Scanner(Readable source)
Scanner(ReadableByteChannel source)
Scanner(Path source)

또한 Scanner는 정규식 표현(Regular expression)을 이용한 라인단위의 검색을 지원하며 구분자(delimiter)에도 정규식 표현을 사용할 수 있어서 복잡한 형태의
구분자도 처리가 가능하다.

Scanner useDelimiter(Pattern pattern)
Scanner useDelimiter(String pattern)

2.5
StringTokenizer는 긴 문자열을 지정된 구분자(delimiter)를 기준으로 토큰(token)이라는 여러 개의 문자열로 잘라내는 데 사용된다.
예를 들어 "100,200,300,400"이라는 문자열이 있을 때 ','를 구분자로 잘라내면 "100","200","300","400"이라는 4개의 문자열(토큰)
을 얻을 수 있다. 
StringTokenizer를 이용하는 방법 이외에도 아래와 같이 String의 split(String regex)이나 Scanner의 useDelimiter(String pattern)
를 사용할 수 있지만, 이 두가지 방법은 정규식 포현(Regular expression)을 사용해야한다.

String[] result = "100,200,300,400".split(",");
Scanner sc2 = new Scanner("100,200,300,400").useDelimiter(",");

StringTokenizer를 사용하면 간단하고 명확한 결과를 얻을 수 있다. 다만 구분자로 단 하나의 문자 밖에 사용하지 못하기 때문에 보다
복잡한 형태의 구분자로 문자열을 나누어야 할 때는 정규식을 사용하는 메서드를 사용해야 한다.
split()은 데이터를 토큰으로 잘라낸 결과를 배열에 담아서 반환하기 때문에 데이터를 토큰으로 잘라서 반환하는 StringTokenizer보다
성능이 떨어진다.(데이터의 양이 많은 경우에 고려해야 할 사항이다.)

2.6
정수형으로 표현할 수 있는 값의 한계가 있다. 가장 큰 정수형 타입인 long으로 표현할 수 있는 값은 10진수로 19자리 정도이다.
이 값도 상당히 큰 값이지만, 과학적 계산에서는 더 큰 값을 다뤄야할 때가 있다.그럴 때 사용하면 좋은 것이 BigInteger이다.
BigInteger는 내부적으로 int배열을 사용해서 값을 다룬다. 그래서 long타입보다 훨씬 큰 값을 다룰 수 있는 것이다.
대신 성능은 long타입보다 떨어질 수 밖에 없다.

final int signum; //부호. 1(양수), 0, -1(음수) 셋 중의 하나
final int[] mag; //값(magnitude)

2.7
double타입으로 표현할 수 있는 값은 상당히 범위가 넓지만, 정밀도가 최대 13자리 밖에 되지 않고 실수형의 특성상 오차를 피할 수 없다.
BigDecimal은 실수형과 달리 정수를 이용해서 실수를 표현한다. 실수의 오차는 10진 실수를 2진 실수로 정확히 변환할 수 없는 경우가 있기
때문에 발생하는 것이므로, 오차가 없는 2진 정수로 변환하여 다루는 것이다. 실수를 정수와 10의 제곱의 곱으로 표현한다.

정수 x 10^(-scale)

private final BigInteger intVal; //정수(unscaled value)
private final int scale; //지수(scale)
private transient int precision; //정밀도(precision) - 정수의 자릿수





