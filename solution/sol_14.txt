컬렉션 프레임웍

컬렉션 프레임웍이란, '데이터 군을 저장하는 클래스들을 표준화한 설계'를 뜻한다.
컬렉션(Collection)은 다수의 데이터, 즉 데이터 그룹을, 프레임웍은 표준화된 프로그래밍 방식을 의미한다.

컬렉션 프레임웍은 컬렉션, 다수의 데이터,을 다루는 데 필요한 다양하고 풍부한 클래스들을 제공하기 때문
에 프로그래머의 짐을 상당히 덜어 주고 있으며, 또한 인터페이스와 다형성을 이용한 객체지향적 설계를
통해 표준화되어 있기 때문에 사용법을 익히기에도 편리하고 재사용성이 높은 코드를 작성할 수 있다는
장점이 있다.

컬렉션 프레임웍에서는 컬렉션데이터 그룹을 크게 3가지 타입이 존재한다고 인식하고 각 컬렉션을 다루는데
필요한 기능을 가진 3개의 인터페이스를 정의하였다. 그리고 인터페이스 List와 Set의 공통된 부분을 다시
뽑아서 새로운 인터페이스인 Collection을 추가로 정의하였다.
인터페이스 List와 Set을 구현한 컬렉션 클래스들은 서로 많은 공통부분이 있어서, 공통된 부분을 다시
뽑아 Collection인터페이스를 정의할 수 있었지만 Map인터페이스는 이들과는 전혀 다른 형태로 컬렉션을
다루기 때문에 같은 상속계층도에 포함되지 못했다.
이러한 설계는 객체지향언어의 장점을 극명히 보여주는 것으로 객체지향개념을 학습하는 사람들에게 많은 것
을 느끼게 한다. 후에 프로그래밍 실력을 어느 정도 갖추게 되었을 때 컬렉션 프레임웍의 실제 소스를 분석
해보면 객체지향적인 설계능력을 향상시키는데 많은 도움이 될 것이다.

List 순서가 있는 데이터의 집합. 데이터의 중복을 허용한다.
예) 대기자 명단 
구현 클래스 : ArrayList, LinkedList, Stack, Vector 등
Set 순서를 유지하지 않는 데이터의 집합. 데이터의 중복을 허용하지 않는다.
예) 양의 정수집합, 소수의 집합
구현 클래스 : HashSet, TreeSet 등
Map 키(key)와 값(Value)의 쌍(pair)으로 이루어진 데이터의 집합, 순서는 유지되지 않으며, 키는 중복을
허용하지 않고, 값은 중복을 허용한다.
예) 우편번호, 지역번호(전화번호) 
구현 클래스 : HashMap, TreeMap, HashTable, Properties 등

실제 개발 시에는 다루고자 하는 컬렉션의 특징을 파악하고 어떤 인터페이스를 구현한 컬렉션 클래스를 
사용해야하는지 결정해야하므로 각 인터페이스의 특징과 차이를 잘 이해하고 있어야 한다.
컬렉션 프레임웍의 모든 컬렉션 클래스들은 List, Set, Map 중의 하나를 구현하고 있으며, 구현한 인터
페이스의 이름이 클래스의 이름에 포함되어있어서 이름만으로 클래스의 특징을 쉽게 알 수 있도록 되어있다.
그러나, Vector, Stack, HashTable, Properties와 같은 클래스들은 프레임웍이 만들어지기 이전부터 존재
하던 것이기 때문에 컬렉션 프레임웍의 명명법을 따르지 않는다.
Vector나 HashTable과 같은 기존의 컬렉션 클래스들은 호환을 위해, 설계를 변경해서 남겨두었지만 가능
하면 사용하지 않는 것이 좋다. 그 대신 새로 추가된 ArrayList와 HashMap을 사용하자.

Collection인터페이스(List와 Set의 조상)는 컬렉션 클래스에 저장된 데이터를 읽고, 추가하고 삭제하는
등 컬렉션을 다루는데 가장 기본적인 메서드들을 정의하고 있다.

List인터페이스는 중복을 허용하면서 저장순서가 유지되는 컬렉션을 구현하는데 사용한다.
Set인터페이스는 중복을 허용하지 않고 저장순서가 유지되지 않는 컬렉션 클래스를 구현하는데 사용된다.
Map인터페이스는 키(key)와 값(value)을 하나의 쌍을 묶어서 저장하는 컬렉션 클래스를 구현하는 데 사용
된다. 키는 중복될 수 없지만 값은 중복을 허용한다.
기존에 저장된 데이터와 중복된 키와 값을 저장하면 기존의 값은 없어지고 마지막에 저장된 값이 남게 된다.

Map.Entry인터페이스는 Map인터페이스의 내부 인터페이스이다. 내부 클래스와 같이 인터페이스도 인터페이스
안에 인터페이스를 정의하는 내부 인터페이스를 정의하는 것이 가능하다.
Map에 저장되는 key-value쌍을 다루기 위해 내부적으로 Entry인터페이스를 정의해 놓았다. 이것은 보다
객체지향적으로 설계하도록 유도하기 위한 것으로 Map인터페이스를 구현하는 클래스에서는 Map.Entry인터
페이스도 함께 구현해야 한다.

ArrayList는 컬렉션 프레임웍에서 가장 많이 사용되는 컬렉션 클래스일 것이다. 
ArrayList는 기존의 Vector를 개선한 것으로 Vector와 구현원리와 기능적인 측면에서 동일하다.
ArrayList는 Object배열을 이용해서 데이터를 순차적으로 저장한다. 배열에 순서대로 저장되며, 배열에
더이상 저장할 공간이 없으면 보다 큰 새로운 배열을 생성해서 기존의 배열에 저장된 내용을 새로운 배열로
복사한 다음에 저장된다. 

for(int i= list2.size()-1; i>=0; i--){
  if(list1.contains(list2.get(i))){
    list2.remove(i);
  }
}
list2에서 list1과 공통되는 요소들을 찾아서 삭제하는 코드인데, list2.size()-1부터 감소시키면서 거꾸로
반복시켰다. 만일 변수 i를 증가시키면서 삭제하면, 한 요소가 삭제될 때마다 빈 공간을 채우기 위해 나머지
요소들이 자리이동을 하기 때문에 올바른 결과를 얻을 수 없다. 그래서 제어변수를 감소시켜가면서 삭제를
해야 자리이동이 발생해도 영향을 받지 않고 작업이 가능하다.
ArrayList를 생성할 때, 저장할 요소의 개수를 고려해서 실제 저정할 개수보다 약간 여유있는 크기로 하는 것
이 좋다. 생성할 때 지정한 크기보다 더 많은 객체를 저장하면 자동적으로 크기가 늘어나기는 하지만 이
과정에서 처리시간이 많이 소요되기 때문이다.

import java.util.*;

class VectorEx{
  public static void main(String[] args){
    Vector v = new Vector(5); //용량(capacity)이 5인 Vector를 생성한다.
    v.add("1");
    v.add("2");
    v.add("3");
    print(v);
    
    v.trimToSize(); //빈 공간을 없앤다. (용량과 크기가 같아진다.)
    System.out.println("After trimToSize()");
    print(v);
    
    v.ensureCapacity(6);
    System.out.println("After ensureCapacity(6)");
    print(v);
    
    v.setSize(7);
    System.out.println("After setSize(7)");
    print(v);
    
    v.clear();
    System.out.println("After clear()");
    print(v);
  }
  public static void print(Vector v){
    System.out.println(v);
    System.out.println("size :" + v.size());
    System.out.println("capacity :"+v.capacity());
  }
}
[1, 2, 3]
size :3
capacity :5
After trimToSize()
[1, 2, 3]
size :3
capacity :3
After ensureCapacity(6)
[1, 2, 3]
size :3
capacity :6
After setSize(7)
[1, 2, 3, null, null, null, null]
size :7
capacity :12
After clear()
[]
size :0
capacity :12

1. capacity가 5인 Vector인스턴스 v를 생성하고, 3개의 객체를 저장한 후의 상태
2. v.trimToSize()를 호출하면 v의 빈 공간을 없애서 size와 capacity를 같게 한다. 배열은 크기를 변경
할 수 없기 때문에 새로운 배열을 생성해서 그 주소값을 변수 v에 할당한다. 기존의 Vector인스턴스는 
더 이상 사용할 수 없으며, 후에 가비지컬렉터에 의해서 메모리에서 제거된다.
3. v.ensureCapacity(6)는 v의 capacity가 최소한 6이 되도록 한다. 만일 v의 capacity가 6이상이라면
아무 일도 일어나지 않는다. 현재는 v의 capacity가 3이므로 크기가 6인 배열을 생성해서 v의 내용을 복사
했다. 기존의 인스턴스를 다시 사용하는 것이 아니라 새로운 인스턴스를 생성하였다.
4. v.setSize(7)는 v의 size가 7이 되도록 한다. 만일 v의 capacity가 충분하면 새로 인스턴스를 생성하지
않아도 되지만 지금은 capacity가 6이므로 새로운 인스턴스를 생성해야 한다. Vector는 capacity가 부족할
경우 자동적으로 기존의 크기보다 2배의 크기로 증가된다. 그래서 v의 capacity는 12가 된다.
생성자 Vector(int initialCapacity, int capacityIncrement)를 사용해서 인스턴스를 생성한 경우에는 지정해준
capacityIncrement만큼 증가하게 된다.
5. v.clear();는 v의 모든 요소를 삭제한다. Vector는 Object배열이기 때문에 실제로는 주소가 저장되어야
한다.

ArrayList나 Vector 같이 배열을 이용한 자료구조는 데이터를 읽어오고 저장하는 데는 효율이 좋지만,
용량을 변경해야할 때는 새로운 배열을 생성한 후 기존의 배열로부터 새로 생성된 배열로 데이터를 복사해
야하기 때문에 상당히 효율이 떨어진다는 단점을 가지고 있다. 처음에 인스턴스를 생성할 때, 저장할 데이터의
개수를 잘 고려하여 충분한 용량의 인스턴스를 생성하는 것이 좋다.

List의 Object remove(int index)메서드는 지정된 위치(index)에 있는 객체를 삭제하고 삭제한 객체를
반환하도록 작성하였다. 1. 삭제할 객체의 바로 아래에 있는 데이터를 위로 복사해서 2. 삭제할 객체를 덮어쓰는
방식으로 처리한다. 만일 삭제할 객체가 마지막 데이터라면, 복사할 필요 없이 단순히 null로 변경해주기만
하면 된다. 3. 데이터가 삭제되어 데이터의 개수가 줄었으므로 size의 값을 1 감소시킨다.

배열은 데이터를 읽어오는데 걸리는 시간(접근시간)이 가장 빠르다는 장점을 가지고 있지만 다음과 같은 단점도 가지고 있다.
1. 크기를 변경할 수 없다
크기를 변경할 수 없으므로 새로운 배열을 생성해서 데이터를 복사해야한다.
실행속도를 향상시키기 위해서는 충분히 큰 크기의 배열을 생성해야 하므로 메모리가 낭비된다.
2. 비순차적인 데이터의 추가 또는 삭제에 시간이 많이 걸린다.
차례대로 데이터를 추가하고 마지막에서부터 데이터를 삭제하는 것은 빠르지만,
배열의 중간에 데이터를 추가하려면, 빈자리를 만들기 위해 다른 데이터들을 복사해서 이동해야 한다.

이러한 배열의 단점을 보완하기 위해 링크드리스트(linked list)라는 자료구조가 고안되었다.
링크드 리스트는 불연속적으로 존재하는 데이터를 서로 연결(link)한 형태로 구성되어 있다.

링크드 리스트의 각 요소(node)들은 자신과 연결된 다음 요소에 대한 참조(주소값)와 데이터로 구성되어
있다. 

class Node{
  Node next;
  Object obj;
}

링크드 리스트는 이동방향이 단방향이기 때문에 다음 요소에 대한 접근은 쉽지만 이전 요소에 대한 접근은 어렵다. 이 점을 보완한 것이 더블 링크드 리스트(이중 연결리스트, doubly linked list)이다.
더블 링크드 리스트는 링크드 리스트보다 각 요소에 대한 접근과 이동이 쉽기 때문에 링크드 리스트보다
더 많이 사용된다.

class Node{
  Node next;
  Node previous;
  Object obj;
}

더블 링크드 리스트의 접근성을 보다 향상시킨 것이 더블 써큘러 링크드 리스트(이중 원형 연결리스트,
doubly circular linked list)인데, 단순히 더블 링크드 리스트의 첫 번째 요소와 마지막 요소를 서로
연결시킨것이다.
실제로 LinkedList클래스는 이름과 달리 '링크드 리스트'가 아닌 '더블 링크드 리스트'로 구현되어 있는데, 이는 링크드 리스트의 단점인 낮은 접근성을 높이기 위한 것이다.

결론
1. 순차적으로 추가/삭제하는 경우에는 ArrayList가 LinkedList보다 빠르다
만일 ArrayList의 크기가 충분하지 않으면, 새로운 크기의 ArrayList를 생성하고 데이터를 복사하는 일이 발생하게 되므로 순차적으로 데이터를 추가해도 ArrayList보다 LinkedList가 더 빠를 수 있다.
순차적으로 삭제한다는 것은 마지막 데이터부터 역순으로 삭제해나간다는 것을 의미하며, ArrayList는
마지막 데이터부터 삭제할 경우 각 요소들의 재배치가 필요하지 않기 때문에 상당히 빠르다.
단지 마지막 요소의 값을 null로만 바꾸면 되니까.
LinkedList는 저장해야하는 데이터의 개수가 많아질수록 데이터를 읽어오는 시간(접근시간)이 길어진다.
2. 중간 데이터를 추가/삭제하는 경우에는 LinkedList가 ArrayList보다 빠르다
중간 요소를 추가 또는 삭제하는 경우, LinkedList는 각 요소간의 연결만 변경해주면 되기 때문에 처리속도가 상당히 빠르다. 반면에 ArrayList는 각 요소들을 재배치하여 추가할 공간을 확보하거나 빈 공간을 채워야하기 때문에 처리속도가 늦다.

처음에 작업하기 전에 데이터를 저장할 때는 ArrayList를 사용한 다음, 작업할 때는 LinkedList로 데이터를 옮겨서 작업하면 좋은 효율을 얻을 수 있을 것이다.

ArrayList al = new ArrayList(1000000);
for(int i=0; i<1000000; i++) al.add(i+"");

LinkedList ll = new LinkedList(al);
for(int i=0; i<1000; i++) ll.add(500, "X");

컬렉션 프레임웍에 속한 대부분의 컬렉션 클래스들은 이처럼 서로 변환이 가능한 생성자를 제공하므로
이를 이용하면 간단히 다른 컬렉션 클래스로 데이터를 옮길 수 있다.

스택(Stack)은 마지막에 저장한 데이터를 가장 먼저 꺼내게 되는 LIFO구조로 되어있고, 큐(Queue)는
처음에 저장한 데이터를 가장 먼저 꺼내게 되는 FIFO구조로 되어 있다.
스택과 큐를 구현하기 위해서는 어떤 컬렉션 클래스를 사용하는 것이 좋을까?
순차적으로 데이터를 추가하고 삭제하는 스택에는 ArrayList와 같은 배열기반의 컬렉션 클래스가 적합하지만, 큐는 데이터를 꺼낼 때 항상 첫 번째 저장된 데이터를 삭제하므로, ArrayList와 같은 배열기반의 
컬렉션 클래스를 사용한다면 데이터를 꺼낼 때마다 빈 공간을 채우기 위해 데이터의 복사가 발생하므로
비효율적이다. 큐는 ArrayList보다 데이터의 추가/삭제가 쉬운 LinkedList로 구현하는 것이 더 적합하다.

자바에서는 스택을 Stack클래스로 구현하여 제공하고 있지만 큐는 Queue인터페이스로만 정의해 놓았을 뿐 별도의 클래스를 제공하고 있지 않다. 대신 Queue인터페이스를 구현한 클래스들이 있어서 이 들 중의
하나를 선택해서 사용하면 된다.
자바 API문서를 참고하면 되는데, 'All Known Implementing Classes'라는 항목에 나열된 클래스들이 바로 Queue인터페이스를 구현한 클래스들이다. Queue인터페이스에 정의된 기능을 사용하고 싶다면 이 클래스들 중 적당한 것을 하나 골라 Queue q = new LinkedList();와 같은 식으로 객체를 생성해서 사용하면
된다. 이후 LinkedList가 아닌 Queue인터페이스를 구현한 다른 클래스로의 변환도 가능하다.

스택의 활용 예 
수식계산, 수식괄호검사, 워드프로세서의 undo/redo, 웹브라우저의 뒤로/앞으로
큐의 활용 예
최근사용문서, 인쇄작업 대기목록, 버퍼(buffer)

PriorityQueue는 Queue인터페이스의 구현체 중의 하나로, 저장한 순서에 관계없이 우선순위(priority)가 높은 것부터 꺼내게 된다는 특징이 있다.
그리고 null은 저장할 수 없다. null을 저장하면 NullPointerException이 발생한다.
PriorityQueue는 저장공간으로 배열을 사용하며, 각 요소를 '힙(heap)'이라는 자료구조의 형태로 저장한다. 힙은 이진트리의 한 종류로 가장 큰 값이나
가장 작은 값을 빠르게 찾을 수 있다는 특징이 있다.

Deque(Double -Ended Queue)는 Queue의 변형으로 한 쪽 끝으로만 추가/삭제할 수 있는 Queue와 달리, Deque은 양쪽 끝에 추가/삭제가 가능하다. Deque
의 조상은 Queue이며, 구현체로는 ArrayDeque과 LinkedList등이 있다. 덱은 스택과 큐를 하나로 합쳐놓은 것과 같으며 스택으로 사용할 수도 있고, 큐로사용할 수도 있다.

Iterator, ListIterator, Enumeration은 모두 컬렉션에 저장된 요소를 접근하는데 사용되는 인터페이스
이다. Enumeration은 Iterator의 구버전이며, ListIterator는 Iterator의 기능을 향상 시킨 것이다.

컬렉션 프레임웍에서는 컬렉션에 저장된 요소들을 읽어오는 방법을 표준화하였다. 컬렉션에 저장된
각 요소에 접근하는 기능을 가진 Iterator 인터페이스를 정의하고, Collection인터페이스에는 
'Iterator(Iterator를 구현한 클래스의 인스턴스)'를 반환하는 iterator()를 정의하고 있다.
iterator()는 Collection인터페이스에 정의된 메서드이므로 Collection인터페이스의 자손인 List와
Set에도 포함되어 있다. 

Collection c = new ArrayList();
Iterator it = c.iterator();
while(it.hasNext()){
  System.out.println(it.next());
}

ArrayList대신 Collection인터페이스를 구현한 다른 컬렉션 클래스에 대해서도 이와 동일한 코드를
사용할 수 있다. Iterator를 이용해서 컬렉션의 요소를 읽어오는 방법을 표준화했기 때문에 이처럼
코드의 재사용성을 높이는 것이 가능한 것이다. 이처럼 공통 인터페이스를 정의해서 표준을 정의하고
구현하여 표준을 따르도록 함으로써 코드의 일관성을 유지하여 재사용성을 극대화하는 것이 객체지향
프로그래밍의 중요한 목적 중의 하나이다.

Q. 참조변수의 타입을 ArrayList타입이 아니라 Collection타입으로 한 이유는 뭔가?
A. Collection에 없고 ArrayList에만 있는 메서드를 사용하는게 아니라면, Collection타입의
참조변수로 선언하는 것이 좋다. 만일 Collection인터페이스를 구현한 다른 클래스, 예를 들어
LinkedList로 바꿔야 한다면 선언문 하나만 변경하면 나머지 코드는 검토하지 않아도 된다.
참조변수 타입이 Collection이므로 Collection에 정의되지 않은 메서드는 사용되지 않았을 것이 확실
하기 때문이다. 그러나 참조변수 타입을 ArrayList로 했다면, 선언문 이후의 문장들을 검토해야 한다.
Collection에 정의되지 않은 메서드를 호출했을 수 있기 때문이다.

Map인터페이스를 구현한 컬렉션 클래스는 키(key)와 값(value)을 쌍(pair)으로 저장하고 있기 때문에
iterator()를 직접 호출할 수 없고, 그 대신 keySet()이나 entrySet()과 같은 메서드를 통해서 키와
값을 각각 따로 Set의 형태로 얻어 온 후에 다시 iterator()를 호출해야 Iterator를 얻을 수 있다.

Map map = new HashMap();
...
Iterator it = map.entrySet().iterator();

Enumeration은 컬렉션 프레임웍이 만들어지기 이전에 사용하던 것으로 Iterator의 구버전이라고
생각하면 된다. 이전 버전으로 작성된 소스와의 호환을 위해서 남겨 두고 있을 뿐이므로 가능하면
Iterator를 사용하자. ListIterator는 Iterator를 상속받아서 기능을 추가한 것으로, 컬렉션의 요소
에 접근할 때 Iterator는 단방향으로만 이동할 수 있는 데 반해 ListIterator는 양방향으로의 이동이
가능하다. 다만 ArrayList나 LinkedList와 같이 List인터페이스를 구현한 컬렉션에서만 사용할 수 있다.
즉, Enumeration과 Iterator는 메서드이름만 다를 뿐 기능은 같고, ListIterator는 Iterator에 이전방
향으로의 접근기능을 추가한 것일 뿐이라는 것을 알 수 있다.

Arrays클래스에는 배열을 다루는데 유용한 메서드가 정의되어 있다. 
배열의 복사 - copyOf(), copyOfRange()
copyOf()는 배열 전체를, copyOfRange()는 배열의 일부를 복사해서 새로운 배열을 만들어 반환한다.
배열 채우기 - fill(), setAll()
fill()은 배열의 모든 요소를 지정된 값으로 채운다. setAll()은 배열을 채우는데 사용할 함수형 인터
페이스를 매개변수로 받는다. 이 메서드를 호출할 때는 함수형 인터페이스를 구현한 객체를 매개변수로
지정하던가 아니면 람다식을 지정해야 한다.
배열의 정렬과 검색 - sort(), binarySearch()
sort()는 배열을 정렬할 때, 그리고 배열에 저장된 요소를 검색할 때는 binarySearch()를 사용한다.
binarySearch()를 사용할 때는, 반드시 배열이 정렬된 상태이어야 올바른 결과를 얻는다.
배열의 비교와 출력 - equals(), toString()
다차원 배열에서는 deepEquals(), deepToString()을 사용해야 한다.
배열을 List로 변환 - asList(Object... a)
asList()는 배열을 List에 담아서 반환한다. asList()는 반환한 List의 크기를 변경할 수 없다.
즉 추가 또는 삭제가 불가능하다. 저장된 내용은 변경가능하다. 만일 크기를 변경할 수 있는 List가
필요하다면 다음과 같이 하면 된다.
List list = new ArrayList(Arrays.asList(1,2,3,4,5));
parallelXXX(), spliterator(), stream()
'parallel'로 시작하는 이름의 메서드들은 보다 빠른 결과를 얻기 위해 여러 쓰레드가 작업을
나누어 처리하도록 한다. spliterator()는 여러 쓰레드가 처리할 수 있게 하나의 작업을 여러 작업
으로 나누는 Spliterator를 반환하며 stream()은 컬렉션을 스트림으로 변환한다.

Comparator와 Comparable은 모두 인터페이스로 컬렉션을 정렬하는데 필요한 메서드를 정의하고 있으며,
Comparable을 구현하고 있는 클래스들은 같은 타입의 인스턴스끼리 서로 비교할 수 있는 클래스들,
주로 Integer와 같은 wrapper클래스와 String, Date, File과 같은 것들이며 기본적으로 오름차순 정렬
되도록 구현되어 있다. Comparable을 구현한 클래스는 정렬이 가능하다는 것을 의미한다.

public interface Comparator {
  int compare(Object o1, Object o2);
  boolean equals(Object obj);
}
public interface Comparable{
  public int compareTo(Object o);
}

Comparable을 구현한 클래스들이 기본적으로 오름차순으로 정렬되어 있지만, 내림차순으로 정렬한다던가
아니면 다른 기준에 의해서 정렬되도록 하고 싶을 때 Comparator를 구현해서 정렬기준을 제공할 수 있
다.
Comparable : 기본 정렬기준을 구현하는데 사용.
Comparator : 기본 정렬기준 외에 다른 기준으로 정렬하고자할 때 사용.

Arrays.sort()는 배열을 정렬할 때, Comparator를 지정해주지 않으면 저장하는 객체(주로 Comparable
을 구현한 클래스의 객체)에 구현된 내용에 따라 정렬된다.

static void sort(Object[] a) // 객체 배열에 저장된 객체가 구현한 Comparable에 의한 정렬
static void sort(Object[] a, Comparator c) // 지정한 Comparator에 의한 정렬

HashSet
- Set인터페이스를 구현한 대표적인 컬렉션 클래스
- 순서를 유지하려면, LinkedHashSet클래스를 사용하면 된다.
TreeSet
- 범위 검색과 정렬에 유리한 컬렉션 클래스
- HashSet보다 데이터 추가, 삭제에 시간이 더 걸림

HashSet의 add메서드는 새로운 요소를 추가하기 전에 기존에 저장된 요소와 같은 것인지 판별하기 위해
추가하려는 요소의 equals()와 hashCode()를 호출하기 때문에, equals()와 hashCode()를 목적에 맞게
오버라이딩해야 한다. 

public boolean equals(Object obj){
  if(obj instanceof Person){
    Person tmp = (Person)obj;
    return name.equals(tmp.name) && age==tmp.age;
  }
  return false;
}
public int hashCode(){
  return Objects.hash(name,age);
} // int hash(Object... values)
오버라이딩을 통해 작성된 hashCode()는 다음의 세 가지 조건을 만족시켜야 한다.
1. 실행 중인 애플리케이션 내의 동일한 객체에 대해서 여러 번 hashCode()를 호출해도 동일한
int값을 반환해야 한다. 하지만, 실행시마다 동일한 int값을 반환할 필요는 없다.
(단, equals메서드의 구현에 사용된 멤버변수의 값이 바뀌지 않았다고 가정한다.)
2. equals메서드를 이용한 비교에 의해서 true를 얻은 두 객체에 대해 각각 hashcode()를 호출해서
얻은 결과는 반드시 같아야 한다.
3. equals메서드를 호출했을 때 false를 반환하는 두 객체는 hashCode() 호출에 대해 같은 int값을
반환하는 경우가 있어도 괜찮지만, 해싱(hashing)을 사용하는 컬렉션의 성능을 향상시키기 위해서는
다른 int값을 반환하는 것이 좋다. 가능한 한 서로 다른 값을 반환하도록 hashCode()를 잘 작성해야
한다.

TreeSet은 이진 검색 트리(BST)라는 자료구조의 형태로 데이터를 저장하는 컬렉션 클래스이다.
이진 검색 트리는 정렬, 검색, 범위검색(range search)에 높은 성능을 보이는 자료구조이며,
TreeSet은 이진 검색 트리의 성능을 향상시킨 '레드-블랙 트리-로 구현되어 있다.
그리고 Set인터페이스를 구현했으므로 중복된 데이터의 저장을 허용하지 않으며 정렬된 위치에 저장
하므로 저장순서를 유지하지도 않는다.
TreeSet에 저장되는 객체가 Comparable을 구현하던가 아니면, TreeSet에게 Comparator를 제공해서
두 객체를 비교할 방법을 알려줘야 한다.

HashMap
- HashMap(동기화x)은 Hashtable(동기화o)의 신버전
- Map인터페이스를 구현한 대표적인 컬렉션 클래스
- 순서를 유지하려면, LinkedHashMap클래스를 사용하면 된다.
TreeMap(TreeSet과 거의 유사)
- 범위 검색과 정렬에 유리한 컬렉션 클래스
- HashMap보다 데이터 추가, 삭제에 시간이 더 걸림

Hashtable과 HashMap의 관계는 Vector와 ArrayList의 관계와 같아서 Hashtable보다는 새로운 버전인
HahsMap을 사용할 것을 권한다. HashMap은 Map을 구현했으므로 키(key)와 값(value)을 묶어서
하나의 데이터(entry)로 저장한다는 특징을 갖는다. 그리고 해싱(hashing)을 사용하기 때문에 많은
양의 데이터를 검색하는데 있어서 뛰어난 성능을 보인다.

public class HashMap extends AbstractMap implements Map, cloneable, Serializable
{
  transient Entry[] table;
  ...
  static class Entry implements Map.Entry{
    final Object key;
    Object value;
    ...
  }
}

HashMap은 Entry라는 내부 클래스를 정의하고, 다시 Entry타입의 배열을 선언하고 있다. 키(key)와
값(value)은 별개의 값이 아니라 서로 관련된 값이기 때문에 각각의 배열로 선언하기 보다는 하나의
클래스로 정의해서 하나의 배열로 다루는 것이 데이터의 무결성(integrity)적인 측면에서 더 바람직
하기 때문이다.
키(key) : 컬렉션 내의 키(key) 중에서 유일해야 한다.
값(value) : 키(key)와 달리 데이터의 중복을 허용한다.

import java.util.*;
class HashMapEX{
  public static void main(String[] args){
    HashMap map = new HashMap();
    map.put("김",new Integer(100));
    map.put("이",new Integer(100));
    map.put("강",new Integer(80));
    map.put("안",new Integer(90));

    Set set = map.entrySet();
    Iterator it = set.iterator();

    while(it.hasNext()){
      Map.Entry e = (Map.Entry)it.next();
      Systme.out.println("이름 : " + e.getKey()
        + ", 점수 : " + e.getValue());
    }
    set = map.keySet();
    System.out.println("참가자 명단 : " + set);
    Collection values = map.values();  
    it = values.iterator();
    int total = 0;
    while(it.hasNext()){
      Integer i = (Integer)it.next();
      totla += i.intValue();
    }
    System.out.println("총점 : " + total);
    System.out.println("평균 : " + (float)total/set.size());
    System.out.println("최고점수 : " + collections.max(values));
    System.out.println("최저점수 : " + Collections.min(values));
  }
}
해싱이란 해시함수(hash function)를 이용해서 데이터를 해시테이블(hash table)에 저장하고
검색하는 기법을 말한다. 해시함수는 데이터가 저장되어 있는 곳을 알려 주기 때문에 다량의 데이터
중에서도 원하는 데이터를 빠르게 찾을 수 있다.
해싱을 구현한 컬렉션 클래스로는 HashSet, HashMap, Hashtable 등이 있다.
Hashtable은 컬렉션 프레임웍이 도입되면서 HashMap으로 대체되었으나 이전 소스와의 호환성 문제로
남겨 두고 있다. 해싱에서 사용하는 자료구조는 다음과 같이 배열과 링크드 리스트의 조합으로
되어 있다. 
저장할 데이터의 키를 해시함수에 넣으면 배열의 한 요소를 얻게 되고, 다시 그 곳에 연결되어 있는
링크드 리스트에 저장하게 된다.
1. 검색하고자 하는 값의 키로 해시함수를 호출한다.
2. 해시함수의 계산결과(해시코드)로 해당 값이 저장되어 있는 링크드 리스트를 찾는다.
3. 링크드 리스트에서 검색한 키와 일치하는 데이터를 찾는다.
새로운 클래스를 정의할 때 equals()를 재정의오버라이딩해야 한다면 hashCode()도 같이
재정의해서 equals()의 결과가 true인 두 객체의 해시코드hashCode()의 결과값이 항상 같도록
해주어야 한다.


