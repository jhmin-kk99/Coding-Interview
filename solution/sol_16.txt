열거형(enums)이란? 애너테이션(annotation)이란?

열거형은 서로 관련된 상수를 편리하게 선언하기 위한 것으로 여러 상수를 정의할 때 사용하면 유용하다.

class Card{
  enum Kind {CLOVER, HEART, DIAMOND, SPADE}
  enum Value {TWO, THREE, FOUR}

  final Kind kind;
  final Value value;
}
자바의 열거형은 '타입에 안전한 열거형(typesafe enum)'이라서 실제 값이 같아도 타입이 다르면 컴파일
에러가 발생한다. 이처럼 값뿐만 아니라 타입까지 체크하기 때문에 타입에 안전하다고 하는 것이다.
더 중요한 것은 상수의 값이 바뀌면, 해당 상수를 참조하는 모든 소스를 다시 컴파일해야 한다는 것이다.
하지만 열거형 상수를 사용하면, 기존의 소스를 다시 컴파일하지 않아도 된다.

enum Direction {EAST, SOUTH, WEST, NORTH}
class Unit{
  int x,y;
  Direction dir;

  void init(){
    dir = Direction.EAST; //EAST로 초기화
  }
}
열거형 상수간의 비교에는 '=='를 사용할 수 있다. equals()가 아닌 '=='로 비교가 가능하다는 것은
그만큼 빠른 성능을 제공한다는 얘기다. 그러나 '<', '>'와 가은 비교연산자는 사용할 수 없고 compareTo()
는 사용가능하다. 
또한, switchㅁㄴ의 조건식에도 열거형을 사용할 수 있는데, 이 때 주의할 점은 case문에 열거형의 이름은
적지 않고 상수의 이름만 적어야 한다는 제약이 있다.

Direction[] dArr = Direction.values();
for(Direction d : dArr)
  System.out.printf("%s=%d%n", d.name(), d.ordinal());
values()는 열겨형의 모든 상수를 배열에 담아 반환한다. 이 메서드는 모든 열거형이 가지고 있는 것으로
컴파일러가 자동으로 추가해 준다. 그리고 ordinal()은 모든 열거형의 조상인 java.lang.Enum클래스에
정의된 것으로, 열거형 상수가 정의된 순서(0부터 시작)를 정수로 반환한다.

Enum클래스에 정의된 ordinal()이 열거형 상수가 정의된 순서를 반환하지만, 이 값을 열거형 상수의 값
으로 사용하지 않는 것이 좋다. 이 값은 내부적인 용도로만 사용되기 위한 것이기 때문이다.
열거형 상수의 값이 불연속적인 경우에는 열거형 상수의 이름 옆에 원하는 값을 괄호()와 함께 적어준다.

enum Direction{
  EAST(1), SOUTH(5), WEST(-1), NORTH(10); //끝에 ';'를 추가해야 한다.

  private final int value; //정수를 저장할 필드(인스턴스 변수)를 추가
  Direction(int value) {this.value = value;} //생성자를 추가 , private Direction(int value)와 동일
  public int getValue() {return value;}
}
열거형의 인스턴스 변수는 반드시 final이어야 한다는 제약은 없지만, value는 열거형 상수의 값을
저장하기 위한 것이므로 final을 붙였다. 그리고 외부에서 이 값을 얻을 수 있게 getValue()도 추가하였다.

필요하다면, 하나의 열거형 상수에 여러 값을 지정할 수도 있다. 

enum Direction{
  EAST(1,">"), SOUTH(2,"V"), WEST(3,"<"), NORTH(4,"^");
  private static final Direction[] DIR_ARR = Direction.values();
  private final int value;
  private final Stirng symbol;
  Direction(int value, String symbol){ //접근 제어자 private이 생략됨
    this.value = value;
    this.symbol = symbol;
  }
  public int getValue() {return value;}
  public String getSymbol() {return symbol;}

  public static Direction of(int dir){
    if(dir < 1 || dir > 4){
      throw new IllegalArgumentException("Invalid value :" + dir);
    }
    return DIR_ARR[dir - 1];
  }
}

class EnumEx{
  public static void main(String[] args){
    for(Direction d : Direction.values())
      System.out.printf("%s=%d%n", d.name(), d.getValue());
    Direction d1 = Direction.EAST;
    Direction d2 = Direction.of(1);
    ...
  }
}

열거형 Transportation은 운송 수단의 종류 별로 상수를 정의하고 있으며, 각 운송 수단에는 
기본요금(BASIC_FARE)이 책정되어 있다.
enum Transportation{
  BUS(100), TRAIN(150), SHIP(100), AIRPLANE(300);
  private final int BASIC_FARE;
  private Transportation(int basicFare){
    BASIC_FARE = basicFare;
  }
  int fare(){ //운송 요금을 반환
    return BASIC_FARE;
  }
}
거리에 따라 요금을 계산하는 방식이 각 운송 수단마다 다를 것이다. 이럴 때, 열거형에 추상 메서드
'fare(int distance)'를 선언하면 각 열거형 상수가 이 추상 메서드를 반드시 구현해야 한다.

enum Transportation{
  BUS(100){
    int fare(int distance){ return distance*BASIC_FARE;}
  }, TRAIN(150){
    int fare(int distance){ return distance*BASIC_FARE;}
  }, SHIP(100){
    int fare(int distance){ return distance*BASIC_FARE;}
  }, AIRPLANE(300){
    int fare(int distance){ return distance*BASIC_FARE;}
  };
  abstract int fare(int distance); //거리에 따른 요금을 계산하는 추상 메서드
  protected final int BASIC_FARE; //protected로 해야 각 상수에서 접근가능
  private Transportation(int basicFare){
    BASIC_FARE = basicFare;
  }
  public int getBasicFare(){     
    return BASIC_FARE;
  }
}

열거형 Direction이 다음과 같이 정의되어 있을 때,
enum Direction{ EAST, SOUTH, WEST, NORTH}
사실은 열거형 상수 하나하나가 Direction객체이다. 

class Direction{
  static final Direction EAST = new Direction("EAST");
  static final Direction SOUTH = new Direction("SOUTH");
  static final Direction WEST = new Direction("WEST");
  static final Direction NORTH = new Direction("NORTH");

  private String name;
  private Direction(String name){
    this.name = name;
  }
}
Direction클래스의 static상수 EAST, SOUTH, WEST, NORTH의 값은 객체의 주소이고, 이 값은 바뀌지
않는 값이므로 '=='로 비교가 가능한 것이다.
모든 열거형은 추상 클래스 Enum의 자손이므로, Enum을 흉내 내어 MyEnum을 작성하면 다음과 같다.

abstract class MyEnum<T extends MyEnum<T>> implements Comparable<T> {
  static int id = 0; //객체에 붙일 일련번호(0부터 시작)
  int ordinal;
  String name = "";
  public int ordinal() { return ordinal; }
  MyEnum(String name){
    this.name = name;
    ordinal = id++; //객체를 생성할 때마다 id의 값을 증가시킨다.
  }
  public int compareTo(T t){
    return ordinal - t.ordinal();
  }
}
만일 클래스를 MyEnum<T>와 같이 선언하였다면, compareTo()를 위와 같이 간단히 작성할 수 없었을 
것이다. 타입 T에 ordinal()이 정의되어 있는지 확인할 수 없기 때문이다.

abstract class MyEnum<T> implements Comparable<T>{
  ...
  public int compareTo(T t){
    return ordinal - t.ordinal(); //에러. 타입 T에 ordinal()이 있나?
  }
}
그래서 MyEnum<T extends<MyEnum<T>>와 같이 선언한 것이며, 이것은 타입 T가 MyEnum<T>의 자손이어야
한다는 의미이다. 타입 T가 MyEnum의 자손이므로 ordinal()이 정의되어 있는 것은 분명하므로 형변환
없이도 에러가 나지 않는다. 그리고 추상 메서드를 새로 추가하면, 클래스 앞에도 'abstract'를 붙여줘
야 하고, 각 static 상수들도 추상 메서드를 구현해주어야 한다. 

abstract class Direction extends MyEnum{
  static final Direction EAST = new Direction("EAST"){
  //익명 클래스
    Point move(Point p) {...}
  };
   static final Direction SOUTH = new Direction("SOUTH"){
  //익명 클래스
    Point move(Point p) {...}
  };
   static final Direction WEST = new Direction("WEST"){
  //익명 클래스
    Point move(Point p) {...}
  };
   static final Direction SOUTH = new Direction("SOUTH"){
  //익명 클래스
    Point move(Point p) {...}
  };
  private String name;
  private Direction(String name){
    this.name = name;
  }
  abstract Point move(Point p);
}

애너테이션이란 프로그램의 소스코드 안에 다른 프로그램을 위한 정보를 미리 약속된 형식으로
포함시킨 것이다. 애너테이션은 주석(comment)처럼 프로그래밍 언어에 영향을 미치지 않으면서도
다른 프로그램에게 유용한 정보를 제공할 수 있다는 장점이 있다.
예를 들어, 자신이 작성한 소스코드 중에서 특정 메서드만 테스트하기를 원한다면, 다음과 같이 
'@Test'라는 애너테이션을 메서드 앞에 붙인다. '@Test'는 '이 메서드를 테스트해야 한다'는 것을
테스트 프로그램에게 알리는 역할을 할 뿐, 메서드가 포함된 프로그램 자체에는 아무런 영향을 미치지
않는다. 주석처럼 존재하지 않는 것이나 다름없다.

@Test
public void method(){
  ...
}
애너테이션은 JDK에서 기본적으로 제공하는 것과 다른 프로그램에서 제공하는 것들이 있는데, 
어느 것이든 그저 약속된 형식으로 정보를 제공하기만 하면 될 뿐이다. JDK에서 제공하는 표준 애너
테이션은 주로 컴파일러를 위한 것으로 컴파일러에게 유용한 정보를 제공한다. 그리고 새로운 애너테이
션을 정의할 때 사용하는 메타 애너테이션을 제공한다.

@Override
메서드 앞에만 붙일 수 있는 애너테이션으로, 조상의 메서드를 오버라이딩 하는 것이라는 걸
컴파일러에게 알려주는 역할을 한다. '@Override'라고 애너테이션을 붙이먄, 컴파일러가 같은 이름의
메서드가 조상에 있는지 확인하고 없으면, 에러메시지를 출력한다.

@Deprecated
새로운 버전의 JDK가 소개될 때, 새로운 기능이 추가될 뿐만 아니라 기존의 부족했던 기능들을 개선
하기도 한다. 이 과정에서 기존의 기능을 대체할 것들이 추가되어도, 이미 여러 곳에서 사용되고 있을
지 모르는 기존의 것들을 함부로 삭제할 수 없다. 더 이상 사용되지 않는 필드나 메서드에 
'@Deprecated'를 붙인다.

@FunctionalInterface
'함수형 인터페이스(functional interface)'를 선언할 때, 이 애너테이션을 붙이면 컴파일러가 
'함수형 인터페이스'를 올바르게 선언했는지 확인하고, 잘못된 경우 에러를 발생시킨다.

@SuppressWarnings
컴파일러가 보여주는 경고메시지가 나타나지 않게 억제해준다. 컴파일러의 경고메시지는 무시하고
넘어갈 수도 있지만, 모두 확인하고 해결해서 컴파일 후에 어떠한 메시지도 나타나지 않게 해야 한다.
그러나 경우에 따라서는 경고가 발생할 것을 알면서도 묵인해야 할 때가 있는데, 이 경고를 그대로
놔두면 컴파일할 때마다 메시지가 나타난다. 이 때는 묵인해야하는 경고가 발생하는 대상에 반드시 
'@SuppressWarnings'를 붙여서 컴파일 후에 어떤 경고 메시지도 나타나지 않게 해야한다.
'@SuppressWarnings'로 억제할 수 있는 경고 메시지의 종류는 여러 가지가 있는데, JDK의 버전이
올라가면서 앞으로도 계속 추가될 것이다. 이 중에서 주로 사용되는 것은 "deprecation", "unchecked",
"rawtypes", "varargs" 정도이다.
"deprecation"은 '@Deprecated'가 붙은 대상을 사용해서 발생하는 경고를, "unchecked"는 지네릭스로
타입을 지정하지 않았을 때 발생하는 경고를, "rawtypes"는 지네릭스를 사용하지 않아서 발생하는
경고를, 그리고 "varargs"는 가변인자의 타입이 지네릭 타입일 때 발생하는 경고를 억제할 때 사용한다.
만일 둘 이상의 경고를 동시에 억제하려면 배열에서처럼 괄호{}를 추가로 사용해야한다.
새로 추가된 경고 메시지를 억제하려면, 경고 메시지의 종류를 알아야 하는데, -Xlint옵션으로 컴파일
해서 나타나는 경고의 내용 중에서 대괄호[]안에 있는 것이 바로 메시지의 종류이다.
해당 대상에만 애너테이션을 붙여서 경고의 억제범위를 최소화하는 것이 좋다.

@SafeVarargs
메서드에 선언된 가변인자의 타입이 non-reifiable타입일 경우, 해당 메서드를 선언하는 부분과
호출하는 부분에서 "unchecked"경고가 발생한다. 해당 코드에 문제가 없다면 이 경고를 억제하기
위해 '@SafeVarargs'를 사용해야 한다. 이 애너테이션은 static이나 final이 붙은 메서드와 생성자에만
붙일 수 있다. 즉, 오버라이드될 수 있는 메서드에는 사용할 수 없다는 뜻이다. 
지네릭스에서 살펴본 것과 같이 어떤 타입들은 컴파일 이후에 제거된다. 컴파일 후에도 제거되지 않는 
타입을 reifiable타입이라고 하고, 제거되는 타입을 non-reifiable타입이라고 한다. 지네릭 타입들은
대부분 컴파일 시에 제거되므로 non-reifiable타입이다.
예를 들어, java.util.Arrays의 asList()는 매개변수로 넘겨받은 값들로 배열을 만들어서 새로운 
ArrayList객체를 만들어서 반환하는데 이 과정에서 경고가 발생한다.

public static <T> List<T> asList(T... a){
  return new ArrayList<T>(a); // ArrayList(E[] array)를 호출. 경고발생
} 
asList()의 매개변수가 가변인자인 동시에 지네릭 타입이다. 메서드에 선언된 타입 T는 컴파일 과정
에서 Object로 바뀐다. 즉, Object[]가 되는 것이다. Object[]에는 모든 타입의 객체가 들어있을 수 있
으므로, 이 배열로 ArrayList<T>를 생성하는 것은 위험하다고 경고하는 것이다. 그러나 asList()
가 호출되는 부분을 컴파일러가 체크해서 타입 T가 아닌 다른 타입이 들어가지 못하게 할 것이므로 위
의 코드는 아무런 문제가 없다.
이럴 때는 메서드 앞에 '@SafeVarargs'를 붙여서 '이 메서드의 가변인자는 타입 안정성이 있다.'고
컴파일러에게 알려서 경고가 발생하지 않도록 해야 한다.
메서드를 선언할 때 @SafeVarargs를 붙이면, 이 메서드를 호출하는 곳에서 발생하는 경고도 억제된다.
반면에 @SafeVarargs대신, @SuppressWarnings("unchecked")로 경고를 억제하려면, 메서드 선언뿐만
아니라 메서드가 호출되는 곳에도 애너테이션을 붙여야한다. 그리고 @SafeVarargs로 'unchecked'경고는
억제할 수 있지만, 'varargs'경고는 억제할 수 없기 때문에 습관적으로 @SafeVarargs와 
@SuppressWarnings("varargs")를 같이 붙인다.

@SafeVarargs // 'unchecked'경고를 억제한다.
@SuppressWarnings("varargs") // 'varargs'경고를 억제한다.
public static <T> List<T> asList(T... a){
  return new ArrayList<>(a);
} 
@SuppressWarnings("varargs")를 붙이지 않아도 경고 없이 컴파일 된다. 그러나 -Xlint옵션을 붙여서
컴파일 해보면, 'varargs'경고가 발생한 것을 확인할 수 있다. 그래서 가능하면 이 두 애너테이션을
항상 같이 사용하는 것이 좋다.

메타 애너테이션은 '애너테이션을 위한 애너테이션', 즉 애너테이션에 붙이는 애너테이션으로 애너테이
션을 정의할 때 애너테이션의 적용대상(target)이나 유지기간(retention)등을 지정하는데 사용된다.

@Target
애너테이션이 적용가능한 대상을 지정하는데 사용된다. 아래는 '@SuppressWarnings'를 정의한 것인데,
이 애너테이션에 적용할 수 있는 대상을 '@Target'으로 지정하였다. 여러 개의 값을 지정할 때는 
배열에서처럼 괄호{}를 사용해야 한다.

@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})
@Retention(RetentionPolicy.SOURCE)
public @interface SuppressWarnings{
  String[] value();
}

'@Target'으로 지정할 수 있는 애너테이션 적용대상의 종류는 아래와 같다.
ANNOTATION_TYPE : 애너테이션
CONSTRUCTOR : 생성자
FIELD : 필드(멤버변수, enum상수)
LOCAL_VARIABLE : 지역변수
METHOD : 메서드
PACKAGE : 패키지
PARAMETER : 매개변수
TYPE : 타입(클래스, 인터페이스, enum)
TYPE_PARAMETER : 타입 매개변수(JDK1.8)
TYPE_USE : 타입이 사용되는 모든 곳(JDK1.8)

'TYPE'은 타입을 선언할 때, 애너테이션을 붙일 수 있다는 뜻이고 'TYPE_USE'는 해당 타입의 변수를
선언할 때 붙일 수 있다는 뜻이다. 위의 값들은 'java.lang.annotation.ElementType'이라는 열거형
에 정의되어 있으며, 아래와 같이 static import문을 쓰면 'ElementType.TYPE'을 'TYPE'과 같이
간단히 할 수 있다.

import static java.lang.annotation.ElementType.*;
@Target({FIELD, TYPE, TYPE_USE}) //적용대상이 FIELD, TYPE, TYPE_USE
public @interface MyAnnotation{ } //MyAnnotation을 정의
@MyAnnotation //적용대상이 TYPE인 경우
class MyClass{
  @MyAnnotation //적용대상이 FIELD인 경우
  int i;
  @MyAnnotation //적용대상이 TYPE_USE인 경우
  MyClass mc;
}
'FIELD'는 기본형에, 그리고 'TYPE_USE'는 참조형에 사용된다.

@Retention
애너테이션이 유지(retention)되는 기간을 지정하는데 사용된다. 애너테이션의 유지 정책(retention
policy)의 종류는 다음과 같다.

SOURCE : 소스 파일에만 존재. 클래스파일에는 존재하지 않음.
CLASS : 클래스 파일에 존재. 실행시에 사용불가. 기본값
RUNTIME : 클래스 파일에 존재. 실행시에 사용가능.

'@Override'나 '@SuppressWarnings'처럼 컴파일러에 의해 사용되는 애너테이션은 유지 정책이 
'SOURCE'이다.
유지 정책을 'RUNTIME'으로 하면, 실행 시에 '리플렉션(reflection)'을 통해 클래스 파일에 저장된
애너테이션의 정보를 읽어서 처리할 수 있다. '@FunctionalInterface'는 '@Override'처럼 컴파일러
가 체크해주는 애너테이션이지만, 실행 시에도 사용되므로 유지 정책이 'RUNTIME'으로 되어 있다.
유지 정책 'CLASS'는 컴파일러가 애너테이션의 정보를 클래스 파일에 저장할 수 있게는 하지만,
클래스파일이 JVM에 로딩될 때는 애너테이션의 정보가 무시되어 실행 시에 애너테이션에 대한 정보를 얻
을 수 없다. 이것이 'CLASS'가 유지정책의 기본값임에도 불구하고 잘 사용되지 않는 이유이다.

@Documented, @Inherited
- javadoc으로 작성한 문서에 포함신키려면 @Documented를 붙인다.
- 애너테이션을 자손 클래스에 상속하고자 할 때, @Inherited를 붙인다.

@Repeatable
반복해서 붙일 수 있는 애너테이션을 정의할 때 사용한다.

@Repeatable(ToDos.class) //ToDo애너테이션을 여러 번 반복해서 쓸 수 있게 한다.
@interface ToDo{
  String value();
}
예를 들어 '@ToDo'라는 애너테이션이 위와 같이 정의되어 있을 때, 다음과 같이 MyClass클래스에
'@ToDo'를 여러 번 붙이는 것이 가능하다.

@ToDo("delete test codes.")
@ToDo("override inherited methods")
class MyClass{
  ...
}
일반적인 애너테이션과 달리 같은 이름의 애너테이션이 여러 개가 하나의 대상에 적용될 수 있기 때문
에, 이 애너테이션들을 하나로 묶어서 다룰 수 있는 애너테이션도 추가로 정의해야 한다.
@interface ToDos{ // 여러 개의 ToDo애너테이션을 담을 컨테이너 애너테이션 ToDos 
  ToDo[] value(); // ToDo애너테이션 배열타입의 요소를 선언. 이름이 반드시 value이어야 함
}
@Repeatable(ToDos.class) //괄호 안에 컨테이너 애너테이션을 지정해 줘야 한다.
@interface ToDo{
  String value();
}

@Native // 필요할 때 추가하기

애너테이션 타입 정의하기 //필요할 때 추가하기
